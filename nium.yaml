openapi: 3.0.3
info:
  contact:
    email: experience@nium.com
    name: Nium API Reference
    url: https://www.nium.com
  description: "The Nium API is a RESTful platform that helps you build and scale\
    \ global financial services including payouts, foreign exchange, onboarding, and\
    \ digital wallets. It offers secure, resource-oriented endpoints for onboarding,\
    \ wallet management, foreign exchange, payments, compliance, and more.\n\nBuilt\
    \ on standard REST principles, the Nium API uses **JSON-formatted requests and\
    \ responses**, **HTTPS** for secure communication, and consistent conventions\
    \ across all endpoints. Each integration is modular\u2014so you can implement\
    \ only what you need\u2014and reliable, so your team can move fast with confidence.\n\
    \nYou can use the Nium API to:\n  - Onboard individual or corporate customers\
    \ with built-in **KYC/KYB** workflows.\n  - Manage digital wallets and transfer\
    \ funds in real time.\n  - Access competitive **foreign exchange (FX)** rates\
    \ and lock them securely.\n  - Make global payouts via bank transfers, cards,\
    \ and local payment methods.\n  - Prefund and reconcile transactions for operational\
    \ control.\n  - Monitor transactions and generate account statements.\n  - Handle\
    \ compliance with document uploads and **RFI (Request for Information)** flows.\n\
    \n  This reference includes everything you need to get started, including request\
    \ and response structures, required headers, code samples, and schema definitions.\
    \  \n  \n  For more information about using Nium, see [Nium Documentation](/)."
  license:
    name: Copyright (c) 2025 NIUM
  title: NIUM Platform
  version: 2025.6.17
servers:
- url: https://gateway.nium.com/
security:
- default: []
tags:
- name: Client Prefund Account
  description: "The **Client Prefund Account** requests let you fund your Nium account\
    \ and track those funds across all currencies. The `client` resource represents\
    \ your account with Nium.\n\nPrefunding ensures you have an available balance\
    \ to support downstream activity\u2014like customer wallet funding, card issuance,\
    \ or cross-border payouts. The prefunding workflow includes:\n  - Transferring\
    \ funds to a Nium-provided virtual account (per currency).\n  - Submitting a prefund\
    \ request (via API) with transfer details and a reference number.\n  - Automatic\
    \ reconciliation, where Nium validates the request against actual received funds.\n\
    \  - Balance visibility, so you can monitor prefund amounts in real time across\
    \ all supported currencies.\n\nUse these requests to:\n  - Initiate a prefund\
    \ request after sending a bank transfer.\n  - Check the status of all prefund\
    \ requests by `date`, `status`, or `referenceId`.\n  - Fetch available prefund\
    \ balances across currencies to plan your funding needs\n\nThese requests are\
    \ critical for clients who manage high-volume payouts or need to maintain liquidity\
    \ for funding wallets, issuing cards, or settling currency conversions. To learn\
    \ more about how prefunding works, see [Program, Client, and Client Prefund Account](/docs/program-client-and-client-prefund-account)."
- name: Client Settings
  description: "Use the Client Settings requests to fetch and manage configuration\
    \ details set at the client level. The `client` resource represents your account\
    \ with Nium. These settings are defined during onboarding and determine how your\
    \ program operates\u2014including supported currencies, fee structures, funding\
    \ limits, and compliance behavior.\n\nThese requests let you:\n  - Retrieve the\
    \ full client profile, including name, region, regulatory details, and webhook\
    \ configuration.\n  - Fetch fee configurations applied at the client level.\n\
    \  - Get limits and authorization settings for payin transactions.\n\nThese configurations\
    \ are typically read-only and are set by the Nium team during onboarding. However,\
    \ the details are essential for building dynamic integrations that respond to\
    \ region-specific rules or client-level constraints.\n\nFor a full overview of\
    \ how clients and programs are structured in Nium, see [Program, Client, and Client\
    \ Prefund Account](/docs/program-client-and-client-prefund-account)."
- name: Client Transactions
  description: "Use the Fetch Client Transactions request to retrieve a complete view\
    \ of financial activity across your client account. This request returns every\
    \ transaction initiated under your program\u2014including wallet loads, foreign\
    \ exchange conversions, card payments, and payouts.\n\nYou can:\n  - Retrieve\
    \ transactions by date range, `status`, `customerHashId`, `walletHashId`, or `transactionCurrency`.\n\
    \  - View transaction metadata like `amount`, `type`, and `settlementStatus`.\n\
    \nUse this request to support reporting, reconciliation, and troubleshooting across\
    \ all customer transactions. For more information about transactions, see [Transactions](/docs/transaction-types)."
- name: Customer Account - Individual
  description: "Use the Customer Account \u2013 Individual requests to onboard, update,\
    \ and manage individual customers under your client account. Individual customers\
    \ are represented by the `customer` resource.\n\nThese requests let you collect\
    \ personal information, verify identity, and track onboarding status in compliance\
    \ with Know Your Customer (KYC) requirements. You can:\n  - Add new individual\
    \ `customers` and assign them wallets.\n  - Update `customer` or contact details.\n\
    \  - Upload documents and respond to Requests for Information (RFIs).\n  - Regenerate\
    \ KYC URLs and fetch onboarding status.\n\nFor a full walkthrough of onboarding\
    \ individual customers, see [Individual Customers](/docs/overview-individual-customer)."
- name: Customer Account - Corporate
  description: "Use the Customer Account \u2013 Corporate requests to onboard, update,\
    \ and manage corporate customers under your client account. Corporate customers\
    \ are also represented by the `customer` resource; however corporate customers\
    \ are managed using the `/corporate` endpoint. These requests let you submit business\
    \ entity details, verify documents, and track compliance status as part of the\
    \ corporate Know Your Business (KYB) process.\n\nYou can:\n  - Onboard `corporate`\
    \ customers and assign them wallets.\n  - Upload incorporation and compliance\
    \ documents.\n  - Respond to Requests for Information (RFIs) for KYB verification.\n\
    \  - Update `corporate` profiles or business information.\n  - Regenerate KYB\
    \ URLs and fetch onboarding status.\n\nFor a full walkthrough of onboarding `corporate`\
    \ users, see [Corporate Customers](/docs/overview-corporate-customer)."
- name: Customer Management
  description: >-
    Use the Customer Management requests to view, search, and manage individual or
    corporate customers after onboarding; both corporate and individual customers
    are represented by the `customer` resource. These requests let you fetch customer
    details, list all customers under your account, and manage account-level actions
    like blocking or unblocking.


    You can:
      - List customers by `customerHashId`, `email`, `mobile` number, or `tag`.
      - Update the tags of a `customer`.
      - Block or unblock a `customer`.
      - Download account statements by date range and currency.

    For more information on the relationship between `customers` and `clients`, see
    [Parent-Child Hierarchy](/docs/parent-child-hierarchy).
- name: Customer Terms and Conditions
  description: "Use the Customer Terms and Conditions requests to manage how end users\
    \ review and accept your program\u2019s terms during onboarding. These requests\
    \ help you track customer acceptance and retrieve the latest version of your configured\
    \ legal agreements.\n\nYou can:\n  - Retrieve the current terms and conditions\
    \ configured for your account.\n  - Check whether a customer has accepted the\
    \ terms.\n  - Record acceptance of terms for individual customers.\n\nFor more\
    \ information on managing terms and when they need to be shown to customers, see\
    \ [Onboarding](/docs/onboarding)."
- name: Open Banking (Onboarding)
  description: >-
    Use the Open Banking (Onboarding) requests to retrieve verified customer account
    and payment data from regulated third-party providers. These requests support
    onboarding flows that comply with Open Banking standards, including AIS (Account
    Information Services) and PIS (Payment Initiation Services).


    You can:
      - Fetch bank account details using a consent ID (AIS flow).
      - Retrieve payment details using a system reference number (PIS flow).

    These requests help streamline onboarding by prefilling customer data with bank-verified
    information, reducing manual input and ensuring compliance.

    Open Banking onboarding is currently supported in the United Kingdom and select
    European Union countries where PSD2 regulations apply. For more information, see
    [Open Banking](/docs/open-banking).
- name: Accounts
  description: "Use the Accounts requests to link and manage a customer\u2019s external\
    \ bank accounts; customer's bank accounts are represented by the `bankAccounts`\
    \ resource. These requests allow you to connect external accounts for payout or\
    \ funding purposes, verify ownership through authentication, and update or remove\
    \ linked accounts as needed.\n\nYou can:\n  - Create and link a new bank account\
    \ to a customer profile.\n  - Fetch, update, or delete linked bank accounts.\n\
    \  - Filter linked accounts by account number, tags, or currency.\n\nThese requests\
    \ help you enable payouts for customers and verify bank account ownership. For\
    \ more information, see [Direct Debit](/docs/direct-debit)."
- name: Onboarding Forms - Corporate
  description: >-
    Use the Corporate Onboarding Forms requests to generate and manage onboarding
    form links for corporate customers; onboarding forms are represented by the `applications`
    resource. These requests support a secure, self-service onboarding experience
    where customers complete their KYB (Know Your Business) journey through a dynamic
    web form.


    You can:
      - Create an `application` and generate a secure link to the onboarding form
    for the customer.
      - Regenerate an onboarding form link if the original expires.
      - Fetch `application` details and track completion status by section.
      - Identify and resolve submission errors or missing information.

    Ideal for use cases where you want Nium to host the onboarding experience. For
    more information, see [Onboarding Forms](/docs/onboarding-forms).
- name: Customer Wallet Balance
  description: >-
    Use the Customer Wallet Balance requests to manage wallets assigned to a customer;
    customer wallets are represented by the `wallet` resource. These requests return
    real-time balances across all configured currencies within the wallet, including
    any blocked or withheld amounts.


    You can:
      - Add a new `wallet` for a customer in a supported currency.
      - Fetch current balances for each currency in the wallet.
      - View withheld balances set aside for compliance or operational holds.
      - Identify the default currency for the wallet.

    These requests are useful for displaying wallet balances to customers, validating
    funding availability, or powering internal dashboards. For more information, see
    [Wallets](/docs/wallets).
- name: Wallet to Wallet Transfers
  description: >-
    Use the Wallet to Wallet Transfers requests to move funds between customer wallets,
    either across different clients or within the same client group. Customer wallets
    are represented by the `wallet` resource. Each transfer requires specifying the
    source and destination wallets and must use a supported currency.


    You can:
      - Transfer funds between two `wallets` using the Wallet to Wallet Transfer request.
      - Include customer comments and optional metadata to support reconciliation.
      - Specify exemption codes and purpose of transfer as needed.

    Note: The peer-to-peer (P2P) transfer request has been deprecated. Use the Wallet
    to Wallet Transfer request for all wallet-to-wallet transfers moving forward.
    For more information, see [Wallet to Wallet Transfers](/docs/wallet-to-wallet-transfers).
- name: Customer Wallet Transactions
  description: >-
    Use the Customer Wallet Transactions requests to retrieve transaction history
    and manage transaction metadata for a specific customer wallet. Customer wallets
    are represented by the `wallet` resource. These requests allow you to fetch individual
    transactions, attach receipts, tag transactions, and update metadata like location
    or business classification.


    You can:
      - Fetch a list of transactions by customer and `walletHashId`.
      - Upload or download transaction receipts.
      - Tag transactions for categorization or tracking.
      - Add merchant location data or flag a transaction as business-related.

    These requests are useful for building audit trails, powering transaction-level
    reporting, or enriching customer-facing interfaces. For more information, see
    [Transactions](/docs/transactions).
- name: Customer Funding
  description: "Use the Customer Funding requests to link, manage, and use funding\
    \ instruments for topping up customer wallets. The funding source customer's use\
    \ to fund wallets (bank accounts, cards, etc.) is represented by the `fundingInstrument`\
    \ resource. These requests support multiple funding channels, including direct\
    \ debit, cards, bank transfers, and prefunding.\n\nYou can:\n  - Link a `fundingInstrument`\
    \ such as a card or bank account to a customer wallet.\n  - Confirm or delete\
    \ existing `fundingInstruments`.\n  - Fund a wallet using a supported funding\
    \ channel and currency pair.\n  \nThese requests let customers fund their wallets\
    \ using external accounts. For more information, see [Fund a Wallet](/docs/fund-wallet)."
- name: Customer Virtual Accounts
  description: >-
    Use the Customer Virtual Accounts requests to assign and manage virtual account
    numbers (VANs) for a customer's wallet. Virtual accounts are represented by the
    `paymentId`. These virtual accounts act as unique identifiers for receiving funds,
    and enabling seamless payins via bank transfer.


    You can:
      - Assign virtual accounts by currency and bank name.
      - Fetch all virtual accounts linked to a customer's wallet.
      - Add, update, or delete custom tags for each virtual account.
      - Download account ownership certificates, with optional balance details.

    These requests are essential for customers who receive payments via virtual accounts.
    For more information, see [Virtual Account Number](/docs/virtual-account-number).
- name: Rates
  description: >-
    Use the Rates requests to fetch real-time and historical foreign exchange (FX)
    rates for supported currency pairs. The rates returned are represented by the
    `exchangeRate` resource. These rates help you calculate conversion values, display
    FX data to customers, or power cross-currency transactions.


    You can:
      - Retrieve interbank exchange rates without markup.
      - View historical rates grouped by time window (e.g., hourly, daily).

    These requests are useful for displaying FX rates, previewing conversions, or
    auditing pricing across time. For more information, see [Foreign Exchange](/docs/fx).
- name: Quotes
  description: "Use the Quotes requests to generate and manage Foreign Exchange (FX)\
    \ quotes for supported currency pairs. The quotes returned are represented by\
    \ the `quote` resource. Each quote includes the applicable exchange rate, markup,\
    \ and lock period, and can be used for conversions within the quote\u2019s validity\
    \ window.\n\nYou can:\n  - Create a quote with a fixed lock period and conversion\
    \ schedule.\n  - Retrieve details of a previously generated quote by quote ID.\n\
    \  - View the applicable markup and rate capture time for audit purposes.\n\n\
    These requests are useful for locking FX rates before executing a conversion.\
    \ For more information, see [Foreign Exchange](/docs/fx)."
- name: Conversions
  description: >-
    Use the Conversions requests to execute or cancel currency conversions between
    supported currencies in a customer wallet. Conversions returned are represented
    by the `conversion` resource. These requests use either real-time foreign exchange
    (FX) rates or pre-generated quotes and support scheduled or immediate settlement.


    You can:
      - Create a `conversion` using a quote or live market rate.
      - Schedule a `conversion` for immediate, end-of-day, or future execution.
      - Fetch the details of a `conversion` by `id`, `status, amounts, and markup
    rate.
      - Cancel or manually execute pending conversions before expiry.

    These requests are essential for moving funds between currencies in customer wallets.
    For more information, see [Foreign Exchange](/docs/fx).
- name: Quotes (Previous Version)
  description: "Use the Quotes (Previous Version) requests to fetch the foreign exchange\
    \ rate between two currencies, with optional source or destination amounts. This\
    \ earlier version calculates the equivalent value but does not support quote locking\
    \ or scheduling.\n\n> \u26A0\uFE0F **Deprecated**: This version is maintained\
    \ for backward compatibility. Use the current [Quotes](/api#tag/quotes) version\
    \ for full functionality.\n\nYou can:\n  - Retrieve exchange rates using a source\
    \ or destination amount.\n  - Calculate equivalent amounts for supported currency\
    \ pairs.\n\nThese requests are maintained for backward compatibility. For more\
    \ advanced features, use the current [Quotes](/api#tag/quotes) requests instead."
- name: Conversions (Previous Version)
  description: "Use the Conversions (Previous Version) request to convert funds from\
    \ one currency to another within the same customer wallet. This version supports\
    \ simple, real-time conversions without requiring quotes or scheduled execution.\n\
    \n> \u26A0\uFE0F **Deprecated**: This version is maintained for backward compatibility.\
    \ Use the current [Conversions](/api#tag/conversions) version for full functionality.\n\
    \nYou can:\n  - Transfer balances between supported currency pairs.\n  - View\
    \ exchange rates with applied markup.\n\nThis request is maintained for backward\
    \ compatibility. For enhanced functionality like rate locking, future execution,\
    \ or quote-based conversions, see the current [Conversions](/api#tag/conversions)\
    \ requests instead."
- name: Beneficiary
  description: >-
    Use the Beneficiary requests to add, validate, update, or delete payout recipients
    associated with a customer. Payout recipients are represented by the `beneficiary`
    resource. These requests support a wide range of payout corridors and methods,
    including bank accounts, cards, wallets, and proxy-based transfers.


    You can:
      - Add a new `beneficiary` and define payout method, account, and compliance
    details.
      - Validate account information based on destination country and currency.
      - Update or remove an existing `beneficiary`.
      - Fetch individual or all `beneficiaries` associated with a customer.

    These requests are essential for sending payouts to verified recipients. For more
    information, see [Transfer Money](/docs/transfer-money).
- name: Reference Data
  description: >-
    Use the Reference Data requests to look up metadata required for making payouts.
    These requests return supported countries, currencies, corridors, and bank routing
    code formats to help you dynamically build payout forms and validate payout instructions.


    You can:
      - Search for routing codes using bank or branch name.
      - Retrieve the structure and required fields for routing code types (e.g. SWIFT,
    IFSC, SORT CODE).
      - Fetch supported corridors and payout methods for a given client or customer.
      - Validate country and currency combinations for a specific payout flow.

    Use these requests to pre-fill payout forms and reduce errors when collecting
    recipient details. For more information, see [Routing Codes](/docs/routing-codes).
- name: Payout
  description: "Use the Payout requests to initiate and manage transactions from a\
    \ customer wallet to a beneficiary. Payouts and transfers are represented by the\
    \ `remittance` resource and supports a range of payout methods including local\
    \ bank transfers, SWIFT, cards, wallets, and proxy-based payments.\n\nYou can:\n\
    \  - Create a `remittance` using `beneficiary`, amount, and currency details.\n\
    \  - Track payout status and fetch remittance lifecycle events.\n  - Cancel a\
    \ payout before it\u2019s processed.\n\nThese requests are essential for sending\
    \ funds to beneficiaries globally. For more information, see [Transfer Money](/docs/transfer-money)."
- name: Nium Verify
  description: "Use Nium Verify requests confirm bank account details are valid before\
    \ processing a payout or linking a funding source. Each verification request is\
    \ represented by the `verification` resource and supports account verification\
    \ via direct bank account details or another proxy identifiers (e.g., mobile number,\
    \ UPI ID, virtual payment address).\n\nYou can:\n  - Initiate a `verification`\
    \ using the customer\u2019s account or proxy information.\n  - Fetch `verification`\
    \ status, account holder name, and validation outcome.\n  - List all `verification`\
    \ attempts made under your `clientHashId`.\n  - Track invalid inputs, failure\
    \ reasons, and metadata for audits or troubleshooting.\n\nThese requests are essential\
    \ for reducing failed payouts and validating beneficiary or sender accounts. For\
    \ more information, see [Nium Verify](/docs/account-verification)."
- name: Simulators
  description: >-
    Use the Simulator requests to simulate card events in sandbox environments. These
    requests simulate how the `transaction` and `settlement` resources change, allowing
    you to test how your integration handles various card lifecycle stages and transaction
    outcomes.


    You can:
      - Simulate a card authorization request.
      - Simulate a card clearing or settlement event.
      - Test transaction flows with different amounts, currencies, and merchant configurations.

    These requests are useful for validating card transaction logic, testing edge
    cases, and preparing for live certification. For more information, see [Testing
    Nium](/docs/testing).
- name: Lifecycle
  description: >-
    Use the Lifecycle requests to manage the status and lifecycle of a card. The cards
    you create are represented by the `card` resource; the requests let you activate
    new cards, block or unblock existing cards, and convert or replace cards based
    on customer needs.


    You can:
      - Activate a physical or virtual card after delivery.
      - Temporarily block, permanently block, or unblock a card.
      - Convert a virtual card to a physical one.
      - Block and replace a card due to loss, damage, or fraud.

    These requests are essential for maintaining secure card programs and ensuring
    customers can control their cards throughout the lifecycle. For more information,
    see [Cards](/docs/card-overview).
- name: Security
  description: >-
    Use the Security requests to manage sensitive card data such as PINs, CVVs, and
    full card numbers. These requests change the `card` resource and let you fetch
    or update encrypted card details, set or reset PINs, and unmask card data for
    secure usage.


    You can:
      - Set, reset, or unblock a card PIN (region-specific availability).
      - Retrieve the encrypted CVV2 and expiry date for a card.
      - Fetch ATM PINs or reveal encrypted security details when permitted.
      - Unmask card numbers for use in approved scenarios.

    These requests are critical for enabling secure access to card details and maintaining
    compliance across card programs. For more information, see [Card Security](/docs/card-security).
- name: 3DS
  description: >-
    Use the 3DS requests to manage 3D Secure (Three-Domain Secure) authentication
    flows for customer card transactions. 3DS requests are represented by the `3ds`
    resource. These requests change the `3ds` resource and help verify cardholder
    identity before completing high-risk or online transactions.


    You can:
      - Check if a card is enrolled in 3DS.
      - Enroll or update a passcode for card authentication.
      - Fetch 3DS passcode enrollment status.
      - Handle out-of-band (OOB) authentication callbacks.

    These requests help reduce fraud, support SCA (Strong Customer Authentication)
    compliance, and secure online card payments. For more information, see [3DS Security](/docs/3ds-overview).
- name: Controls
  description: "Use the Controls requests to configure transaction behavior on a customer\u2019\
    s card. These requests change the `card` resource and allow you to set spend limits,\
    \ block or unblock specific merchant types, and restrict transactions by channel\
    \ or geography.\n\nYou can:\n  - Set per-transaction, daily, monthly, or lifetime\
    \ card spending limits.\n  - Block or unblock transaction channels such as in-store,\
    \ online, ATM, and cross-border.\n  - Apply merchant category code (MCC) restrictions\
    \ using whitelists or blacklists.\n  - Fetch current card limits and channel restrictions\
    \ for auditing or updates.\n\nThese requests are essential for enforcing program\
    \ rules, controlling fraud exposure, and adapting card behavior in real time.\
    \ For more information, see [Manage Cards](/docs/card-management)."
- name: Cards Reference Data
  description: >-
    Use the Cards Reference Data request to fetch the reference exchange rate for
    a card transaction; the rate is represented by the `referenceRate` resource. This
    request returns the conversion rate between a source currency and a cardholder's
    billing currency, based on the selected card scheme (Visa or Mastercard).


    You can:
      - Retrieve the reference foreign exchange (FX) rate for a specific transaction
    amount and currency pair.
      - Specify the card scheme to return the applicable network rate.
      - Use this data to preview or audit card conversion outcomes.

    This request is helpful when calculating estimated billing amounts for cardholders.
    For more information, see [Cards](/docs/card-overview).
- name: Customer Fees
  description: "Use the Customer Fees request to manually charge a custom fee to a\
    \ customer\u2019s wallet. This request changes the `customFee` resource and must\
    \ be pre-approved by Nium before use due to regulatory requirements.\n\nYou can:\n\
    \  - Charge a fixed or percentage-based fee in any wallet-supported currency.\n\
    \  - Add fee details like name, amount, comments, and custom tags for tracking.\n\
    \  - Track the status and system reference number returned after charging a fee.\n\
    \nAll fees must be disclosed in your customer terms and approved by Nium compliance.\
    \ For more details on enabling fees, contact your Nium account manager or [Nium\
    \ Support](mailto:support@nium.com). For more information, see [Fees](/docs/fees)."
- name: Payouts
  description: >-
    Use the Payouts - Testing request to simulate changes to a remittance status in
    sandbox. This request changes the `remittance` resource and enable you to test
    how your integration responds to payout lifecycle transitions.


    You can:
      - Simulate transaction status changes like **PAID**, **REJECTED**, or **EXPIRED**.
      - Trigger RFI (Request for Information) flows using `requestInfoFor`.
      - Test how your system handles various edge cases in payout execution.

    These requests are helpful for verifying your payout integration before going
    live. For more information, see [Testing Nium](/docs/testing).
- name: Payin
  description: >-
    Use the Payin - Testing requests to simulate wallet funding events and funding
    instrument status changes in sandbox. These requests change the `inwardPayment`
    and `fundingInstrument` resources and help validate how your integration responds
    to wallet funding flows.


    You can:
      - Simulate a received wallet payment using a virtual account number.
      - Update the status of a funding instrument (e.g., simulate micro-deposit success
    or failure).
      - Test how your system handles wallet credits, external funding, and onboarding
    steps.

    These requests are useful for testing payin flows before going live. For more
    information, see [Testing Nium](/docs/testing).
- name: Customer
  description: "Use the Customer - Testing requests to simulate transitions in a customer\u2019\
    s onboarding or compliance status. These requests change the `customer` resource\
    \ and enables you to test how your integration handles real-world onboarding scenarios\
    \ in sandbox.\n\nYou can:\n  - Simulate a transition from **ACTION_REQUIRED**\
    \ to **RFI_REQUESTED**, **REJECTED**, or **COMPLIANCE_COMPLETED**.\n  - Trigger\
    \ status changes in response to submitted documents or review outcomes.\n  - Validate\
    \ how your platform reacts to onboarding workflows and compliance delays.\n\n\
    These requests are useful for testing customer onboarding logic and compliance\
    \ edge cases. For more information, see [Testing Nium](/docs/testing)."
paths:
  /api/v1/client/{clientHashId}/prefund:
    post:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientPrefundResponseDTO'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayinApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayinApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayinApiError'
          description: Internal Server Error
      tags:
      - Client Prefund Account
      deprecated: false
      description: This API allows our clients to raise a prefund request in the system.
      operationId: ClientPrefundRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrefundRequestDTO'
        description: prefundRequestDTO
        required: true
      summary: Client Prefund Request
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/prefundList:
    get:
      parameters:
      - description: amount
        in: query
        name: amount
        required: false
        schema:
          type: string
      - description: bankReferenceNumber
        in: query
        name: bankReferenceNumber
        required: false
        schema:
          type: string
      - description: Unique client Id assigned to the client during the onboarding
          process.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: currency
        in: query
        name: currency
        required: false
        schema:
          type: string
      - description: endDate
        in: query
        name: endDate
        required: false
        schema:
          type: string
      - allowEmptyValue: false
        description: >-
          The sort order for the results. Acceptable values are ASC or DESC.

          The default order value is DESC.
        in: query
        name: order
        required: false
        schema:
          default: DESC
          type: string
      - allowEmptyValue: false
        description: >-
          This API may have lot of data in response and supports pagination. Entire
          response data is divided into pages with size as the upper limit on the
          number of data. Integer values from 0 onwards are acceptable.

          Default page is 0.
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int32
          type: integer
      - description: prefundStatus
        in: query
        name: prefundStatus
        required: false
        schema:
          type: string
      - allowEmptyValue: false
        description: >-
          The upper limit on the number of items to be fetched with each call. Integer
          values from 1 onwards are acceptable.

          Default size is 20.
        in: query
        name: size
        required: false
        schema:
          default: 20
          format: int32
          type: integer
      - description: startDate
        in: query
        name: startDate
        required: false
        schema:
          type: string
      - description: systemReferenceNumber
        in: query
        name: systemReferenceNumber
        required: false
        schema:
          type: string
      - description: uniquePayerId
        in: query
        name: uniquePayerId
        required: false
        schema:
          type: string
      - description: uniquePaymentId
        in: query
        name: uniquePaymentId
        required: false
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientPrefundListResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayinApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayinApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayinApiError'
          description: Internal Server Error
      tags:
      - Client Prefund Account
      deprecated: false
      description: This API allows you to fetch the details of client prefund requests.
      operationId: FetchClientPrefundRequest
      summary: Fetch Client Prefund Request
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/balances:
    get:
      tags:
      - Client Prefund Account
      summary: Client Prefund Balances
      description: This API allows you to fetch the available prefund balance for
        a client.
      operationId: ClientPrefundBalances
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountResponseDTO'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}:
    get:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientDetailResponseDTO2'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductApiError'
          description: Internal Server Error
      tags:
      - Client Settings
      deprecated: false
      description: This API will help you to fetch the configuration details of a
        client.
      operationId: ClientDetails
      summary: Client Details
      x-info:
        apiType: external
  /api/v2/client/{clientHashId}/fees:
    get:
      tags:
      - Client Settings
      summary: Fee Details
      description: >-
        This API provides all the fees that have been set at the client level by NIUM.

        Refer to the following [Fees User Guide](/docs/fees-limits) for the Glossary
        of Fees for pre-defined fees supported on the system
      operationId: FeeDetails_1
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClientFeeDetailsResponseDTO'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/payin/limits:
    get:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: currency
        in: query
        name: currency
        required: false
        schema:
          type: string
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitsResponseDTO'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayinApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayinApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayinApiError'
          description: Internal Server Error
      tags:
      - Client Settings
      deprecated: false
      description: This API allows you to get Maximum and Available Limits of Direct
        Debit
      operationId: PayinLimits
      summary: Get Maximum and Available Limits of Direct Debit
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/transactions:
    get:
      tags:
      - Client Transactions
      summary: Client Transactions
      description: This API allows you to fetch transaction details at the client
        level.
      operationId: ClientTransactions
      parameters:
      - name: clientHashId
        in: path
        description: "Unique client identifier generated and shared before API handshake.\n\
          >\u2139\uFE0F INFO \n>Query parameters are optional. If query parameters\
          \ are not passed then by default three months transactions will be returned."
        required: true
        schema:
          type: string
      - name: startDate
        in: query
        description: From date for fetching the transaction details. The format for
          startDate is YYYY-MM-DD.
        required: false
        schema:
          type: string
          description: From date for fetching the transaction details. The format
            for startDate is YYYY-MM-DD.
      - name: endDate
        in: query
        description: End date for fetching the transaction details. The format for
          endDate is YYYY-MM-DD.
        required: false
        schema:
          type: string
          description: End date for fetching the transaction details. The format for
            endDate is YYYY-MM-DD.
      - name: page
        in: query
        description: This API may have lot of data in response and supports pagination.
          Entire response data is divided into pages with size as the upper limit
          on the number of data. Integer values from 0 onwards are acceptable. Default
          page is 0.
        required: false
        schema:
          type: string
          description: This API may have lot of data in response and supports pagination.
            Entire response data is divided into pages with size as the upper limit
            on the number of data. Integer values from 0 onwards are acceptable.\nDefault
            page is 0.
          example: 0
      - name: size
        in: query
        description: This will decide the number of elements per page. Typical values
          can be 1-20.
        required: false
        schema:
          type: string
          description: This will decide the number of elements per page. Typical values
            can be 1-20.
          example: 20
      - name: order
        in: query
        description: The sort order for the results.
        required: false
        schema:
          type: string
          description: The sort order for the results.
          example: DESC
          enum:
          - ASC
          - DESC
        example: DESC
      - name: authCode
        in: query
        description: This parameter can be used to filter the transactions based on
          the authorization code. In case of fund wallet transactions you can provide
          the systemReferenceNumber as value.
        required: false
        schema:
          type: string
          description: This parameter can be used to filter the transactions based
            on the authorization code. In case of fund wallet transactions you can
            provide the systemReferenceNumber as value.
      - name: customerHashId
        in: query
        description: Unique identifier generated with customer creation.
        required: false
        schema:
          type: string
          description: Unique identifier generated with customer creation.
      - name: walletHashId
        in: query
        description: Unique wallet identifier generated simultaneously with customer
          creation.
        required: false
        schema:
          type: string
          description: Unique wallet identifier generated simultaneously with customer
            creation.
      - name: systemTraceAuditNumber
        in: query
        description: This parameter can filter the transactions based on systemTraceAuditNumber.
        required: false
        schema:
          type: string
          description: This parameter can filter the transactions based on systemTraceAuditNumber.
      - name: transactionType
        in: query
        description: This field contains the transaction can be one of the complete
          list of transactions mentioned in [Transaction Types](https://docs.nium.com/apis/docs/transaction-types).
        required: false
        schema:
          type: string
          description: This parameter can filter the transactions based on transaction
            types which can be one or more of the complete list of transactions mentioned
            in [Glossary of Transaction Types](https://docs.nium.com/baas/get-transactions#glossary-of-transaction-types).
      - name: status
        in: query
        description: This parameter can filter the transactions based on status. The
          detailed list of possible values is available in the response of this API.
        required: false
        schema:
          type: string
          description: This parameter can filter the transactions based on status.
            The detailed list of possible values is available in the response of this
            API.
          enum:
          - 'NULL'
          - IN_PROGRESS
          - ACTION_REQUIRED
          - RFI_REQUESTED
          - RFI_RESPONDED
          - COMPLETED
          - ERROR
          - REJECT
          - EXPIRED
      - name: complianceStatus
        in: query
        description: This parameter can filter the transactions based on complianceStatus.
          The detailed list of possible values is available in the response of this
          API.
        required: false
        schema:
          type: string
          description: This parameter can filter the transactions based on complianceStatus.
            The detailed list of possible values is available in the response of this
            API.
          enum:
          - CLEAR
          - PENDING
          - RFI_REQUESTED
          - REJECT
      - name: authCurrency
        in: query
        description: This parameter can filter the transactions based on auth currency
          and accepts 3-letter [ISO-4217 transaction currency code](https://docs.nium.com/apis/docs/currency-and-country-codes).
        required: false
        schema:
          type: string
          description: This parameter can filter the transactions based on auth currency
            and accepts 3-letter [ISO-4217 transaction currency code](https://docs.nium.com/apis/docs/currency-and-country-codes).
      - name: mcc
        in: query
        description: This parameter can filter the transactions based on 4-digit Merchant
          Category Codes.
        required: false
        schema:
          type: string
          description: This parameter can filter the transactions based on 4-digit
            Merchant Category Codes.
      - name: merchantName
        in: query
        description: This parameter can filter the transactions based on the merchant
          name field.
        required: false
        schema:
          type: string
          description: This parameter can filter the transactions based on the merchant
            name field.
      - name: merchantCity
        in: query
        description: This parameter can filter the transactions based on the merchant
          city field.
        required: false
        schema:
          type: string
          description: This parameter can filter the transactions based on the merchant
            city field.
      - name: merchantCountry
        in: query
        description: This parameter can filter the transactions based on the merchant
          country field.
        required: false
        schema:
          type: string
          description: This parameter can filter the transactions based on the merchant
            country field.
      - name: transactionCurrency
        in: query
        description: This field contains the 3-letter [ISO-4217 transaction currency
          code](https://www.iso.org/iso-4217-currency-codes.html).
        required: false
        schema:
          type: string
          description: This field contains the 3-letter [ISO-4217 transaction currency
            code](https://www.iso.org/iso-4217-currency-codes.html).
      - name: merchantCategories
        in: query
        description: This parameter describes the merchant's type of business product
          or service, also known as the Merchant Category Code (MCC) such as Airlines,
          Restaurants etc.
        required: false
        schema:
          type: string
          description: This parameter describes the merchant's type of business product
            or service, also known as the Merchant Category Code (MCC) such as Airlines,
            Restaurants etc.
      - name: merchantCountries
        in: query
        description: This parameter can filter the transactions based on comma-separated
          list of 2-letter ISO merchant countries.
        required: false
        schema:
          type: string
          description: This parameter can filter the transactions based on comma-separated
            list of 2-letter ISO merchant countries.
      - name: cardHashId
        in: query
        description: This field can apply the filter based on the unique card identifier
          generated during new/add-on card issuance.
        required: false
        schema:
          type: string
          description: This field can apply the filter based on the unique card identifier
            generated during new/add-on card issuance.
      - name: paymentInstrumentHashId
        in: query
        description: This parameter can filter the transactions based on comma-separated
          paymentInstrumentHashId.
        required: false
        schema:
          type: string
          description: This parameter can filter the transactions based on comma-separated
            paymentInstrumentHashId.
      - name: businessTransaction
        in: query
        description: This parameter can filter the transactions based on businessTransaction
          flag.
        required: false
        schema:
          type: string
          description: This parameter can filter the transactions based on businessTransaction
            flag.
      - name: settlementDate
        in: query
        description: This parameter can filter the transactions based on the settlement
          date of the transaction in format yyyyMMdd.
        required: false
        schema:
          type: string
          description: This parameter can filter the transactions based on the settlement
            date of the transaction in format yyyyMMdd.
      - name: transactionsLabelsKey
        in: query
        description: This parameter can filter the transactions based on transactionsLabelsKey.
        required: false
        schema:
          type: string
          description: This parameter can filter the transactions based on transactionsLabelsKey.
      - name: transactionsLabelsValue
        in: query
        description: This parameter can filter the transactions based on transactionsLabelsValue.
        required: false
        schema:
          type: string
          description: This parameter can filter the transactions based on transactionsLabelsValue.
      - name: tagKey
        in: query
        description: This parameter can filter the transactions, based on the exact
          value of tagKey defined against transactions. This can be used as an independent
          search parameter.
        required: false
        schema:
          type: string
          description: This parameter can filter the transactions, based on the exact
            value of tagKey defined against transactions. This can be used as an independent
            search parameter.
      - name: tagValue
        in: query
        description: This parameter can filter the transactions, based on the approximating
          value of tagValue(that may be mapped for a tagKey defined against transactions).
          This can be used as an independent search parameter.
        required: false
        schema:
          type: string
          description: This parameter can filter the transactions, based on the approximating
            value of tagValue(that may be mapped for a tagKey defined against transactions).
            This can be used as an independent search parameter.
      - name: property
        in: query
        description: The field indicates the response parameter used to sort paginated
          data, with 'createdAt' as the default parameter.
        required: false
        schema:
          type: string
          description: Property
      - name: childCustomerHashId
        in: query
        description: The unique child customer identifier that's created when a new
          child customer is created.
        required: false
        schema:
          type: string
          description: This field contains the unique child customer identifier generated
            when new child customer created.
      - name: settlementStatus
        in: query
        description: This parameter can filter the transactions based on settlement
          status. The detailed list of possible values is available in the response
          of this API.
        required: false
        schema:
          type: string
          description: This parameter can filter the transactions based on settlement
            status. The detailed list of possible values is available in the response
            of this API.
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientTransactionsResponseDTO'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
      x-info:
        apiType: external
  /api/v4/client/{clientHashId}/customer:
    post:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddCustomerResponseDTO'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Internal Server Error
      tags:
      - Customer Account - Individual
      deprecated: false
      operationId: UnifiedAddCustomer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCustomerRequestDTO'
        description: Add individual customer
        required: true
      summary: Unified Add Customer
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/updateCustomer:
    post:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: Unique customer identifier generated on customer creation.
        in: path
        name: customerHashId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateCustomerResponseDTO'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Internal Server Error
      tags:
      - Customer Account - Individual
      deprecated: false
      description: >-
        This API allows you to update the customer details subject to the following
        constraints:

        1. If compliance status equals to COMPLETED. You can only update email, mobile,
        delivery address details, and correspondence address details. You may NOT
        update the billing address.

        2. In other cases, you may update any of the fields.

        At least one key-value pair is needed in the request body of this API.
      operationId: CustomerUpdate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomerDTO'
        description: Customer update request
      summary: Customer Update
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/rfi:
    get:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: Unique customer identifier generated on customer creation.
        in: path
        name: customerHashId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CustomerRfiDetailsResponse'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Internal Server Error
      tags:
      - Customer Account - Individual
      deprecated: false
      description: This API allows you to fetch details of RFI raised as part of Individual
        customer onboarding.
      operationId: FetchIndividualCustomerRFIDetails
      summary: Fetch Individual Customer RFI Details
      x-info:
        apiType: external
    post:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: Unique customer identifier generated on customer creation.
        in: path
        name: customerHashId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadRfiDetailsResponseDto'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Internal Server Error
      tags:
      - Customer Account - Individual
      deprecated: false
      description: This API allows you to respond to an RFI raised by NIUM compliance
        team. You may use this API to respond to an RFI for data or documents when
        the customer's compliance status is RFI_REQUESTED.
      operationId: RespondtoRFI
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadRfiDocumentRequestDto'
        description: RFI response object
        required: true
      summary: Respond to RFI
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/uploadDocuments:
    post:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: Unique customer identifier generated on customer creation.
        in: path
        name: customerHashId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComplianceDocumentResponseDTO'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Internal Server Error
      tags:
      - Customer Account - Individual
      deprecated: false
      description: This API allows to upload documents necessary for customer onboarding.
        Refer to the RFI details on required documents.
      operationId: UploadDocument
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComplianceDocumentDTO'
        description: Compliance documents
        required: true
      summary: Upload Document
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer-min-data:
    post:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDataExternalResponseDTO'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Internal Server Error
      tags:
      - Customer Account - Individual
      deprecated: false
      description: "This API will create customers using minimal data. The rest of\
        \ the partial data will be pulled via MyInfo, which is locked and cannot be\
        \ edited. Further fields can be updated using the Customer Update API.\n\n\
        \u26A0\uFE0F **WARNING**  \nThis API version is deprecated. Eventually, a\
        \ deprecated API version becomes unsupported.\n\n[Unified Add Customer](https://docs.nium.com/apis/reference/unifiedaddcustomer)\
        \ is the latest version of this API.\n"
      operationId: AddCustomerUsingMyInfoSG
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerDataExternalRequestDTO'
        description: customerDataExternalRequestDTO
        required: true
      summary: Add Customer Using MyInfo [SG]
      x-info:
        apiType: external
  /api/v3/client/{clientHashId}/customer:
    post:
      parameters:
      - description: clientHashId
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddCustomerResponseDTO'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Internal Server Error
      tags:
      - Customer Account - Individual
      deprecated: false
      operationId: AddCustomerUsinge-DocumentVerification
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EVerifyCustomerRegistrationRequestDTO'
        description: requestDTO
        required: true
      summary: Add Customer Using e-Document Verification
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer:
    post:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDetailResponseDTO'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Internal Server Error
      tags:
      - Customer Account - Individual
      deprecated: false
      description: "This API allows you to register a customer with a wallet in NIUM's\
        \ cards platform.\n\n\u26A0\uFE0F **WARNING**  \nThis API version is deprecated.\
        \ Eventually, a deprecated API version becomes unsupported.\n\n[Unified Add\
        \ Customer](https://docs.nium.com/apis/reference/unifiedaddcustomer) is the\
        \ latest version of this API.\n"
      operationId: AddCustomer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerDataRequestDTO'
        description: customerDataRequestDTO
        required: true
      summary: Add Customer
      x-info:
        apiType: external
  /api/v2/client/{clientHashId}/corporate/lookup:
    get:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - allowEmptyValue: false
        description: This field accepts the 2-letter [ISO-2 country code](https://nium-documents.s3-eu-west-1.amazonaws.com/spend-documents/Country+Code.pdf)
          of the corporate customer.
        in: query
        name: countryCode
        required: true
        schema:
          type: string
      - allowEmptyValue: false
        description: This field accepts the search reference id of the corporate customer
          as received in response of public corporate details api.
        in: query
        name: searchReferenceId
        required: false
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCorporateEnrichedDetailResponseDTO'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductApiError'
          description: Internal Server Error
      tags:
      - Customer Account - Corporate
      deprecated: false
      description: "This API allows you to fetch both public and non-public exhaustive\
        \ corporate details using business ID. \n>\u2139\uFE0F INFO \n >Every call\
        \ for this API incurs a fee. Contact your Nium account manager to use it.\
        \ This API only supports the corporate customer onboarding process. Avoid\
        \ unnecessary API calls by using the throttling and debouncing techniques.\
        \ This API should only be called after getting a successful response from\
        \ [Public Corporate Details using Business ID API](/apis/reference/publiccorporatedetailsusingbusinessid)."
      operationId: ExhaustiveCorporateDetailsUsingBusinessID
      summary: Exhaustive Corporate Details using Business ID
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/corporate:
    post:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCorporateCustomerResponseDTO'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductApiError'
          description: Internal Server Error
      tags:
      - Customer Account - Corporate
      deprecated: false
      description: This API allows you to onboard a corporate customer under existing
        client.
      operationId: ProductOnboardCorporateCustomer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OnboardCorporateCustomerRequestDTO'
        description: corporateCustomerRequestsDTO
        required: true
      summary: Onboard Corporate Customer
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/corporate/rfi:
    get:
      parameters:
      - allowEmptyValue: false
        description: This field contains unique case ID generated and returned in
          Onboard API response.
        in: query
        name: caseId
        required: false
        schema:
          type: string
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - allowEmptyValue: false
        description: This field contains unique client ID generated and returned in
          Onboard API response.
        in: query
        name: clientId
        required: false
        schema:
          type: string
      - allowEmptyValue: false
        description: This field contains the customerHashId, For example, 909ffc5f-c8ab-4df0-bcb2-111fcdd6f735.
        in: query
        name: customerHashId
        required: false
        schema:
          type: string
      - allowEmptyValue: false
        description: This field contains the region code for which onboarding has
          been triggered, For example, AU, EU, UK, SG.
        in: query
        name: region
        required: false
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductComplianceRFITemplateMetadataResponseDTO'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductApiError'
          description: Internal Server Error
      tags:
      - Customer Account - Corporate
      deprecated: false
      description: This API allows you to fetch details of RFI raised as part of corporate
        customer onboarding.
      operationId: FetchCorporateCustomerRFIDetails
      summary: Fetch Corporate Customer RFI Details
      x-info:
        apiType: external
    post:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespondRfiResponseDTO'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductApiError'
          description: Internal Server Error
      tags:
      - Customer Account - Corporate
      deprecated: false
      description: This API allows you to respond to an RFI raised for a corporate
        customer. You may use this API to respond to an RFI for data or documents
        when the corporate customer's compliance status is RFI_REQUESTED.
      operationId: RespondtoRFIforCorporateCustomer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RespondRfiRequestDTO'
        description: respondRfiRequestDTO
        required: true
      summary: Respond to RFI for Corporate Customer
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/corporate/documents:
    post:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: Unique customer identifier generated on customer creation.
        in: path
        name: customerHashId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CorporateComplianceDocumentResponseDTO'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Internal Server Error
      tags:
      - Customer Account - Corporate
      deprecated: false
      description: This API allows you to upload document for corporate customers.
      operationId: UploadDocumentforCorporateCustomer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CorporateComplianceDocumentRequestDTO'
        description: corporateComplianceDocumentRequestDTO
        required: true
      summary: Upload Document for Corporate Customer
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/regenerateKYCURL:
    post:
      tags:
      - Customer Account - Corporate
      summary: Regenerate KYC URL
      description: This api will be used to regenerate kyc url
      operationId: regenerateKYCURL
      parameters:
      - name: clientHashId
        in: path
        description: The unique client hash id of customer
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: The unique customer hash id of customer
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          description: Url regenerate Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegenerateUrlResponse'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                oneOf:
                - $ref: '#/components/schemas/ApplicationCommonResponse'
                - $ref: '#/components/schemas/CommonResponse'
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CommonResponse'
      x-info:
        apiType: external
  /api/v2/client/{clientHashId}/onboarding/constants:
    get:
      parameters:
      - allowEmptyValue: false
        description: This field is used to select one of the category used during
          corporate customer onboarding. The API response will return list of allowed
          values for the selected category.
        in: query
        name: category
        required: true
        schema:
          enum:
          - annualTurnover
          - businessType
          - countryName
          - countryOfOperation
          - documentType
          - intendedUseOfAccount
          - industrySector
          - listedExchange
          - position
          - regulatedTrustType
          - restrictedCountries
          - state
          - streetType
          - totalEmployees
          - unregulatedTrustType
          - rfiTemplates
          - estimatedMonthlyFunding
          - occupation
          - monthlyTransactionVolume
          - averageTransactionValue
          - monthlyTransactions
          - trustBeneficiaryClass
          - capitalContribution
          - votingRights
          - city
          - legislationType
          type: string
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - allowEmptyValue: false
        description: The response will be filtered based on the value selected in
          this field for regulatory region of the customer.
        in: query
        name: region
        required: true
        schema:
          enum:
          - AU
          - EU
          - SG
          - HK
          - UK
          - US
          - CA
          type: string
      - allowEmptyValue: false
        description: Type of Customer being onboarded.
        in: query
        name: type
        required: true
        schema:
          enum:
          - INDIVIDUAL
          - CORPORATE
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddCategoryResponseDTO'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductApiError'
          description: Internal Server Error
      tags:
      - Customer Account - Corporate
      deprecated: false
      operationId: fetchCorporateConstantsUsingGET
      summary: Fetch corporate constants
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/corporate:
    post:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: Unique customer identifier generated on customer creation.
        in: path
        name: customerHashId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateCorporateKybResponseDTO'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductApiError'
          description: Internal Server Error
      tags:
      - Customer Account - Corporate
      deprecated: false
      operationId: updateCorporateCustomerUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCorporateCustomerRequestDTO'
        description: updateCorporateCustomerRequestsDTO
        required: true
      summary: Update Corporate Customer
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/corporate/lookup:
    get:
      parameters:
      - allowEmptyValue: false
        description: This field contains the business registration number of the entity.
        in: query
        name: businessRegistrationNumber
        required: true
        schema:
          type: string
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - allowEmptyValue: false
        description: This field contains the 2-letter [ISO-2 country code](/docs/currency-and-country-codes).
        in: query
        name: countryCode
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CorporateDetailResponseDTO'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductApiError'
          description: Internal Server Error
      tags:
      - Customer Account - Corporate
      deprecated: false
      description: This API will help you to fetch the publicly available corporate
        details using business Id.
      operationId: PublicCorporateDetailsUsingBusinessID
      summary: Public Corporate Details using Business ID
      x-info:
        apiType: external
  /api/v3/client/{clientHashId}/customers:
    get:
      parameters:
      - description: This field accepts the business registration number of corporate
          customer.
        in: query
        name: businessRegistrationNumber
        required: false
        schema:
          type: string
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: This field accepts the type of customer.
        in: query
        name: customerType
        required: false
        schema:
          enum:
          - INDIVIDUAL
          - CORPORATE
          type: string
      - description: This field accepts the email ID of the customer.
        in: query
        name: email
        required: false
        schema:
          type: string
      - description: This field accepts the mobile number of a customer without the
          country code.
        in: query
        name: mobile
        required: false
        schema:
          type: string
      - description: This field accepts the order which can be ASC or DESC.
        in: query
        name: order
        required: false
        schema:
          enum:
          - ASC
          - DESC
          type: string
      - description: "This field accepts the page number to be returned. The acceptable\
          \ values are 0-N. \nThis field works with size field such that total number\
          \ of records/size of each page = number of pages(N). \nThis field can then\
          \ give a particular page."
        in: query
        name: page
        required: false
        schema:
          type: string
      - description: This field contains the unique parent customer identifier generated
          at the time of customer creation.
        example: 190dddbe-fdbc-48fe-a7c2-d55266e9acf5
        in: query
        name: parentCustomerHashId
        required: false
        schema:
          type: string
      - description: This field accepts the number of elements per page.
        in: query
        name: size
        required: false
        schema:
          type: string
      - description: This parameter can filter the customers, based on the exact value
          of tagKey defined against customers. This can be used as an independent
          search parameter.
        in: query
        name: tagKey
        required: false
        schema:
          type: string
      - description: This parameter can filter the customers, based on the approximating
          value of tagValue(that may be mapped for a tagKey defined against customers).
          This can be used as an independent search parameter.
        in: query
        name: tagValue
        required: false
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponseDTO_CustomerDetailsResponseV2DTO_'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Internal Server Error
      tags:
      - Customer Management
      deprecated: false
      operationId: CustomerListV3
      summary: Customer List V3
      x-info:
        apiType: external
  /api/v2/client/{clientHashId}/customer/{customerHashId}:
    get:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: Unique customer identifier generated on customer creation.
        in: path
        name: customerHashId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDetailsResponseV2DTO'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Internal Server Error
      tags:
      - Customer Management
      deprecated: false
      description: This API allows you to fetch details for a specific customer.
      operationId: CustomerDetailsV2
      summary: Customer Details V2
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/block:
    put:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: Unique customer identifier generated on customer creation.
        in: path
        name: customerHashId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Internal Server Error
      tags:
      - Customer Management
      deprecated: false
      description: This API allows you to permanently block or temporarily block/unblock
        a customer.
      operationId: BlockUnblockCustomer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockCustomerRequestDTO'
        description: blockCustomerRequestDTO
        required: true
      summary: Block/Unblock Customer
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/accounts/statement:
    get:
      tags:
      - Customer Management
      summary: Account Statement
      description: This API allows you to download an account statement.
      operationId: AccountStatement
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: startDate
        in: query
        description: From date for fetching the transaction details. The format for
          startDate is YYYY-MM-DD.
        required: true
        schema:
          type: string
      - name: endDate
        in: query
        description: End date for fetching the transaction details. The format for
          endDate is YYYY-MM-DD.
        required: true
        schema:
          type: string
      - name: fileType
        in: query
        description: This field accepts the file type of the account statement to
          be generated.
        required: false
        schema:
          type: string
          default: pdf
      - name: currencies
        in: query
        description: This field accepts the list of currencies in 3-letter [ISO-4217
          transaction currency code](https://docs.nium.com/apis/docs/currency-and-country-codes)
          for which the account statement to be generated. If no currencies are being
          sent in query param then statement will be generated for all the currencies
          enabled to the customer.
        required: false
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          description: OK
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/tags:
    post:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: Unique customer identifier generated during customer creation.
        in: path
        name: customerHashId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerClientTagsResponseDTO'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Internal Server Error
      tags:
      - Customer Management
      deprecated: false
      description: This API allows you to add, update, and delete customer tags.
      operationId: ManageCustomerTags
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerClientTagsRequestDTO'
        description: tags
        required: true
      summary: Manage Customer Tags
      x-info:
        apiType: external
  /api/v2/client/{clientHashId}/customers:
    get:
      parameters:
      - description: This field accepts the business registration number of corporate
          customer.
        in: query
        name: businessRegistrationNumber
        required: false
        schema:
          type: string
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: This field accepts the email ID of the customer.
        in: query
        name: email
        required: false
        schema:
          type: string
      - description: This field accepts the mobile number of a customer without the
          country code.
        in: query
        name: mobile
        required: false
        schema:
          type: string
      - description: This field accepts the order which can be ASC or DESC.
        in: query
        name: order
        required: false
        schema:
          enum:
          - ASC
          - DESC
          type: string
      - description: "This field accepts the page number to be returned. The acceptable\
          \ values are 0-N. \nThis field works with size field such that total number\
          \ of records/size of each page = number of pages(N). \nThis field can then\
          \ give a particular page."
        in: query
        name: page
        required: false
        schema:
          type: string
      - description: This field accepts the number of elements per page.
        in: query
        name: size
        required: false
        schema:
          type: string
      - description: This parameter can filter the customers, based on the exact value
          of tagKey defined against customers. This can be used as an independent
          search parameter.
        in: query
        name: tagKey
        required: false
        schema:
          type: string
      - description: This parameter can filter the customers, based on the approximating
          value of tagValue(that may be mapped for a tagKey defined against customers).
          This can be used as an independent search parameter.
        in: query
        name: tagValue
        required: false
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCustomerDetailsResponseV2DTO'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Internal Server Error
      tags:
      - Customer Management
      deprecated: false
      operationId: CustomerListV2
      summary: Customer List V2
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customers:
    get:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: This field accepts the email ID of the customer.
        in: query
        name: email
        required: false
        schema:
          type: string
      - description: This field accepts the mobile number of a customer--digits only--without
          the country code.
        in: query
        name: mobile
        required: false
        schema:
          maxLength: 20
          minLength: 1
          type: string
      - description: This field accepts the order which can be ASC or DESC.
        in: query
        name: order
        required: false
        schema:
          enum:
          - ASC
          - DESC
          type: string
      - description: "This field accepts the page number to be returned. The acceptable\
          \ values are 0-N. \nThis field works with size field such that total number\
          \ of records/size of each page = number of pages(N). \nThis field can then\
          \ give a particular page."
        in: query
        name: page
        required: false
        schema:
          type: string
      - description: This field accepts the number of elements per page.
        in: query
        name: size
        required: false
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CustomerCustomerDetailResponse'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Internal Server Error
      tags:
      - Customer Management
      deprecated: false
      description: "This API allows you to fetch the customers for the client. It\
        \ also supports query parameter-based filtering to fetch details of a customer\
        \ using email or mobile.\n\n\u26A0\uFE0F **WARNING**  \nTo access updated\
        \ functionality and features, we recommend using the latest version of this\
        \ API: [Customer List V2](https://docs.nium.com/apis/reference/customerlistv2).\
        \ This API version was deprecated in December 2023.\n"
      operationId: CustomerList
      summary: Customer List
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}:
    get:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: Unique customer identifier generated on customer creation.
        in: path
        name: customerHashId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerCustomerDetailResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Internal Server Error
      tags:
      - Customer Management
      deprecated: false
      description: "This API allows you to fetch details for a specific customer.\n\
        \n\u26A0\uFE0F **WARNING**  \nTo access updated functionality and features,\
        \ we recommend using the latest version of this API: [Customer Details V2](https://docs.nium.com/apis/reference/customerdetailsv2).\
        \ In December 2023, this API version will be deprecated and become unsupported.\n"
      operationId: CustomerDetails
      summary: Customer Details
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/statement:
    get:
      tags:
      - Customer Management
      summary: Account Statement for the Specified Wallet
      description: This API allows you to download an account statement.
      operationId: WalletStatement
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: Unique wallet identifier generated on wallet creation.
        required: true
        schema:
          type: string
      - name: startDate
        in: query
        description: From date for fetching the transaction details. The format for
          startDate is YYYY-MM-DD.
        required: true
        schema:
          type: string
      - name: endDate
        in: query
        description: End date for fetching the transaction details. The format for
          endDate is YYYY-MM-DD.
        required: true
        schema:
          type: string
      - name: fileType
        in: query
        description: This field accepts the file type of the account statement to
          be generated. Accepted values are pdf or CSV. If there is no value passed,
          then pdf is taken as the default value.
        required: false
        schema:
          type: string
          default: pdf
      - name: currencies
        in: query
        description: This field accepts the list of currencies in 3-letter [ISO-4217
          transaction currency code](https://docs.nium.com/apis/docs/currency-and-country-codes)
          for which the account statement to be generated. If no currencies are being
          sent in query param then statement will be generated for all the currencies
          enabled to the customer.
        required: false
        schema:
          type: string
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          description: OK
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/termsAndConditions:
    post:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: Unique customer identifier generated on customer creation.
        in: path
        name: customerHashId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TermsAndConditionsAcceptResponseDTO'
          description: OK
        '400':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: BadRequest
        '401':
          content:
            '*/*':
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            '*/*':
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Not Found
        '500':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Internal Server Error
      security:
      - basicAuth: []
      tags:
      - Customer Terms and Conditions
      deprecated: false
      description: This API updates the Terms and Conditions acceptance status for
        a customer
      operationId: AcceptTermsandConditions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TermsAndConditionsRequestDTO'
        description: termsAndConditionsRequestDTO
        required: true
      summary: Accept Terms and Conditions
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/termsAndConditions:
    get:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TermsAndConditionsResponseDTO'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Internal Server Error
      security:
      - basicAuth: []
      tags:
      - Customer Terms and Conditions
      deprecated: false
      description: This API allows you to fetch the mandatory Terms and Conditions
        for individual customer onboarding. Refer to the [T&C flow chart](/apis/docs/customer-life-cycle#terms-and-conditions)
        for more details.
      operationId: TermsandConditions
      summary: Terms and Conditions
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/consent/account:
    get:
      tags:
      - Open Banking (Onboarding)
      summary: Account Details By Customer Consent ID.
      description: This API allows Client to get the account details using the customer's
        consent Id for open banking, as part of the AIS flow.
      operationId: AccountDetailsByCustomerConsentID
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: Unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - name: accountConsentId
        in: query
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentDetailsResponse'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/consent/payment:
    get:
      tags:
      - Open Banking (Onboarding)
      summary: Payment Details by System Reference Number
      description: This API allows Client to fetch payment details using system reference
        number of the transaction, as part of the Open Banking PIS flow and based
        on customer's consent.
      operationId: PaymentDetailsbySystemReferenceNumber
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: Unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - name: systemReferenceNumber
        in: query
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenBankingPaymentResponseDTO'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/bankAccounts:
    get:
      tags:
      - Accounts
      summary: Fetch linked bank accounts
      description: This paginated API is used to fetch linked bank accounts.
      operationId: fetchLinkedBankAccounts
      parameters:
      - name: clientHashId
        in: path
        description: Unique identifier of the client.
        required: true
        schema:
          type: string
          format: UUID
      - name: customerHashId
        in: path
        description: Unique identifier of the customer.
        required: true
        schema:
          type: string
          format: UUID
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      - name: startingAfter
        in: query
        description: Used to return the `limit` number of records after (including)
          the given starting position.
        schema:
          type: string
      - name: endingBefore
        in: query
        description: Used to return the `limit` number of records up to (excluding)
          the given ending position. Effectively returns the previous page for a given
          cursor.
        schema:
          type: string
      - name: limit
        in: query
        description: The number of items to be returned on each page.
        required: false
        style: form
        explode: true
        schema:
          maximum: 50
          minimum: 1
          type: integer
          default: 10
      - name: tagKey
        in: query
        description: The tag key used to filter the results.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: tagValue
        in: query
        description: The tag value used to filter the results.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: accountNumber
        in: query
        description: The account number used to filter the results.
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/AccountNumber'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBankAccountResponse'
              example:
                bankAccounts:
                - bankAccountId: 7e894dad-edff-438d-8cc2-f198007fe957
                  accountNumber: 1234512345
                  routingCodes:
                  - type: ach_code
                    value: 111222333
                  country: US
                  currency: USD
                  verification: completed
                  authentication: completed
                  authenticationType: microdeposit_otp
                  isCustomerAccount: true
                  tags:
                    key1: value1
                    key2: value2
                  createdAt: '2024-02-15T23:40:30.543Z'
                  updatedAt: '2024-02-16T23:40:30.543Z'
                - bankAccountId: 6374edaa-4198-43ce-9597-7da1751ee0ec
                  accountNumber: 123456789
                  routingCodes:
                  - type: ach_code
                    value: 987654321
                  country: US
                  currency: USD
                  verification: completed
                  authentication: completed
                  authenticationType: microdeposit_amounts
                  isCustomerAccount: true
                  tags:
                    key1: value1
                    key2: value2
                  createdAt: '2024-02-15T23:40:30.543Z'
                  updatedAt: '2024-02-16T23:40:30.543Z'
                pagination:
                  totalRecords: 2
                  totalPages: 1
                  currentCursor: 7e894dad-edff-438d-8cc2-f198007fe957
                  nextCursor: null
        '400':
          description: Error response when the request is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchLinkedBankAccountsErrorResponse'
        '401':
          description: Error response when the request is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/externalAccountServiceStandard401Error'
        '403':
          description: Error response when the requested resource is forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/externalAccountServiceStandard403Error'
        '500':
          description: Error response when an internal error occurs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/externalAccountServiceStandard500Error'
      deprecated: false
      x-info:
        apiType: external
    post:
      tags:
      - Accounts
      summary: Create a linked bank account
      description: This API creates a linked bank account.
      operationId: linkBankAccount
      parameters:
      - name: clientHashId
        in: path
        description: Unique identifier of the client.
        required: true
        schema:
          type: string
          format: UUID
      - name: customerHashId
        in: path
        description: Unique identifier of the customer.
        required: true
        schema:
          type: string
          format: UUID
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      requestBody:
        description: Bank account link request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BankAccountLinkRequest'
            examples:
              Customer_Account_With_Authentication:
                summary: Link customer's bank account
                value:
                  country: US
                  currency: USD
                  accountNumber: 123456789
                  routingCodes:
                  - type: ach_code
                    value: 987654321
                  authenticationType: microdeposit_amounts
                  isCustomerAccount: true
                  tags:
                    key1: value1
                    key2: value2
        required: true
      responses:
        '200':
          description: Bank account linked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccountResponse'
              examples:
                Customer_Account_With_Authentication:
                  summary: Link customer's bank account
                  value:
                    bankAccountId: 6374edaa-4198-43ce-9597-7da1751ee0ec
                    accountNumber: 123456789
                    routingCodes:
                    - type: ach_code
                      value: 987654321
                    country: US
                    currency: USD
                    verification: in_progress
                    authentication: in_progress
                    authenticationType: microdeposit_amounts
                    isCustomerAccount: true
                    tags:
                      key1: value1
                      key2: value2
                    createdAt: '2024-02-15T23:40:30.543Z'
                    updatedAt: '2024-02-15T23:40:30.543Z'
        '400':
          description: Error response when the request is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkBankAccountErrorResponse'
        '401':
          description: Error response when the request is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/externalAccountServiceStandard401Error'
        '403':
          description: Error response when the requested resource is forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/externalAccountServiceStandard403Error'
        '500':
          description: Error response when an internal error occurs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/externalAccountServiceStandard500Error'
      deprecated: false
      x-info:
        apiType: external
      x-codegen-request-body-name: BankAccountLinkRequest
  /api/v1/client/{clientHashId}/customer/{customerHashId}/bankAccounts/{bankAccountId}/confirm:
    post:
      tags:
      - Accounts
      summary: Confirm linked bank account authentication
      description: This API is used to confirm authentication of a linked bank account.
      operationId: confirmLinkedBankAccount
      parameters:
      - name: clientHashId
        in: path
        description: Unique identifier of the client.
        required: true
        schema:
          type: string
          format: UUID
      - name: customerHashId
        in: path
        description: Unique identifier of the customer.
        required: true
        schema:
          type: string
          format: UUID
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      - name: bankAccountId
        in: path
        description: Unique identifier of the linked bank account.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/BankAccountId'
      requestBody:
        description: Bank account confirmation request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BankAccountConfirmationRequest'
            examples:
              With_Microdeposit_Amounts:
                summary: Microdeposit amounts verification
                value:
                  amounts:
                  - 0.15
                  - 0.53
              With_Microdeposit_Otp:
                summary: Microdeposit OTP verification
                value:
                  otp: abc
        required: true
      responses:
        '200':
          description: Bank account authentication confirmed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccountResponse'
              examples:
                With_Microdeposit_Amounts:
                  summary: Microdeposit amounts verification
                  value:
                    bankAccountId: 6374edaa-4198-43ce-9597-7da1751ee0ec
                    accountNumber: 123456789
                    routingCodes:
                    - type: ach_code
                      value: 987654321
                    country: US
                    currency: USD
                    verification: completed
                    authentication: completed
                    authenticationType: microdeposit_amounts
                    isCustomerAccount: true
                    tags:
                      key1: value1
                      key2: value2
                    createdAt: '2024-02-15T23:40:30.543Z'
                    updatedAt: '2024-02-16T23:40:30.543Z'
                With_Microdeposit_Otp:
                  summary: Microdeposit OTP verification
                  value:
                    bankAccountId: 7e894dad-edff-438d-8cc2-f198007fe957
                    accountNumber: 1234512345
                    routingCodes:
                    - type: ach_code
                      value: 111222333
                    country: US
                    currency: USD
                    verification: completed
                    authentication: completed
                    authenticationType: microdeposit_otp
                    isCustomerAccount: true
                    tags:
                      key1: value1
                      key2: value2
                    createdAt: '2024-02-15T23:40:30.543Z'
                    updatedAt: '2024-02-16T23:40:30.543Z'
        '400':
          description: Error response when the request is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfirmBankAccountErrorResponse'
        '401':
          description: Error response when the request is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/externalAccountServiceStandard401Error'
        '403':
          description: Error response when the requested resource is forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/externalAccountServiceStandard403Error'
        '404':
          description: Error response when the requested resource is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/externalAccountServiceStandard404Error'
        '500':
          description: Error response when an internal error occurs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/externalAccountServiceStandard500Error'
      deprecated: false
      x-info:
        apiType: external
      x-codegen-request-body-name: BankAccountConfirmationRequest
  /api/v1/client/{clientHashId}/customer/{customerHashId}/bankAccounts/{bankAccountId}:
    get:
      tags:
      - Accounts
      summary: Fetch linked bank account
      description: This API is used to fetch a linked bank account.
      operationId: fetchLinkedBankAccount
      parameters:
      - name: clientHashId
        in: path
        description: Unique identifier of the client.
        required: true
        schema:
          type: string
          format: UUID
      - name: customerHashId
        in: path
        description: Unique identifier of the customer.
        required: true
        schema:
          type: string
          format: UUID
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      - name: bankAccountId
        in: path
        description: Unique identifier of the linked bank account.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/BankAccountId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccountResponse'
              examples:
                Customer_Account_Authenticated:
                  summary: Customer account authenticated
                  value:
                    bankAccountId: 6374edaa-4198-43ce-9597-7da1751ee0ec
                    accountNumber: 123456789
                    routingCodes:
                    - type: ach_code
                      value: 987654321
                    country: US
                    currency: USD
                    verification: completed
                    authentication: completed
                    authenticationType: microdeposit_amounts
                    isCustomerAccount: true
                    tags:
                      key1: value1
                      key2: value2
                    createdAt: '2024-02-15T23:40:30.543Z'
                    updatedAt: '2024-02-15T23:40:30.543Z'
        '401':
          description: Error response when the request is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/externalAccountServiceStandard401Error'
        '403':
          description: Error response when the requested resource is forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/externalAccountServiceStandard403Error'
        '404':
          description: Error response when the requested resource is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/externalAccountServiceStandard404Error'
        '500':
          description: Error response when an internal error occurs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/externalAccountServiceStandard500Error'
      deprecated: false
      x-info:
        apiType: external
    put:
      tags:
      - Accounts
      summary: Update linked bank account
      description: This API is used to update a linked bank account.
      operationId: updateLinkedBankAccount
      parameters:
      - name: clientHashId
        in: path
        description: Unique identifier of the client.
        required: true
        schema:
          type: string
          format: UUID
      - name: customerHashId
        in: path
        description: Unique identifier of the customer.
        required: true
        schema:
          type: string
          format: UUID
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      - name: bankAccountId
        in: path
        description: Unique identifier of the linked bank account.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/BankAccountId'
      requestBody:
        description: Bank account update request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BankAccountUpdateRequest'
            examples:
              Update_Tags:
                summary: Update account tags
                value:
                  tags:
                    key2: newValue2
                    newKey: newValue
        required: true
      responses:
        '200':
          description: Bank account updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccountResponse'
              examples:
                Update_Tags:
                  summary: Update account tags
                  value:
                    bankAccountId: 6374edaa-4198-43ce-9597-7da1751ee0ec
                    accountNumber: 123456789
                    routingCodes:
                    - type: ach_code
                      value: 987654321
                    country: US
                    currency: USD
                    verification: completed
                    authentication: completed
                    authenticationType: microdeposit_amounts
                    isCustomerAccount: true
                    tags:
                      key2: newValue2
                      newKey: newValue
                    createdAt: '2024-02-15T23:40:30.543Z'
                    updatedAt: '2024-02-16T23:40:30.543Z'
        '400':
          description: Error response when the request is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateBankAccountErrorResponse'
        '401':
          description: Error response when the request is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/externalAccountServiceStandard401Error'
        '403':
          description: Error response when the requested resource is forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/externalAccountServiceStandard403Error'
        '404':
          description: Error response when the requested resource is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/externalAccountServiceStandard404Error'
        '500':
          description: Error response when an internal error occurs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/externalAccountServiceStandard500Error'
      deprecated: false
      x-info:
        apiType: external
      x-codegen-request-body-name: BankAccountUpdateRequest
    delete:
      tags:
      - Accounts
      summary: Delete linked bank account
      description: This API is used to delete a linked bank account.
      operationId: unlinkBankAccount
      parameters:
      - name: clientHashId
        in: path
        description: Unique identifier of the client.
        required: true
        schema:
          type: string
          format: UUID
      - name: customerHashId
        in: path
        description: Unique identifier of the customer.
        required: true
        schema:
          type: string
          format: UUID
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      - name: bankAccountId
        in: path
        description: Unique identifier of the linked bank account.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/BankAccountId'
      responses:
        '200':
          description: Bank account unlinked
        '401':
          description: Error response when the request is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/externalAccountServiceStandard401Error'
        '403':
          description: Error response when the requested resource is forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/externalAccountServiceStandard403Error'
        '404':
          description: Error response when the requested resource is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/externalAccountServiceStandard404Error'
        '500':
          description: Error response when an internal error occurs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/externalAccountServiceStandard500Error'
      deprecated: false
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/applications:
    post:
      tags:
      - Onboarding Forms - Corporate
      summary: Create Application for Onboarding Form
      description: This API will create the application resource and generate link
        for the customer to the access onboarding form
      operationId: onboardingFormLink
      parameters:
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake
        required: true
        schema:
          type: string
        example: 82546347-347d-4606-967c-b92e1ffdf5a5
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateLinkRequest'
            example:
              region: SG
              corporate:
                businessName: Nium India
                businessRegistrationNumber: '123456789'
                applicantEmail: applicant@abc.com
                registeredCountry: SG
              applicationType: corporate
        required: true
      responses:
        '200':
          description: Successfully retrieved link
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateLinkResponse'
              example:
                applicationId: APP1713860447006QUG
                url: http://nium.com/onboard/corporate/APP1713860447006QUG?linkId=7653cf6e-957a-4491-b41b-c44f7e96f414
                expiry: '1713359070614'
        '400':
          description: 'The detailed error code associated with HTTP status 400.*
            `invalid_request`: Input fields contain invalid data * `invalid_client_hash_id`:
            Provided client hash id is invalid or doesn''t exist * `customer_already_exist`:
            Customer already onboarded with the given businessName and businessRegistrationNumber
            * `application_already_exists`: Application already exists with the given
            businessName and businessRegistrationNumber'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/onboarding-form-serviceApiErrorResponse'
              example:
              - code: invalid_request
                description: businessName is mandatory
              - code: invalid_client_hash_id
                description: Invalid clientHashId
              - code: customer_already_exist
                description: customer already exists with the businessName Nium
              - code: application_already_exists
                description: application already exists with the businessName Nium
                  and businessRegistrationNumber 1234
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/onboarding-form-serviceApiErrorResponse'
        '403':
          description: Forbidden access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/onboarding-form-serviceApiErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/onboarding-form-serviceApiErrorResponse'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/applications/{applicationId}/regenerateURL:
    get:
      tags:
      - Onboarding Forms - Corporate
      summary: Regenerate Onboarding Form URL
      description: This API will generate a link for the customer to the onboarding
        form if the previous link expires.
      operationId: regenerateURL
      parameters:
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      - name: applicationId
        in: path
        description: Application Id returned in response while creating application
          resource.
        required: true
        schema:
          type: string
        example: APP1709284786391276
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake
        required: true
        schema:
          type: string
        example: 82546347-347d-4606-967c-b92e1ffdf5a5
      responses:
        '200':
          description: Successful regeneration of url
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateLinkResponse'
              example:
                applicationId: APP1713860447006QUG
                url: http://nium.com/onboard/corporate/APP1713860447006QUG?linkId=7653cf6e-957a-4491-b41b-c44f7e96f414
                expiry: '1713359070614'
        '400':
          description: 'The detailed error code associated with HTTP status 400.                  *
            `invalid_client_hash_id`: Provided client hash id is invalid or doesn''t
            exist                  * `invalid_application_id`: Provided application
            id is invalid or doesn''t exist'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/onboarding-form-serviceApiErrorResponse'
              example:
              - code: invalid_client_hash_id
                description: Invalid clientHashId
              - code: invalid_application_id
                description: Application Id not found
        '401':
          description: Bad request, invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard401Error'
        '403':
          description: Forbidden access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/onboarding-form-serviceApiErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/onboarding-form-serviceStandard404Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500Error'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/application/{applicationId}:
    get:
      tags:
      - Onboarding Forms - Corporate
      summary: Get Application Details
      description: This API will get the details of a given application onboarded
        via onboarding form
      operationId: getApplicationDetails
      parameters:
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      - name: applicationId
        in: path
        description: Application Id generated for the customer
        required: true
        schema:
          type: string
        example: APP1709284786391276
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake
        required: true
        schema:
          type: string
        example: 82546347-347d-4606-967c-b92e1ffdf5a5
      responses:
        '200':
          description: Application Progress fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnboardingApplicationProgressResponse'
              example:
                applicationStatus: initiated
                completedSections:
                - business
                - applicant
                - stakeholder
                - additionalDetails
                submissionErrors:
                - code: invalid_request
                  description: Invalid Country
                - code: invalid_request
                  description: customer is already available with businessName 234
                customerHashId: 733b974b-f9c4-4be8-8c01-b31b2a396da0
                walletId: afdfd43f-78bd-4051-b1ed-0b2728cbf626
        '400':
          description: 'The detailed error code associated with HTTP status 400.                  *
            `invalid_client_hash_id`: Provided client hash id is invalid or doesn''t
            exist                  * `invalid_application_id`: Provided application
            id is invalid or doesn''t exist'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/onboarding-form-serviceApiErrorResponse'
              example:
              - code: invalid_client_hash_id
                description: Invalid clientHashId
              - code: invalid_application_id
                description: Application Id not found
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/onboarding-form-serviceApiErrorResponse'
        '403':
          description: Forbidden access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/onboarding-form-serviceApiErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/onboarding-form-serviceStandard404Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500Error'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}:
    get:
      tags:
      - Customer Wallet Balance
      summary: Wallet Balance
      description: This API allows you to fetch balance for a specific wallet.
      operationId: WalletBalance
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          maxLength: 36
          minLength: 36
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          maxLength: 36
          minLength: 36
          type: string
      - name: walletHashId
        in: path
        description: Unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          maxLength: 36
          minLength: 36
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WalletBalanceResponseDTO'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
      x-info:
        apiType: external
    put:
      tags:
      - Customer Wallet Balance
      summary: Update Wallet
      description: This API allows you to update a specific wallet.
      operationId: UpdateWallet
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          maxLength: 36
          minLength: 36
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          maxLength: 36
          minLength: 36
          type: string
      - name: walletHashId
        in: path
        description: Unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          maxLength: 36
          minLength: 36
          type: string
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWalletRequestDTO'
        required: true
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletResponseDTO2'
              example:
                walletHashId: c99f0e64-6cb9-456d-88e0-b22004c33411
                currencies:
                - balance: 10
                  code: SGD
                  default: true
                - balance: 100
                  code: USD
                  default: false
                intendedUseOfAccount: payroll
                tags:
                  department: sales
                status: Active
                createdAt: 2024-01-14T08:06:49+0000
                updatedAt: 2024-01-18T08:06:49+0000
                name: Regional balance
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletStandard404Error'
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500Error'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet:
    get:
      tags:
      - Customer Wallet Balance
      summary: Fetch Wallet
      operationId: GetWallet
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletsSearchDTO
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/WalletsSearchDTO'
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletResponseDTO2'
              example:
              - walletHashId: c99f0e64-6cb9-456d-88e0-b22004c33411
                currencies:
                - balance: 10
                  code: SGD
                  default: true
                - balance: 100
                  code: USD
                  default: false
                intendedUseOfAccount: payroll
                tags:
                  department: sales
                status: Active
                createdAt: 2024-01-14T08:06:49+0000
                updatedAt: 2024-01-18T08:06:49+0000
                name: Regional balance
              - walletHashId: 986652ed-c080-4752-9432-f6c8699cba51
                currencies:
                - balance: 10
                  code: SGD
                  default: true
                - balance: 100
                  code: USD
                  default: false
                intendedUseOfAccount: payroll
                tags:
                  department: purchase
                status: Active
                createdAt: 2024-01-31T07:15:30+0000
                updatedAt: 2024-01-31T07:15:30+0000
                name: Global balance
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletStandard404Error'
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500Error'
      x-info:
        apiType: external
    post:
      tags:
      - Customer Wallet Balance
      summary: Add Wallet
      description: This API allows you to add a wallet for a customer.
      operationId: AddWallet
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          maxLength: 36
          minLength: 36
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          maxLength: 36
          minLength: 36
          type: string
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddWalletRequestDTO'
        required: true
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletResponseDTO2'
              example:
                walletHashId: c99f0e64-6cb9-456d-88e0-b22004c33411
                currencies:
                - balance: 10
                  code: SGD
                  default: true
                - balance: 100
                  code: USD
                  default: false
                intendedUseOfAccount: payroll
                tags:
                  department: sales
                status: Active
                createdAt: 2024-01-14T08:06:49+0000
                updatedAt: 2024-01-18T08:06:49+0000
                name: Regional balance
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletStandard404Error'
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500Error'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/transfers:
    post:
      tags:
      - Wallet to Wallet Transfers
      summary: Wallet to Wallet Transfer
      description: This API enables you to transfer money from one wallet to another
        wallet for customers belonging to different clients.
      operationId: WalletTransfer
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: Unique source wallet identifier generated simultaneously with
          customer creation.
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FundTransferRequestDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FundTransferResponse'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/p2pTransfer:
    post:
      tags:
      - Wallet to Wallet Transfers
      summary: P2P Transfer
      description: This API enables you to transfer money from one wallet to another
        within the same client family. This API version has been deprecated. Eventually,
        deprecated API versions become unsupported. As an alternative, use the [Wallet
        To Wallet Transfer request.](https://docs.nium.com/apis/reference/wallettransfer)
      operationId: p2pTransfer
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before the API
          handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: Unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/P2PTransferDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P2PTransferResponse'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/transactions:
    get:
      tags:
      - Customer Wallet Transactions
      summary: Transactions
      description: Use this endpoint to fetch transaction details for a customer.
      operationId: Transactions
      parameters:
      - name: clientHashId
        in: path
        description: Filter transactions based on the client's unique `clientHashId`
          that was used in the transaction.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: Filter transactions based on the customer's unique `customerHashId`
          that was used in the transaction.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: Filter transactions based on the unique wallet identifier generated
          during customer creation.
        required: true
        schema:
          type: string
      - name: startDate
        in: query
        description: The beginning date to start fetching transaction details. The
          format for `startDate` is YYYY-MM-DD.
        required: false
        schema:
          type: string
          description: From date for fetching the transaction details. The format
            for startDate is YYYY-MM-DD.
      - name: endDate
        in: query
        description: End date for fetching the transaction details. The format for
          endDate is YYYY-MM-DD.
        required: false
        schema:
          type: string
          description: End date for fetching the transaction details. The format for
            endDate is YYYY-MM-DD.
      - name: page
        in: query
        description: >-
          In some cases, the response can return multiple pages of data. Use this
          parameter to page through the returned results.

          The default page is 0.
        required: false
        schema:
          type: string
          description: This API may have lot of data in response and supports pagination.
            Entire response data is divided into pages with size as the upper limit
            on the number of data. Integer values from 0 onwards are acceptable.\nDefault
            page is 0.
          example: 0
      - name: size
        in: query
        description: Define how many elements get returned per response page. Accepted
          values can be 1-20.
        required: false
        schema:
          type: string
          description: This will decide the number of elements per page. Typical values
            can be 1-20.
          example: 20
      - name: order
        in: query
        description: Sort the order of the returned results.
        required: false
        schema:
          type: string
          description: The sort order for the results.
          example: DESC
          enum:
          - ASC
          - DESC
        example: DESC
      - name: property
        in: query
        description: Details the response parameter used to sort the transaction list.
          Sorted by 'createdAt' by default.
        required: false
        schema:
          type: string
          description: Property
      - name: childCustomerHashId
        in: query
        description: Filter transactions based on the `childCustomerHashId` used in
          the transactions.
        required: false
        schema:
          type: string
          description: This field contains the unique child customer identifier generated
            when new child customer created.
      - name: cardHashId
        in: query
        description: Filter transactions based on the unique card identifier generated
          during new/add-on card issuance.
        required: false
        schema:
          type: string
          description: This field can apply the filter based on the unique card identifier
            generated during new/add-on card issuance.
      - name: paymentInstrumentHashId
        in: query
        description: Filter transactions based on a list of comma-separated `paymentInstrumentHashIds`.
        required: false
        schema:
          type: string
          description: This parameter can filter the transactions based on comma-separated
            paymentInstrumentHashId.
      - name: authCode
        in: query
        description: Filter transactions based on the authorization code. In case
          of fund wallet transactions you can provide the `systemReferenceNumber`
          as the value.
        required: false
        schema:
          type: string
          description: This parameter can be used to filter the transactions based
            on the authorization code. In case of fund wallet transactions you can
            provide the systemReferenceNumber as value.
      - name: systemReferenceNumber
        in: query
        description: Filter transactions based on the `systemReferenceNumber`.
        required: false
        schema:
          type: string
          description: This parameter can be used to filter the transactions based
            on the systemReferenceNumber.
      - name: transactionType
        in: query
        description: Filter transactions based on the `transactiontype`. A detailed
          list of the transactions types available can be found at [Transaction Types](https://docs.nium.com/apis/docs/transaction-types).
        required: false
        schema:
          type: string
          description: This parameter can filter the transactions based on transaction
            types which can be one or more of the complete list of transactions mentioned
            in [Glossary of Transaction Types](https://docs.nium.com/baas/get-transactions#glossary-of-transaction-types).
      - name: status
        in: query
        description: >
          Filter transactions based on the `status` of the transaction; details the
          status of the transaction. Available values include:
            - **AWAITING_FUNDS**: The transaction is waiting for funding.
            - **CANCELLED**: The transaction is cancelled by the customer. For a Payout
          transaction, typically, this can only be done on scheduled payouts that
          are not yet initiated.
            - **COMPLIANCE_COMPLETED**: The transaction has cleared compliance review
          and is ready for further processing.
            - **ERROR**: An error occurred while processing the transaction. Depending
          on the type of error, the transaction can be retried by resubmitting the
          details and creating a new transaction.
            - **EXPIRED**: The transaction is expired due to insufficient funds or
          the expiration of the FX rate.
            - **IN_PROGRESS**: The transaction is currently being processed.
            - **INITIATED**: The transaction is initiated for processing.
            - **PAID**: Money has been sent to the beneficiary bank from Nium's partner
          bank.
            - **PG_PROCESSING**: Our payment gateway is processing the transaction,
          and finding the optimal route to process the payment using our partner bank
          network.
            - **REJECTED**: The transaction is rejected by compliance rules.
            - **RETURN**: The transaction has been returned by the receiving bank.
          This status typically applies to a payout transaction when the beneficiary
          bank returns it for a specific reason.
            - **RFI_REQUESTED**: The transaction has been flagged by compliance rules.
          Additional information has been requested for this transaction for compliance
          purposes.
            - **RFI_RESPONDED**: Nium has received the response to the request for
          additional compliance information requested per RFI.
            - **SCHEDULED**: The transaction is scheduled and is going to be processed
          on the scheduled date.
            - **SENT_TO_BANK**: The payout instruction has been sent to Nium's partner
          bank. When the partner bank sends the payment out, the status changes to
          **PAID**.
        required: false
        schema:
          type: string
          description: This parameter can filter the transactions based on status.
            The detailed list of possible values is available in the response of this
            API.
          enum:
          - Approved
          - Declined
          - Blocked
          - Reversal
          - Released
          - Pending
          - InProgress
          - Rejected
          - Returned
          - AwaitingFunds
          - Expired
          - Cancelled
          - Scheduled
          - NA
      - name: complianceStatus
        in: query
        description: Filter transactions based on the `complianceStatus`.
        required: false
        schema:
          type: string
          description: This parameter can filter the transactions based on complianceStatus.
            The detailed list of possible values is available in the response of this
            API.
          enum:
          - INITIATED
          - IN_PROGRESS
          - ACTION_REQUIRED
          - RFI_REQUESTED
          - RFI_RESPONDED
          - COMPLETED
          - ERROR
          - EXPIRED
          - REJECT
          - CLOSED
      - name: settlementDate
        in: query
        description: Filter transactions based on the settlement date of the transaction
          in the format yyyyMMdd.
        required: false
        schema:
          type: string
          description: This parameter can filter the transactions based on the settlement
            date of the transaction in format yyyyMMdd.
      - name: settlementStatus
        in: query
        description: Filter transactions based on settlement the status. A list of
          possible values is available in the response.
        required: false
        schema:
          type: string
          description: This parameter can filter the transactions based on settlement
            status. The detailed list of possible values is available in the response
            of this API.
      - name: mcc
        in: query
        description: Filter transactions based on the 4-digit Merchant Category Code
          used during the transaction.
        required: false
        schema:
          type: string
          description: This parameter can filter the transactions based on 4-digit
            Merchant Category Codes.
      - name: merchantName
        in: query
        description: Filter transactions based on the merchant's name field.
        required: false
        schema:
          type: string
          description: This parameter can filter the transactions based on the merchant
            name field.
      - name: merchantCity
        in: query
        description: Filter transactions based on the merchant's city.
        required: false
        schema:
          type: string
          description: This parameter can filter the transactions based on the merchant
            city field.
      - name: merchantCountry
        in: query
        description: Filter transactions based on the merchant's country field.
        required: false
        schema:
          type: string
          description: This parameter can filter the transactions based on the merchant
            country field.
      - name: transactionCurrency
        in: query
        description: Filter trasnactions based on the 3-letter [ISO-4217 transaction
          currency code](https://www.iso.org/iso-4217-currency-codes.html).
        required: false
        schema:
          type: string
          description: This field contains the 3-letter [ISO-4217 transaction currency
            code](https://www.iso.org/iso-4217-currency-codes.html).
      - name: authCurrency
        in: query
        description: Filter transactions based on the authentication currency. Accepts
          any 3-letter [ISO-4217 transaction currency code](https://docs.nium.com/apis/docs/currency-and-country-codes).
        required: false
        schema:
          type: string
          description: This parameter can filter the transactions based on auth currency
            and accepts 3-letter [ISO-4217 transaction currency code](https://docs.nium.com/apis/docs/currency-and-country-codes).
      - name: systemTraceAuditNumber
        in: query
        description: Flter transactions based on `systemTraceAuditNumber`.
        required: false
        schema:
          type: string
          description: This parameter can filter the transactions based on systemTraceAuditNumber.
      - name: merchantCountries
        in: query
        description: Filter transactions based on a comma-separated list of 2-letter
          ISO merchant countries.
        required: false
        schema:
          type: string
          description: This parameter can filter the transactions based on comma-separated
            list of 2-letter ISO merchant countries.
      - name: merchantCategories
        in: query
        description: Filter transactions based on the description of the merchant's
          type of business product or service, also known as the Merchant Category
          Code (MCC) such as Airlines, Restaurants etc.
        required: false
        schema:
          type: string
          description: This parameter describes the merchant's type of business product
            or service, also known as the Merchant Category Code (MCC) such as Airlines,
            Restaurants etc.
      - name: businessTransaction
        in: query
        description: Filter for transactions where `businessTransaction` is **TRUE**
          or **FALSE**.
        required: false
        schema:
          type: string
          description: This parameter can filter the transactions based on businessTransaction
            flag.
      - name: transactionsLabelsKey
        in: query
        description: Flter transactions based on the `transactionsLabelsKey`.
        required: false
        schema:
          type: string
          description: This parameter can filter the transactions based on transactionsLabelsKey.
      - name: transactionsLabelsValue
        in: query
        description: Filter transactions based on `transactionsLabelsValue`.
        required: false
        schema:
          type: string
          description: This parameter can filter the transactions based on transactionsLabelsValue.
      - name: tagKey
        in: query
        description: Filter transactions based on the exact value of tagKey defined
          against transactions. This can be used as an independent search parameter.
        required: false
        schema:
          type: string
          description: This parameter can filter the transactions, based on the exact
            value of tagKey defined against transactions. This can be used as an independent
            search parameter.
      - name: tagValue
        in: query
        description: Filter the responses based on the exact value of `tagKey`. The
          `tagkey` can be used also be used as an independent search parameter.
        required: false
        schema:
          type: string
          description: This parameter can filter the transactions, based on the approximating
            value of tagValue(that may be mapped for a tagKey defined against transactions).
            This can be used as an independent search parameter.
      - name: externalId
        in: query
        description: Filter transactions using your unique identifier.
        required: false
        schema:
          type: string
          description: This parameter can filter the transactions, based on the External
            Reference Number.
      - description: Filter transactions based on the unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletTransactionsResponseDTO'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/transactions/{transactionId}/business:
    put:
      tags:
      - Customer Wallet Transactions
      summary: Update Business Transaction Flag
      description: This endpoint enables you to flag transactions as business transactions.
      operationId: UpdateBusinessTransactionFlag
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: Unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - name: transactionId
        in: path
        description: Unique 36 character transaction identifier generated for each
          transaction.
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionsBusinessDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/transactions/{transactionId}/location:
    put:
      tags:
      - Customer Wallet Transactions
      summary: Transaction Geo-Tagging
      description: This endpoint enables you to update transactions with the merchant's
        location.
      operationId: TransactionGeo-Tagging
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: Unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - name: transactionId
        in: path
        description: Unique 36 character transaction identifier generated for each
          transaction.
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionsLocationDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/transactions/{transactionId}/receipt:
    get:
      tags:
      - Customer Wallet Transactions
      summary: Download Transaction Receipt
      description: This endppint enables you to download a receipt for any transaction.
      operationId: DownloadTransactionReceipt
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: Unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - name: transactionId
        in: path
        description: Unique 36 character transaction identifier generated for each
          transaction.
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsReceiptDTO'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
      x-info:
        apiType: external
    post:
      tags:
      - Customer Wallet Transactions
      summary: Upload Transaction Receipt
      description: This endpoint enables you to upload a receipt for any transaction.
      operationId: UploadTransactionReceipt
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: Unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - name: transactionId
        in: path
        description: Unique 36 character transaction identifier generated for each
          transaction.
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionsReceiptDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/transactions/{transactionId}/tags:
    post:
      tags:
      - Customer Wallet Transactions
      summary: Manage Transaction Tags
      description: This API enables you to add, update, and delete transaction tags.
      operationId: ManageTransactionTags
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: Unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - name: transactionId
        in: path
        description: Unique 36 character transaction identifier generated for each
          transaction.
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionClientTagsRequestDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionClientTagsResponseDTO'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/fundingInstruments/{fundingInstrumentId}/confirmFundingInstrument:
    post:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: Unique customer identifier generated on customer creation.
        in: path
        name: customerHashId
        required: true
        schema:
          type: string
      - description: This field is the unique 36-character funding instrument identifier.
          The id is a bank account identifier when the funding channel is direct debit.
        in: path
        name: fundingInstrumentId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayinAccountStatusResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayinApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayinApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayinApiError'
          description: Internal Server Error
      tags:
      - Customer Funding
      deprecated: false
      description: This API allows you to confirm funding instrument id
      operationId: ConfirmFundingInstrumentId
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmFundingInstrumentRequestDTO'
        description: Confirm funding instrument
      summary: Confirm funding instrument
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/fundingInstruments/{fundingInstrumentId}/fundingInstrumentDetails:
    get:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: Unique customer identifier generated on customer creation.
        in: path
        name: customerHashId
        required: true
        schema:
          type: string
      - description: Unique 36-character funding instrument identifier.
        in: path
        name: fundingInstrumentId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayinAccountStatusResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayinApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayinApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayinApiError'
          description: Internal Server Error
      tags:
      - Customer Funding
      deprecated: false
      description: Get Funding instrument details
      operationId: GetFundingInstrumentDetails
      summary: Get Funding instrument details
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/fundingInstruments:
    get:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: Unique customer identifier generated on customer creation.
        in: path
        name: customerHashId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/WalletFundingInstrumentsResponseDTO'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayinApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayinApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayinApiError'
          description: Internal Server Error
      tags:
      - Customer Funding
      deprecated: false
      description: This API allows you to fetch the funding instruments that have
        been registered for a customer.
      operationId: GetFundingInstrumentList
      summary: Get Funding Instrument List
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/fundingInstruments/{fundingInstrumentId}:
    delete:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: Unique customer identifier generated on customer creation.
        in: path
        name: customerHashId
        required: true
        schema:
          type: string
      - description: The unique 36-character alphanumeric identifier of a funding
          instrument.
        in: path
        name: fundingInstrumentId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseOfstring'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayinApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayinApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayinApiError'
          description: Internal Server Error
      tags:
      - Customer Funding
      deprecated: false
      operationId: deleteFundinginstrument
      summary: Delete Funding Instrument
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/fundingInstruments:
    post:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: Unique customer identifier generated on customer creation.
        in: path
        name: customerHashId
        required: true
        schema:
          type: string
      - description: Unique wallet identifier generated simultaneously with customer
          creation.
        in: path
        name: walletHashId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkAccountResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayinApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayinApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayinApiError'
          description: Internal Server Error
      tags:
      - Customer Funding
      deprecated: false
      description: This API allows you to link account
      operationId: AddFundingInstrument
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerLinkAccountRequest'
        description: Add a new funding instrument
      summary: Add funding instrument
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/fund:
    post:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: Unique customer identifier generated on customer creation.
        in: path
        name: customerHashId
        required: true
        schema:
          type: string
      - description: Unique wallet identifier generated simultaneously with customer
          creation.
        in: path
        name: walletHashId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletFundResponseDTO'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayinApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayinApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayinApiError'
          description: Internal Server Error
      tags:
      - Customer Funding
      deprecated: false
      description: "This API allows you to top-up into the customer's wallet. Refer\
        \ to the [Fund wallet user guide](/docs/fund-wallet) for details on usage\
        \ instructions on this API.\n >\u2139\uFE0F INFO \n >**Guidelines for Fund\
        \ Wallet.**\n>1. Cards and direct_debit funding channels are restricted by\
        \ default. Reach out to your Nium support specialist to enable this functionality.\n\
        >2. Source and destination should be in the same currency when funding channel\
        \ is bank_transfer, cards, or direct_debit.\n>3. No restriction on source\
        \ or destination currency if funding channel is prefund.\n"
      operationId: FundWallet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WalletFundDTO'
        description: >-
          Guidelines for Fund Wallet


          1.cards as a funding channel is restricted by default. It may be enabled
          for a client on request.

          2.Source and destination currencies should be same if funding channel is
          bankTransfer or cards

          3.No restriction on source or destination currency if funding channel is
          prefund.


          Fund Wallet with a Card


          Customer onboarded and KYCed successfully [through Manual or eKYC flow]
          with e-KYC calls Fund Wallet API with funding channel as cards.
      summary: Fund Wallet
      x-info:
        apiType: external
  /api/v2/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/fundingInstruments:
    post:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          format: uuid
          type: string
      - description: Unique customer identifier generated on customer creation.
        in: path
        name: customerHashId
        required: true
        schema:
          format: uuid
          type: string
      - description: Unique wallet identifier generated simultaneously with customer
          creation.
        in: path
        name: walletHashId
        required: true
        schema:
          format: uuid
          type: string
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkAccountResponseV2'
          description: Funding instrument created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddFundingInstrumentV2ErrorResponse'
          description: Error response when the request is invalid.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayinStandard401Error'
          description: Error response when the request is unauthorized.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayinStandard403Error'
          description: Error response when the requested resource is forbidden.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard404Error'
          description: Error response when the requested resource is not found.
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayinStandard500Error'
          description: Error response when an internal error occurs.
      tags:
      - Customer Funding
      deprecated: false
      description: This API is used to add a direct debit funding instrument with
        a bank account.
      operationId: AddFundingInstrumentV2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerLinkAccountRequestV2'
        description: customerLinkAccountRequest
      summary: Add funding instrument V2
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/paymentId:
    post:
      tags:
      - Customer Virtual Accounts
      summary: Assign Payment ID
      description: This API allows you to assign virtual account numbers to customers
        so they can use a specific funding source.
      operationId: AssignPaymentID
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: Unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentIdRequestDTO2'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentIdResponseDTO2'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/paymentId/tags:
    post:
      tags:
      - Customer Virtual Accounts
      summary: Manage Virtual Account Tags
      description: This API allows you to add, update, delete client tags against
        each virtual account.
      operationId: ManageVirtualAccountTags
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: Unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentIdTagRequestDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentIdCientTagsResponseDTO'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/paymentIds:
    get:
      tags:
      - Customer Virtual Accounts
      summary: Virtual Account Details
      description: "This API allows you to fetch virtual accounts assigned to a customer's\
        \ wallet.\n\n\u26A0\uFE0F **WARNING**  \nTo access updated functionality and\
        \ features, we recommend using the latest version of this API: [Virtual Account\
        \ Details V2](https://docs.nium.com/apis/reference/virtualaccountdetailsv2).\
        \ Eventually, this API version will be deprecated and become unsupported.\n"
      operationId: VirtualAccountDetails
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: Unique wallet identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - name: virtualAccountRequestDTO
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/VirtualAccountRequestDTO'
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WalletPaymentIdsResponseDTO'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
      x-info:
        apiType: external
  /api/v2/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/paymentIds:
    get:
      tags:
      - Customer Virtual Accounts
      summary: Virtual Account Details V2
      description: This API allows you to fetch virtual accounts assigned to a customer's
        wallet.
      operationId: VirtualAccountDetailsV2
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: Unique wallet identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - name: virtualAccountRequestDTO
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/VirtualAccountRequestDTO'
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualAccountResponseDTO'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/accountOwnershipCertificate:
    get:
      tags:
      - Customer Virtual Accounts
      summary: Account Ownership Certificate
      description: This API allows you to download an account ownership certificate.
      operationId: AccountOwnershipCertificate
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier, generated when the customer was first
          created.
        required: true
        schema:
          type: string
      - name: currentAccountBalance
        in: query
        description: Set to `true` to include the current account balance in the response.
          Default is `false`.
        required: false
        schema:
          type: boolean
          default: false
      - name: currencies
        in: query
        description: This field accepts the list of currencies in 3-letter [ISO-4217
          transaction currency code](https://docs.nium.com/apis/docs/currency-and-country-codes)
          for which the account ownership certificate to be generated. If no currencies
          are being sent in query param then account ownership certificate will be
          generated for all the currencies enabled to the customer.
        required: false
        schema:
          type: string
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError2'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError2'
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
      x-info:
        apiType: external
  /api/v2/exchangeRate:
    get:
      tags:
      - Rates
      summary: Exchange Rate V2
      description: This API fetches the interbank FX rate for a currency pair. Note
        that the rate provided does not include the Nium markup.
      operationId: ExchangeRateV2
      parameters:
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      - name: sourceCurrencyCode
        in: query
        description: This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html)
          for the source amount.
        required: true
        schema:
          maxLength: 3
          minLength: 3
          type: string
      - name: destinationCurrencyCode
        in: query
        description: This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html)
          for the destination amount.
        required: true
        schema:
          maxLength: 3
          minLength: 3
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExchangeRateV2ResponseDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      x-info:
        apiType: external
      x-wso2-application-security:
        optional: 'false'
        security-types: api_key
  /api/v1/exchangeRates/aggregate:
    get:
      tags:
      - Rates
      summary: Fetch historic aggregated exchange rates
      description: This API will retrieve aggregated time series of historical exchange
        rate.
      operationId: aggregatedExchangeRates
      parameters:
      - $ref: '#/components/parameters/historicalRateAuthorization'
      - $ref: '#/components/parameters/historicalRateCsrfToken'
      - $ref: '#/components/parameters/SCC_QueryParam'
      - $ref: '#/components/parameters/DCC_QueryParam'
      - name: start
        in: query
        description: The start timestamp used to filter the aggregated time series.
          Must be in the format 'yyyy-mm-ddTHH:MM:SSZ'.
        schema:
          type: string
          format: date-time
      - name: end
        in: query
        description: The end timestamp used to filter the aggregated time series.
          Must be in the format 'yyyy-mm-ddTHH:MM:SSZ'.
        schema:
          type: string
          format: date-time
      - name: window
        in: query
        description: Specifies the field by which the results should be grouped.
        schema:
          $ref: '#/components/schemas/Window'
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              examples:
                By_Hour:
                  summary: Aggregated By Hour
                  value:
                    sourceCurrencyCode: USD
                    destinationCurrencyCode: SGD
                    start: '2022-10-10T10:00:00.000Z'
                    end: '2022-10-10T12:00:00.000Z'
                    window: 1_hour
                    exchangeRates:
                    - average: 1.399889513
                      min: 1.374944574
                      max: 1.398566593
                      time: '2022-10-10T10:00:00Z'
                    - average: 1.374467773
                      min: 1.343376816
                      max: 1.321947227
                      time: '2022-10-10T11:00:00Z'
                    - average: 1.328672475
                      min: 1.335772491
                      max: 1.341418158
                      time: '2022-10-10T12:00:00Z'
                By_Day:
                  summary: Aggregated By Day
                  value:
                    sourceCurrencyCode: USD
                    destinationCurrencyCode: SGD
                    start: '2022-10-11T00:00:00.000Z'
                    end: '2022-10-14T00:00:00.000Z'
                    window: 1_day
                    exchangeRates:
                    - average: 1.399889513
                      min: 1.374944574
                      max: 1.398566593
                      time: '2022-10-11T00:00:00Z'
                    - average: 1.374467773
                      min: 1.343376816
                      max: 1.321947227
                      time: '2022-10-12T00:00:00Z'
                    - average: 1.328672475
                      min: 1.335772491
                      max: 1.341418158
                      time: '2022-10-13T00:00:00Z'
                    - average: 1.376544187
                      min: 1.376772491
                      max: 1.376418158
                      time: '2022-10-14T00:00:00Z'
              schema:
                $ref: '#/components/schemas/ExchangeRatesGetResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/historicalRateUnauthorized'
        '403':
          $ref: '#/components/responses/historicalRateForbidden'
        '500':
          $ref: '#/components/responses/historicalRateInternalError'
      deprecated: false
      x-info:
        apiType: external
      x-auth-type: Application & Application User
      x-throttling-tier: Unlimited
      x-wso2-application-security:
        optional: false,
        security-types: api_key
  /api/v1/client/{clientHashId}/quotes:
    post:
      tags:
      - Quotes
      summary: Create Quote
      description: This API creates an FX quote for a currency pair according to the
        desired lock period and conversion schedule. The FX rate provided by this
        API includes the Nium markup and can be utilized for any FX conversion within
        the quote's validity period.
      operationId: createQuote
      parameters:
      - name: clientHashId
        in: path
        description: Unique identifier of the client.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/CoreApiHashId'
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      requestBody:
        description: quoteCreationRequest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuoteCreationRequest'
            examples:
              With_No_Amount:
                value:
                  quoteType: balance_transfer
                  lockPeriod: 5_mins
                  conversionSchedule: immediate
                  sourceCurrencyCode: USD
                  destinationCurrencyCode: SGD
                  customerHashId: abc12345-5d6e-0a8b-c8d7-3a7706a0c312
                  executionType: at_conversion_time
                summary: With No Amount
              With_Source_Amount:
                value:
                  quoteType: balance_transfer
                  lockPeriod: 5_mins
                  sourceAmount: 100
                  conversionSchedule: immediate
                  sourceCurrencyCode: USD
                  destinationCurrencyCode: SGD
                  customerHashId: abc12345-5d6e-0a8b-c8d7-3a7706a0c312
                  executionType: at_conversion_time
                summary: With Source Amount
              With_Destination_Amount:
                value:
                  quoteType: balance_transfer
                  lockPeriod: 5_mins
                  destinationAmount: 100
                  conversionSchedule: immediate
                  sourceCurrencyCode: USD
                  destinationCurrencyCode: SGD
                  customerHashId: abc12345-5d6e-0a8b-c8d7-3a7706a0c312
                  executionType: at_conversion_time
                summary: With Destination Amount
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuoteCreationResponse'
              examples:
                With_Amount:
                  value:
                    id: quote_6wBIHIRhPElAHfcgVaDFZs
                    netExchangeRate: 1.3279389
                    expiryTime: '2023-06-16T05:07:03Z'
                    sourceCurrencyCode: USD
                    destinationCurrencyCode: SGD
                    quoteType: balance_transfer
                    conversionSchedule: immediate
                    lockPeriod: 5_mins
                    executionType: at_conversion_time
                    exchangeRate: 1.3373
                    markupRate: 0.0093611
                    clientMarkupRate: 0.0083611
                    customerHashId: abc12345-5d6e-0a8b-c8d7-3a7706a0c312
                    rateCaptureTime: '2023-06-16T01:02:03Z'
                    sourceAmount: 100
                    destinationAmount: 132.79
                    destinationMarkupAmount: 0.94
                    createdTime: '2023-06-16T05:02:03Z'
                  summary: With Amounts
                With_ECB_Rate:
                  value:
                    id: quote_6wBIHIRhPElAHfcgVaDFZs
                    netExchangeRate: 0.9075027
                    expiryTime: '2023-06-16T05:07:03Z'
                    sourceCurrencyCode: EUR
                    destinationCurrencyCode: SGD
                    quoteType: balance_transfer
                    conversionSchedule: immediate
                    lockPeriod: 5_mins
                    executionType: at_conversion_time
                    exchangeRate: 0.9139
                    markupRate: 0.0063973
                    clientMarkupRate: 0.0053973
                    customerHashId: abc12345-5d6e-0a8b-c8d7-3a7706a0c312
                    ecbExchangeRate: 0.9139
                    rateCaptureTime: '2023-06-16T01:02:03Z'
                    sourceAmount: 100
                    destinationAmount: 90.75
                    destinationMarkupAmount: 0.64
                    createdTime: '2023-06-16T05:02:03Z'
                  summary: With ECB Rate
                With_No_Amount:
                  value:
                    id: quote_6wBIHIRhPElAHfcgVaDFZs
                    netExchangeRate: 1.3279389
                    expiryTime: '2023-06-16T05:07:03Z'
                    sourceCurrencyCode: USD
                    destinationCurrencyCode: SGD
                    quoteType: balance_transfer
                    conversionSchedule: immediate
                    lockPeriod: 5_mins
                    executionType: at_conversion_time
                    exchangeRate: 1.3373
                    markupRate: 0.0093611
                    clientMarkupRate: 0.0083611
                    customerHashId: abc12345-5d6e-0a8b-c8d7-3a7706a0c312
                    rateCaptureTime: '2023-06-16T01:02:03Z'
                    createdTime: '2023-06-16T05:02:03Z'
                  summary: With No Amount
                When_Stale_Rate:
                  summary: When Stale Rate
                  value:
                    id: quote_6wBIHIRhPElAHfcgVaDFZs
                    netExchangeRate: 1.3279389
                    expiryTime: '2023-06-16T05:07:03Z'
                    sourceCurrencyCode: USD
                    destinationCurrencyCode: SGD
                    quoteType: balance_transfer
                    conversionSchedule: immediate
                    lockPeriod: 5_mins
                    executionType: at_conversion_time
                    exchangeRate: 1.3373
                    markupRate: 0.0093611
                    clientMarkupRate: 0.0083611
                    customerHashId: abc12345-5d6e-0a8b-c8d7-3a7706a0c312
                    rateCaptureTime: '2023-06-14T01:02:03Z'
                    sourceAmount: 100
                    destinationAmount: 132.79
                    destinationMarkupAmount: 0.94
                    createdTime: '2023-06-16T05:02:03Z'
                    isRateStale: true
        '400':
          description: Error response when the request format is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateQuoteErrorResponse'
        '401':
          description: Error response when the request is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FXStandard401Error'
        '403':
          description: Error response when the requested resource is forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FXStandard403Error'
        '404':
          description: Error response when the requested resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Descriptive404Error'
        '500':
          description: Error response when service has internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FXStandard500Error'
      deprecated: false
      x-info:
        apiType: external
      x-auth-type: Application & Application User
      x-throttling-tier: Unlimited
      x-wso2-application-security:
        optional: false,
        security-types: api_key
      x-codegen-request-body-name: QuoteCreationRequest
  /api/v1/client/{clientHashId}/quotes/{quoteId}:
    get:
      tags:
      - Quotes
      summary: Fetch Quote by ID
      description: This API allows to fetch a quote. A quote is used to identify the
        exchange rate, and associated markup and fees.
      operationId: fetchQuote
      parameters:
      - name: clientHashId
        in: path
        description: Unique identifier of the client.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/CoreApiHashId'
      - name: quoteId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/QuoteId'
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuoteCreationResponse'
              examples:
                With_Amount:
                  value:
                    id: quote_6wBIHIRhPElAHfcgVaDFZs
                    netExchangeRate: 1.3279389
                    expiryTime: '2023-06-16T05:07:03Z'
                    sourceCurrencyCode: USD
                    destinationCurrencyCode: SGD
                    quoteType: balance_transfer
                    conversionSchedule: immediate
                    lockPeriod: 5_mins
                    executionType: at_conversion_time
                    exchangeRate: 1.3373
                    markupRate: 0.0093611
                    clientMarkupRate: 0.0083611
                    customerHashId: abc12345-5d6e-0a8b-c8d7-3a7706a0c312
                    rateCaptureTime: '2023-06-16T01:02:03Z'
                    sourceAmount: 100
                    destinationAmount: 132.79
                    destinationMarkupAmount: 0.94
                    createdTime: '2023-06-16T05:02:03Z'
                  summary: With Amounts
                With_ECB_Rate:
                  value:
                    id: quote_6wBIHIRhPElAHfcgVaDFZs
                    netExchangeRate: 0.9075027
                    expiryTime: '2023-06-16T05:07:03Z'
                    sourceCurrencyCode: EUR
                    destinationCurrencyCode: SGD
                    quoteType: balance_transfer
                    conversionSchedule: immediate
                    lockPeriod: 5_mins
                    executionType: at_conversion_time
                    exchangeRate: 0.9139
                    markupRate: 0.0063973
                    clientMarkupRate: 0.0053973
                    customerHashId: abc12345-5d6e-0a8b-c8d7-3a7706a0c312
                    ecbExchangeRate: 0.9139
                    rateCaptureTime: '2023-06-16T01:02:03Z'
                    sourceAmount: 100
                    destinationAmount: 90.75
                    destinationMarkupAmount: 0.64
                    createdTime: '2023-06-16T05:02:03Z'
                  summary: With ECB Rate
                With_No_Amount:
                  value:
                    id: quote_6wBIHIRhPElAHfcgVaDFZs
                    netExchangeRate: 1.3279389
                    expiryTime: '2023-06-16T05:07:03Z'
                    sourceCurrencyCode: USD
                    destinationCurrencyCode: SGD
                    quoteType: balance_transfer
                    conversionSchedule: immediate
                    lockPeriod: 5_mins
                    executionType: at_conversion_time
                    exchangeRate: 1.3373
                    markupRate: 0.0093611
                    clientMarkupRate: 0.0083611
                    customerHashId: abc12345-5d6e-0a8b-c8d7-3a7706a0c312
                    rateCaptureTime: '2023-06-16T01:02:03Z'
                    createdTime: '2023-06-16T05:02:03Z'
                  summary: With No Amount
                When_Stale_Rate:
                  summary: When Stale Rate
                  value:
                    id: quote_6wBIHIRhPElAHfcgVaDFZs
                    netExchangeRate: 1.3279389
                    expiryTime: '2023-06-16T05:07:03Z'
                    sourceCurrencyCode: USD
                    destinationCurrencyCode: SGD
                    quoteType: balance_transfer
                    conversionSchedule: immediate
                    lockPeriod: 5_mins
                    executionType: at_conversion_time
                    exchangeRate: 1.3373
                    markupRate: 0.0093611
                    clientMarkupRate: 0.0083611
                    customerHashId: abc12345-5d6e-0a8b-c8d7-3a7706a0c312
                    rateCaptureTime: '2023-06-14T01:02:03Z'
                    sourceAmount: 100
                    destinationAmount: 132.79
                    destinationMarkupAmount: 0.94
                    createdTime: '2023-06-16T05:02:03Z'
                    isRateStale: true
        '400':
          description: Error response when the request format is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchQuoteErrorResponse'
        '401':
          description: Error response when the request is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FXStandard401Error'
        '403':
          description: Error response when the requested resource is forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FXStandard403Error'
        '404':
          description: Error response when the requested resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Descriptive404Error'
        '500':
          description: Error response when service has internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FXStandard500Error'
      deprecated: false
      x-info:
        apiType: external
      x-auth-type: Application & Application User
      x-throttling-tier: Unlimited
      x-wso2-application-security:
        optional: false,
        security-types: api_key
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/conversions:
    post:
      tags:
      - Conversions
      summary: Create Conversion
      description: This API allows you to convert the balance from one currency to
        another within the same customer wallet either at the current market rate
        or using a previous exchange rate quote. This API allows you to select a settlement
        schedule for the conversion.
      operationId: createConversion
      parameters:
      - name: clientHashId
        in: path
        description: Unique identifier of the client.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/CoreApiHashId'
      - name: customerHashId
        in: path
        description: Unique identifier of the customer.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/CoreApiHashId'
      - name: walletHashId
        in: path
        description: Unique identifier of the wallet.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/CoreApiHashId'
      - name: x-idempotency-id
        in: header
        description: Unique Idempotency UUID
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      requestBody:
        description: ConversionCreationRequest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConversionCreationRequest'
            examples:
              With_QuoteId_And_Source_Amount:
                value:
                  quoteId: quote_6WRfj2CkYaRSuiPskK3kj3
                  sourceAmount: 100
                  customerComment: Converting USD to SGD
                summary: With Quote Id and Source Amount
              With_QuoteId_And_Destination_Amount:
                value:
                  quoteId: quote_6WRfj2CkYaRSuiPskK3kj3
                  customerComment: Converting USD to SGD
                  destinationAmount: 100
                summary: With Quote Id and Destination Amount
              With_Currency_Pair_And_Source_Amount:
                value:
                  sourceAmount: 100
                  customerComment: Converting USD to SGD
                  sourceCurrencyCode: USD
                  destinationCurrencyCode: SGD
                summary: With Currency Pair and Source Amount
              With_Currency_Pair_And_Destination_Amount:
                value:
                  customerComment: Converting USD to SGD
                  destinationAmount: 100
                  sourceCurrencyCode: USD
                  destinationCurrencyCode: SGD
                summary: With Currency Pair and Destination Amount
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversionCreationResponse'
              examples:
                With_QuoteId:
                  value:
                    id: conversion_4UTXo2tQnThdZGrMz6FdQR
                    status: processing
                    conversionTime: '2023-06-16T05:22:14Z'
                    sourceCurrencyCode: USD
                    destinationCurrencyCode: SGD
                    executionType: at_conversion_time
                    sourceAmount: 100
                    destinationAmount: 132.52
                    quoteId: quote_6WRfj2CkYaRSuiPskK3kj3
                    netExchangeRate: 1.3251652
                    exchangeRate: 1.3372
                    markupRate: 0.0120348
                    clientMarkupRate: 0.0110348
                    destinationMarkupAmount: 1.2
                    systemReferenceNumber: WFT9188961163
                    customerComments: Converting USD to SGD
                    createdTime: '2023-06-16T05:22:14Z'
                    updatedTime: '2023-06-16T05:22:14Z'
                  summary: With Quote Id
                With_CurrencyPair:
                  value:
                    id: conversion_37Fom6qCpA6J0nUZh8MaJg
                    status: processing
                    conversionTime: '2023-06-16T05:22:14Z'
                    sourceCurrencyCode: USD
                    destinationCurrencyCode: SGD
                    executionType: at_conversion_time
                    sourceAmount: 100
                    destinationAmount: 132.52
                    quoteId: quote_4z3gDQho4IXp9CBJoocrTu
                    netExchangeRate: 1.3251652
                    exchangeRate: 1.3372
                    markupRate: 0.0120348
                    clientMarkupRate: 0.0110348
                    destinationMarkupAmount: 1.2
                    systemReferenceNumber: WFT9420624396
                    customerComments: Converting USD to SGD
                    createdTime: '2023-06-16T05:22:14Z'
                    updatedTime: '2023-06-16T05:22:14Z'
                  summary: With Currency Pair
        '400':
          description: Error response when the request format is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateConversionErrorResponse'
        '401':
          description: Error response when the request is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FXStandard401Error'
        '403':
          description: Error response when the requested resource is forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FXStandard403Error'
        '404':
          description: Error response when the requested resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Descriptive404Error'
        '500':
          description: Error response when service has internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FXStandard500Error'
      deprecated: false
      x-info:
        apiType: external
      x-auth-type: Application & Application User
      x-throttling-tier: Unlimited
      x-wso2-application-security:
        optional: false,
        security-types: api_key
      x-codegen-request-body-name: ConversionCreationRequest
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/conversions/{conversionId}:
    get:
      tags:
      - Conversions
      summary: Fetch Conversion by id
      description: This API will retrieve an existing conversion with the conversionId.
      operationId: fetchConversion
      parameters:
      - name: clientHashId
        in: path
        description: Unique identifier of the client.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/CoreApiHashId'
      - name: customerHashId
        in: path
        description: Unique identifier of the customer.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/CoreApiHashId'
      - name: walletHashId
        in: path
        description: Unique identifier of the wallet.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/CoreApiHashId'
      - name: conversionId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ConversionId'
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversionCreationResponse'
              examples:
                created_conversion:
                  value:
                    id: conversion_37Fom6qCpA6J0nUZh8MaJg
                    status: created
                    conversionTime: '2023-06-16T05:22:14Z'
                    sourceCurrencyCode: USD
                    destinationCurrencyCode: SGD
                    executionType: at_conversion_time
                    sourceAmount: 100
                    destinationAmount: 132.52
                    quoteId: quote_4z3gDQho4IXp9CBJoocrTu
                    netExchangeRate: 1.3251652
                    exchangeRate: 1.3372
                    markupRate: 0.0120348
                    clientMarkupRate: 0.0110348
                    destinationMarkupAmount: 1.2
                    systemReferenceNumber: WFT9420624396
                    customerComments: Converting USD to SGD
                    createdTime: '2023-06-16T05:22:14Z'
                    updatedTime: '2023-06-16T05:22:14Z'
                  summary: created_conversion
                cancelled_conversion:
                  value:
                    id: conversion_37Fom6qCpA6J0nUZh8MaJg
                    status: cancelled
                    conversionTime: '2023-06-22T01:00:00Z'
                    sourceCurrencyCode: USD
                    destinationCurrencyCode: SGD
                    executionType: at_conversion_time
                    sourceAmount: 100
                    destinationAmount: 132.52
                    quoteId: quote_4z3gDQho4IXp9CBJoocrTu
                    netExchangeRate: 1.3251652
                    exchangeRate: 1.3372
                    markupRate: 0.0120348
                    clientMarkupRate: 0.0110348
                    destinationMarkupAmount: 1.2
                    systemReferenceNumber: WFT9420624396
                    customerComments: Converting USD to SGD
                    cancellationFee: 5.28
                    cancellationFeeCurrencyCode: USD
                    cancellationComment: Cancellation due to change of plan
                    cancellationReason: user_cancel
                    cancellationFeeSystemReferenceNumber: 3064439572F
                    createdTime: '2023-06-16T05:22:14Z'
                    updatedTime: '2023-06-16T05:24:14Z'
                  summary: cancelled_conversion
        '400':
          description: Error response when the request format is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchConversionErrorResponse'
        '401':
          description: Error response when the request is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FXStandard401Error'
        '403':
          description: Error response when the requested resource is forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FXStandard403Error'
        '404':
          description: Error response when the requested resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Descriptive404Error'
        '500':
          description: Error response when service has internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FXStandard500Error'
      deprecated: false
      x-info:
        apiType: external
      x-auth-type: Application & Application User
      x-throttling-tier: Unlimited
      x-wso2-application-security:
        optional: false,
        security-types: api_key
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/conversions/{conversionId}/cancel:
    post:
      tags:
      - Conversions
      summary: Cancel Conversion
      description: This API allows you to cancel a conversion prior to the execution
        time.
      operationId: cancelConversion
      parameters:
      - name: clientHashId
        in: path
        description: Unique identifier of the client.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/CoreApiHashId'
      - name: customerHashId
        in: path
        description: Unique identifier of the customer.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/CoreApiHashId'
      - name: walletHashId
        in: path
        description: Unique identifier of the wallet.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/CoreApiHashId'
      - name: conversionId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ConversionId'
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      requestBody:
        description: ConversionCancelRequest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConversionCancelRequest'
            example:
              cancellationComment: Cancellation due to change of plan
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversionCancelResponse'
              example:
                id: conversion_1234567890abcdefABCDEF
                status: created
                systemReferenceNumber: WFT1234567890
                cancellationFee: 0.53
                cancellationFeeCurrencyCode: string
                cancellationComment: Cancelling due to change of plans.
                cancellationFeeSystemReferenceNumber: 1234567890F
                cancellationReason: user_cancel
        '400':
          description: Error response when the request format is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CancelConversionErrorResponse'
        '401':
          description: Error response when the request is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FXStandard401Error'
        '403':
          description: Error response when the requested resource is forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FXStandard403Error'
        '404':
          description: Error response when the requested resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Descriptive404Error'
        '500':
          description: Error response when service has internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FXStandard500Error'
      deprecated: false
      x-info:
        apiType: external
      x-auth-type: Application & Application User
      x-throttling-tier: Unlimited
      x-wso2-application-security:
        optional: false,
        security-types: api_key
      x-codegen-request-body-name: ConversionCancelRequest
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/conversions/{conversionId}/execute:
    post:
      tags:
      - Conversions
      summary: Execute Conversion
      description: This endpoint triggers the manual execution of a scheduled conversion
        within the customer wallet. The response includes only the conversion's ID
        and its current status.
      operationId: executeConversion
      parameters:
      - name: clientHashId
        in: path
        description: Unique identifier of the client.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/CoreApiHashId'
      - name: customerHashId
        in: path
        description: Unique identifier of the customer.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/CoreApiHashId'
      - name: walletHashId
        in: path
        description: Unique identifier of the wallet.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/CoreApiHashId'
      - name: conversionId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/ConversionId'
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversionExecutionResponse'
              example:
                id: conversion_9Km834Dn4Jfz12XqZ5LkR1
                status: processing
        '400':
          description: Error response when the request format is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecuteConversionErrorResponse'
        '401':
          description: Error response when the request is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FXStandard401Error'
        '403':
          description: Error response when the requested resource is forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FXStandard403Error'
        '404':
          description: Error response when the requested resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Descriptive404Error'
        '500':
          description: Error response when service has internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FXStandard500Error'
      deprecated: false
      x-info:
        apiType: external
      x-auth-type: Application & Application User
      x-throttling-tier: Unlimited
  /api/v1/client/{clientHashId}/exchangeRate:
    get:
      tags:
      - Quotes (Previous Version)
      summary: Exchange Rate With Markup
      description: This API fetches the exchange rate between source currency and
        destination currency. If either source or destination amount is provided,
        the equivalent amount will also be returned. Note that you may not send both
        sourceAmount and destinationAmount as query parameters together. If both are
        provided, sourceAmount shall be taken for conversion.
      operationId: exchangeRateWithMarkup
      parameters:
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      - name: clientHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          maxLength: 36
          minLength: 36
          type: string
        example: '{{clientHashId}}'
      - name: sourceCurrencyCode
        in: query
        description: This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html)
          for the source amount.
        required: true
        schema:
          maxLength: 3
          minLength: 3
          type: string
      - name: destinationCurrencyCode
        in: query
        description: This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html)
          for the destination amount.
        required: true
        schema:
          maxLength: 3
          minLength: 3
          type: string
      - name: sourceAmount
        in: query
        description: An amount to be converted. This field takes precedence over destinationAmount,
          in case both are provided.
        required: false
        schema:
          type: number
          format: double
      - name: destinationAmount
        in: query
        description: An amount to which the source is converted. It can be used to
          find the necessary source amount value. If both sourceAmount and destinationAmount
          are provided, this field is ignored.
        required: false
        schema:
          type: number
          format: double
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExchangeRateV2ResponseDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      x-info:
        apiType: external
      x-wso2-application-security:
        optional: 'false'
        security-types: api_key
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/lockExchangeRate:
    get:
      tags:
      - Quotes (Previous Version)
      summary: Exchange Rate Lock and Hold
      description: This API allows you to fetch exchange rate, and lock and hold the
        rates till a certain amount of time.
      operationId: ExchangeRateLockandHold
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: Unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - name: sourceCurrency
        in: query
        description: This field contains the [3-letter ISO-4217 currency code](/docs/currency-and-country-codes)
          for the source amount.
        required: true
        schema:
          type: string
      - name: destinationCurrency
        in: query
        description: This field contains the [3-letter ISO-4217 currency code](/docs/currency-and-country-codes)
          for the destination amount.
        required: true
        schema:
          type: string
      - name: additionalFxMarkup
        in: query
        description: This field is used if client wants to apply additional Fxmarkup
          in the exchange rate for their customer. The value should be in percentage.
          For example use 0.10 for 0.1% additional markup.
        required: false
        schema:
          maximum: 50
          exclusiveMaximum: false
          minimum: 0
          type: number
          format: double
          default: 0
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FxHoldLockResponseContent'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/transfer:
    post:
      tags:
      - Conversions (Previous Version)
      summary: Balance Transfer within Wallet
      description: This API allows you to transfer the balance from one currency to
        another within the same customer wallet.
      operationId: balanceTransferwithinWallet
      parameters:
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
        example: '{{clientHashId}}'
      - name: customerHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: Unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WalletTransferDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletTransferResponseDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      x-info:
        apiType: external
      x-wso2-application-security:
        optional: 'false'
        security-types: api_key
  /api/v1/client/{clientHashId}/customer/{customerHashId}/accountVerification:
    post:
      tags:
      - Beneficiary
      summary: Account verification (Confirmation of Payee)
      description: This API enables you to verify the details of a beneficiary's bank
        account. This API only supports account verification for specific destinations
        and corridors. For more information, see [Account verification](https://docs.nium.com/apis/docs/account-verification)
        for details.
      operationId: AccountVerification
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountValidationRequestDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountValidationResponseDTO'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
      x-info:
        apiType: external
  /api/v2/client/{clientHashId}/customer/{customerHashId}/beneficiaries:
    get:
      parameters:
      - description: This field accepts an account number.
        in: query
        name: beneficiaryAccountNumber
        required: false
        schema:
          type: string
      - description: This field accepts the beneficiary name.
        in: query
        name: beneficiaryName
        required: false
        schema:
          type: string
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: Unique customer identifier generated on customer creation.
        in: path
        name: customerHashId
        required: true
        schema:
          type: string
      - description: This field accepts the 3-letter [ISO-4217 currency code](https://docs.nium.com/apis/docs/currency-and-country-codes)
          currency code.
        in: query
        name: destinationCurrency
        required: false
        schema:
          type: string
      - description: 'This field accepts the payout method for the remittance payout.
          This field can accept one of the following values:'
        in: query
        name: payoutMethod
        required: false
        schema:
          enum:
          - LOCAL
          - SWIFT
          - WALLET
          - CASH
          - CARD
          - PROXY
          - CHECK
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/BeneficiaryResponseDTO'
                type: array
          description: OK
        '400':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: BadRequest
        '401':
          content:
            '*/*':
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            '*/*':
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Not Found
        '500':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Internal Server Error
      tags:
      - Beneficiary
      deprecated: false
      description: This API allows you to fetch beneficiary details.
      operationId: BeneficiaryListV2
      summary: Beneficiary List V2
      x-info:
        apiType: external
    post:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: Unique customer identifier generated on customer creation.
        in: path
        name: customerHashId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BeneficiaryResponseDTO'
          description: OK
        '400':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: BadRequest
        '401':
          content:
            '*/*':
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            '*/*':
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Not Found
        '500':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Internal Server Error
      tags:
      - Beneficiary
      deprecated: false
      description: "This API allows you to add a beneficiary to transfer funds.\n\n\
        \u26A0\uFE0F **IMPORTANT**  \nSome fields are conditional based on corridors.\
        \ Use the [Beneficiary Validation Schema V2](https://docs.nium.com/apis/reference/beneficiaryvalidationschemav2)\
        \ with the currency code and payout method to determine if a field is required\
        \ or not.\n"
      operationId: AddBeneficiaryV2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddBeneficiaryRequestDTO'
        description: addBeneficiaryRequestDTO
        required: true
      summary: Add Beneficiary V2
      x-info:
        apiType: external
  /api/v2/client/{clientHashId}/customer/{customerHashId}/beneficiaries/{beneficiaryHashId}:
    get:
      parameters:
      - description: Unique beneficiary hash ID.
        in: path
        name: beneficiaryHashId
        required: true
        schema:
          type: string
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: Unique customer identifier generated on customer creation.
        in: path
        name: customerHashId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BeneficiaryResponseDTO'
          description: OK
        '400':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: BadRequest
        '401':
          content:
            '*/*':
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            '*/*':
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Not Found
        '500':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Internal Server Error
      tags:
      - Beneficiary
      deprecated: false
      description: This API allows you to fetch beneficiary details of an individual
        beneficiary.
      operationId: BeneficiaryDetailsV2
      summary: Beneficiary Details V2
      x-info:
        apiType: external
    put:
      parameters:
      - description: Unique beneficiary hash ID.
        in: path
        name: beneficiaryHashId
        required: true
        schema:
          type: string
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: Unique customer identifier generated on customer creation.
        in: path
        name: customerHashId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BeneficiaryResponseDTO'
          description: OK
        '400':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: BadRequest
        '401':
          content:
            '*/*':
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            '*/*':
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Not Found
        '500':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Internal Server Error
      tags:
      - Beneficiary
      deprecated: false
      description: This API allows you to update beneficiary details.
      operationId: UpdateBeneficiaryV2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBeneficiaryRequestDTO'
        description: >-
          Info:
           Update Beneficiary API will be restricted when a remittance transaction
          for the beneficiary is Pending.
      summary: Update Beneficiary V2
      x-info:
        apiType: external
  /api/v2/client/{clientHashId}/customer/{customerHashId}/currency/{currencyCode}/validationSchemas:
    get:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: This field accepts the 3-letter [ISO-4217 currency code](/docs/currency-and-country-codes).
        in: path
        name: currencyCode
        required: true
        schema:
          type: string
      - description: Unique customer identifier generated on customer creation.
        in: path
        name: customerHashId
        required: true
        schema:
          type: string
      - allowEmptyValue: false
        description: This field can accept the different modes of payout.
        in: query
        name: payoutMethod
        required: false
        schema:
          enum:
          - LOCAL
          - SWIFT
          - WALLET
          - CASH
          - CARD
          - PROXY
          - CHECK
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Internal Server Error
      tags:
      - Beneficiary
      deprecated: false
      description: This API will allow you to fetch the validation schema for beneficiary
        validation details.
      operationId: BeneficiaryValidationSchemaV2
      summary: Beneficiary Validation Schema V2
      x-info:
        apiType: external
  /api/v2/client/{clientHashId}/customer/{customerHashId}/beneficiaries/validate:
    post:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: Unique customer identifier generated on customer creation.
        in: path
        name: customerHashId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeneficiaryValidationResponseDTO'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Internal Server Error
      tags:
      - Beneficiary
      deprecated: false
      description: "This API allows you to Validate Beneficiary Details.\n >\u2139\
        \uFE0F INFO \n >This API only supports account verification for below destination\
        \ corridors.\n>**For LOCAL payment method:** Vietnam (VN), Thailand (TH),\
        \ India (IN), Pakistan(PK), Malaysia(MY), Indonesia (ID)\n>**For PROXY payment\
        \ method:** Singapore (SG), India (IN), Malaysia(MY)"
      operationId: ConfirmationofPayee
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BeneficiaryValidationRequestDTO'
        description: beneficiaryValidationRequestDTO
        required: true
      summary: Confirmation of Payee (Previous version)
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/beneficiaries:
    get:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: Unique customer identifier generated on customer creation.
        in: path
        name: customerHashId
        required: true
        schema:
          type: string
      - description: parameters
        in: query
        name: parameters
        required: false
        schema:
          items:
            additionalProperties:
              type: string
            type: object
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Resource'
          description: OK
        '400':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: BadRequest
        '401':
          content:
            '*/*':
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            '*/*':
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Not Found
        '500':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Internal Server Error
      tags:
      - Beneficiary
      deprecated: false
      description: "This API allows you to fetch beneficiary details.\n\n\u26A0\uFE0F\
        \ **WARNING**  \nThis API version is deprecated. Eventually, a deprecated\
        \ API version becomes unsupported. \n\n[Beneficiary List V2](https://docs.nium.com/apis/reference/beneficiarylistv2)\
        \ is the latest version of this API.\n"
      operationId: BeneficiaryList
      summary: Beneficiary List
      x-info:
        apiType: external
    post:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: Unique customer identifier generated on customer creation.
        in: path
        name: customerHashId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Resource'
          description: OK
        '400':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: BadRequest
        '401':
          content:
            '*/*':
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            '*/*':
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Not Found
        '500':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Internal Server Error
      tags:
      - Beneficiary
      deprecated: false
      description: "This API allows you to add a beneficiary to transfer funds.\n\n\
        \u26A0\uFE0F **WARNING**  \nThis API version is deprecated. Eventually, a\
        \ deprecated API version becomes unsupported.\n\n[Add Beneficiary V2](https://docs.nium.com/apis/reference/addbeneficiaryv2)\
        \ is the latest version of this API.\n"
      operationId: AddBeneficiary
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddBeneficiaryRequest'
        description: addBeneficiaryRequest
        required: true
      summary: Add Beneficiary
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/beneficiaries/{beneficiaryHashId}:
    delete:
      parameters:
      - description: Unique beneficiary hash ID.
        in: path
        name: beneficiaryHashId
        required: true
        schema:
          type: string
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: Unique customer identifier generated on customer creation.
        in: path
        name: customerHashId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Resource'
          description: OK
        '400':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: BadRequest
        '401':
          content:
            '*/*':
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            '*/*':
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Not Found
        '500':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Internal Server Error
      tags:
      - Beneficiary
      deprecated: false
      description: This API allows you to delete a beneficiary.
      operationId: DeleteBeneficiary
      summary: Delete Beneficiary
      x-info:
        apiType: external
    get:
      parameters:
      - description: Unique beneficiary hash ID.
        in: path
        name: beneficiaryHashId
        required: true
        schema:
          type: string
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: Unique customer identifier generated on customer creation.
        in: path
        name: customerHashId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Resource'
          description: OK
        '400':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: BadRequest
        '401':
          content:
            '*/*':
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            '*/*':
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Not Found
        '500':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Internal Server Error
      tags:
      - Beneficiary
      deprecated: false
      description: "This API allows you to fetch beneficiary details of an individual\
        \ beneficiary.\n\n\u26A0\uFE0F **WARNING**  \nThis API version is deprecated.\
        \ Eventually, a deprecated API version becomes unsupported.\n\n[Beneficiary\
        \ Details V2](https://docs.nium.com/apis/reference/beneficiarydetailsv2) is\
        \ the latest version of this API.\n"
      operationId: BeneficiaryDetails
      summary: Beneficiary Details
      x-info:
        apiType: external
    put:
      parameters:
      - description: Unique beneficiary hash ID.
        in: path
        name: beneficiaryHashId
        required: true
        schema:
          type: string
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: Unique customer identifier generated on customer creation.
        in: path
        name: customerHashId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Resource'
          description: OK
        '400':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: BadRequest
        '401':
          content:
            '*/*':
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            '*/*':
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Not Found
        '500':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Internal Server Error
      tags:
      - Beneficiary
      deprecated: false
      description: This API allows you to update beneficiary details.
      operationId: UpdateBeneficiary
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddBeneficiaryRequest'
        description: >-
          Info:
           Update Beneficiary API will be restricted when a remittance transaction
          for the beneficiary is Pending.
      summary: Update Beneficiary
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/currency/{currencyCode}/validationSchemas:
    get:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: This field accepts the 3-letter [ISO-4217 currency code](/docs/currency-and-country-codes).
        in: path
        name: currencyCode
        required: true
        schema:
          type: string
      - description: Unique customer identifier generated on customer creation.
        in: path
        name: customerHashId
        required: true
        schema:
          type: string
      - allowEmptyValue: false
        description: >-
          This field can accept the different modes of payout.This field can accept
          one of the following values:

          1.LOCAL

          2.SWIFT

          3.WALLET

          Default value of the parameter is LOCAL.
        in: query
        name: payoutMethod
        required: false
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Internal Server Error
      tags:
      - Beneficiary
      deprecated: false
      description: "This API allows you to fetch the validation schema for beneficiary\
        \ validation details.\n\n\u26A0\uFE0F **WARNING**  \nThis API version is deprecated.\
        \ Eventually, a deprecated API version becomes unsupported.\n\n[Beneficiary\
        \ Validation Schema V2](https://docs.nium.com/apis/reference/beneficiaryvalidationschemav2)\
        \ is the latest version of this API.\n"
      operationId: BeneficiaryValidationSchema
      summary: Beneficiary Validation Schema
      x-info:
        apiType: external
  /api/v2/client/{clientHashId}/payout/banks:
    get:
      parameters:
      - description: This field can accept the bank code of specified branch and country.
        in: query
        name: bankCode
        required: false
        schema:
          type: string
      - description: This field can accept the bank name associated with country.
        in: query
        name: bankName
        required: false
        schema:
          type: string
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: This field accepts the [2-letter ISO-2 country code](/docs/currency-and-country-codes)
          for which routing code search is initiated.
        in: query
        name: countryCode
        required: true
        schema:
          type: string
      - description: This field accepts the [3-letter ISO-4217 currency code](/docs/currency-and-country-codes)
          for which routing code search is to be initiated.
        in: query
        name: currencyCode
        required: false
        schema:
          type: string
      - description: >-
          This field can accept the different modes of payout. This field can accept
          one of the following values:

          LOCAL

          SWIFT

          WALLET

          CARD

          PROXY(upcoming feature)

          Default value of the parameter is LOCAL.
        in: query
        name: payoutMethod
        required: false
        schema:
          type: string
      - description: This field determines the routing code type for the search.
        in: query
        name: routingCodeType
        required: true
        schema:
          enum:
          - IFSC
          - SWIFT
          - ACH CODE
          - BSB CODE
          - SORT CODE
          - BANK CODE
          - LOCATION ID
          - BRANCH CODE
          - BRANCH NAME
          - TRANSIT NUMBER
          type: string
      - description: This field accepts the partial or full value of the Bank Name
          on which the search is initiated, for example, it could be DBS.
        in: query
        name: searchValue
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PartialSearchBankNameResponseDTO'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Internal Server Error
      tags:
      - Reference Data
      deprecated: false
      description: This API will allow you to search the routing code details using
        bank name.
      operationId: SearchRoutingCodeUsingBankName
      summary: Search Routing Code Using Bank Name
      x-info:
        apiType: external
  /api/v2/client/{clientHashId}/payout/branches:
    get:
      parameters:
      - description: This field can accept the bank code of specified branch and country.
        in: query
        name: bankCode
        required: false
        schema:
          type: string
      - description: This field can accept the bank name associated with country.
        in: query
        name: bankName
        required: false
        schema:
          type: string
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: This field accepts the [2-letter ISO-2 country code](/docs/currency-and-country-codes)
          for which routing code search is initiated.
        in: query
        name: countryCode
        required: true
        schema:
          type: string
      - description: This field accepts the [3-letter ISO-4217 currency code](/docs/currency-and-country-codes)
          for which routing code search is to be initiated.
        in: query
        name: currencyCode
        required: false
        schema:
          type: string
      - description: >-
          This field can accept the different modes of payout. This field can accept
          one of the following values:

          LOCAL

          SWIFT

          WALLET

          CARD

          PROXY(upcoming feature)

          Default value of the parameter is LOCAL.
        in: query
        name: payoutMethod
        required: false
        schema:
          type: string
      - description: This field determines the routing code type for the search.
        in: query
        name: routingCodeType
        required: true
        schema:
          enum:
          - IFSC
          - SWIFT
          - ACH CODE
          - BSB CODE
          - SORT CODE
          - BANK CODE
          - LOCATION ID
          - BRANCH CODE
          - BRANCH NAME
          - TRANSIT NUMBER
          type: string
      - description: This field accepts the partial or full value of the Bank Name
          on which the search is initiated, for example, it could be DBS.
        in: query
        name: searchValue
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PartialSearchBranchNameResponseDTO'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Internal Server Error
      tags:
      - Reference Data
      deprecated: false
      description: This API will allow you to search the routing code details using
        branch name.
      operationId: SearchRoutingCodeUsingBranchName
      summary: Search Routing Code Using Branch Name
      x-info:
        apiType: external
  /api/v2/client/{clientHashId}/supportedCorridors:
    get:
      parameters:
      - description: This field accepts the beneficiary account type.
        in: query
        name: beneficiaryAccountType
        required: false
        schema:
          type: string
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: This field accepts type of Client e.g. FI, NonFI, default NonFI.
        in: query
        name: clientType
        required: false
        schema:
          type: string
      - description: This field accepts the type of customer.
        in: query
        name: customerType
        required: false
        schema:
          type: string
      - description: This field accepts the [2-letter ISO-2 destination country code](https://docs.nium.com/apis/docs/currency-and-country-codes).
        in: query
        name: destinationCountry
        required: false
        schema:
          type: string
      - description: This field accepts the [3-letter ISO-4217 currency code](https://docs.nium.com/apis/docs/currency-and-country-codes)
          which will be used to filter the user selected currency and get the payout
          method.
        in: query
        name: destinationCurrency
        required: false
        schema:
          type: string
      - description: This field accepts the different modes of payout.
        in: query
        name: payoutMethod
        required: false
        schema:
          type: string
      - description: This field determines the routing code type for the currency.
        in: query
        name: routingCodeType
        required: false
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SupportedCorridorsResponseDTO'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Internal Server Error
      tags:
      - Reference Data
      deprecated: false
      description: This API will allow you to fetch the supported corridors for remittance
        with details.
      operationId: FetchSupportedCorridorsV2
      summary: Fetch Supported Corridors V2
      x-info:
        apiType: external
  ? /api/v1/client/{clientHashId}/customer/{customerHashId}/country/{countryCode}/routingCodeType/{routingCodeType}/routingCodeValue/{routingCodeValue}/routingCode
  : get:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: This field accepts the [2-letter ISO-2 country code](/docs/currency-and-country-codes)
          of a beneficiary.
        in: path
        name: countryCode
        required: true
        schema:
          type: string
      - description: This field accepts the unique customer identifier generated on
          customer creation.
        in: path
        name: customerHashId
        required: true
        schema:
          type: string
      - description: >-
          This field accepts the routing code type 1. The possible values are:

          SWIFT for all cases where SWIFT is applicable

          IFSC (relevant for India)

          ACH CODE (relevant for USA)

          BSB CODE (relevant for Australia)

          SORT CODE (relevant for the UK)

          LOCATION ID (relevant for Nepal)

          BANK CODE (relevant for few countries including Canada, Hong Kong, Sri Lanka,
          South Korea, Pakistan, Brazil, and some more)

          TRANSIT NUMBER (relevant for Canada)

          BRANCH CODE (relevant for Sri Lanka, Vietnam, Brazil, Uruguay, Kenya and
          some more)

          Given that the routing_code_type_1 is a PATH parameter, apply URL encoding.
          For example, when you want to pass ACH CODE, after URL encoding you will
          pass it as ACH%20CODE
        in: path
        name: routingCodeType
        required: true
        schema:
          type: string
      - description: This field accepts the routing code value 1. Refer to the [Examples
          of Routing Codes](/apis/docs/routing-codes#examples-of-routing-codes).
        in: path
        name: routingCodeValue
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Resource'
          description: OK
        '400':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: BadRequest
        '401':
          content:
            '*/*':
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            '*/*':
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Not Found
        '500':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Internal Server Error
      tags:
      - Reference Data
      deprecated: false
      description: This API allows you to fetch the bank details against the routing
        information.
      operationId: FetchBankDetailsusingRoutingCode
      summary: Fetch Bank Details using Routing Code
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/partialSearch:
    post:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: Unique customer identifier generated on customer creation.
        in: path
        name: customerHashId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Internal Server Error
      tags:
      - Reference Data
      deprecated: false
      description: >-
        This API will allow you to search the routing code details of a bank based
        on certain parameters - i.e., by using bank name or branch name.

        This API will help you to build a user experience where you can help your
        users to locate a specific routing code (that could be SWIFT, IFSC, SORT CODE,
        ACH CODE, etc., - see the list below) by using full or partial name search
        of bank name or branch name. For example, if your user is looking for SWIFT
        CODE for HSBC in the UK, then this API can be used to search for the SORT
        CODE by searching using the bank name.
      operationId: SearchRoutingCodeusingbanknamebranchname
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartialSearchDTO'
        description: partialSearchDTO
        required: true
      summary: Search Routing Code (using bank name/branch name)
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/supportedCorridors:
    get:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: Unique customer identifier generated on customer creation.
        in: path
        name: customerHashId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Internal Server Error
      tags:
      - Reference Data
      deprecated: false
      description: This API will allow you to fetch the supported corridors for remittance
        with details.
      operationId: FetchSupportedCorridors
      summary: Fetch Supported Corridors
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/widget/token:
    post:
      parameters:
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: Unique customer identifier generated during customer creation.
        in: path
        name: customerHashId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerCardWidgetTokenResponse'
          description: OK
        '400':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: BadRequest
        '401':
          content:
            '*/*':
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            '*/*':
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Not Found
        '500':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Internal Server Error
      tags:
      - Payout
      deprecated: false
      description: "This API allows you to use NIUM\u2019s card widget to tokenize\
        \ beneficiary card details. Non-PCI DSS compliant Clients are expected to\
        \ integrate with this new API to get beneficiary\u2019s encrypted card token\
        \ number. This token number needs to be passed in field encryptedBeneficiaryCardToken\
        \ while adding a beneficiary to make a payout to card."
      operationId: CustomerGetCardWidget
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerCardWidgetTokenRequestDTO'
        description: cardWidgetTokenRequestDTO
        required: true
      summary: Get Card Widget
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/refund:
    post:
      tags:
      - Payout
      summary: Withdraw Funds from Wallet
      description: This API allows you to withdraw funds from the customer's wallet.
      operationId: WithdrawFundsFromWallet
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: Unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WalletRefundRequestDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseWalletRefundResponseDTO'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/remittance:
    post:
      tags:
      - Payout
      summary: Transfer Money
      description: This API will allow you to send money to the registered beneficiary.
      operationId: TransferMoney
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: Unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemittanceTransactionsRequestDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemittanceResponseDTO'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/remittance/{systemReferenceNumber}/audit:
    get:
      tags:
      - Payout
      summary: Fetch Remittance Life Cycle Status
      description: This API allows you to fetch the Remittance Life Cycle Status along
        with Payment Reference Number, Partner Reference Number, System Reference
        Number, Date and Time of the Remittance status based on the System Reference
        Number provided in the input.
      operationId: FetchRemittanceLifeCycleStatus
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: Unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - name: systemReferenceNumber
        in: path
        description: This is a unique system reference number generated by card issuance
          platform for the transaction.
        required: true
        schema:
          type: string
      - name: externalId
        in: header
        description: This header parameter determines if the systemReferenceNumber
          is treated as an externalId when true or as a system reference number when
          false or missing.
        required: false
        schema:
          type: boolean
          default: false
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RemittanceEventsResponseDTO2'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/transactions/{authCode}/rfi/upload:
    post:
      tags:
      - Payout
      summary: Respond to Transaction RFI
      description: This API allows you to respond to an RFI raised for a transaction.
      operationId: RespondtoTransactionRFI
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: Unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - name: authCode
        in: path
        description: Authorization code of the transaction.
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WalletUploadRfiDocumentRequestDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletUploadRfiDetailsResponseDTO'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
      x-info:
        apiType: external
  /api/v1/remittance/purposeCodes:
    get:
      tags:
      - Payout
      summary: Purpose of Transfer
      description: This API will allow you to fetch the list of purpose of transfer.
      operationId: PurposeofTransfer
      parameters:
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PurposeCodeResponseDTO'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/remittance/{systemReferenceNumber}/receipt:
    get:
      tags:
      - Payout
      summary: Get Proof Of Payment
      description: This API allows you to download a proof of payment receipt against
        a transaction.
      operationId: PoP
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: Unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - name: systemReferenceNumber
        in: path
        description: Unique System Reference Number generated on Transfer Money request.
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          description: Returns a transaction receipt file TransactionReceipt_<systemReferenceNumber>.pdf
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError2'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError2'
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError2'
      x-info:
        apiType: external
  ? /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/mandate/{mandateId}/transactions/{transactionId}/return
  : post:
      tags:
      - Payout
      summary: Return Mandate
      description: This API will allow you to return to Direct Debit Mandate
      operationId: returnMandate
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: Unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - name: mandateId
        in: path
        description: Unique mandateId
        required: true
        schema:
          type: string
      - name: transactionId
        in: path
        description: Unique transactionId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMandateRequestDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError2'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError2'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError2'
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError2'
      x-info:
        apiType: external
  /api/v3/client/{clientHashId}/supportedCorridors:
    get:
      parameters:
      - description: This field accepts the beneficiary account type.
        in: query
        name: beneficiaryAccountType
        required: false
        schema:
          enum:
          - INDIVIDUAL
          - CORPORATE
          type: string
      - description: Unique client identifier generated and shared before API handshake.
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: This field accepts the type of customer.
        in: query
        name: customerType
        required: false
        schema:
          enum:
          - INDIVIDUAL
          - CORPORATE
          type: string
      - description: This field accepts the [2-letter ISO-2 destination country code](https://docs.nium.com/apis/docs/currency-and-country-codes).
        in: query
        name: destinationCountry
        required: false
        schema:
          type: string
      - description: This field accepts the [3-letter ISO-4217 currency code](https://docs.nium.com/apis/docs/currency-and-country-codes)
          which will be used to filter the user selected currency and get the payout
          method.
        in: query
        name: destinationCurrency
        required: false
        schema:
          type: string
      - description: The sort order for the results.
        example: DESC
        in: query
        name: order
        required: false
        schema:
          enum:
          - ASC
          - DESC
          type: string
      - description: This API may have lot of data in response and supports pagination.
          Entire response data is divided into pages with size as the upper limit
          on the number of data. Integer values from 0 onwards are acceptable.\nDefault
          page is 0.
        example: 0
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
      - description: This field accepts the different modes of payout.
        in: query
        name: payoutMethod
        required: false
        schema:
          enum:
          - LOCAL
          - SWIFT
          - WALLET
          - CASH
          - CARD
          - PROXY
          - CHECK
          type: string
      - description: >
          Breakdowns the supported payout methods into different categories including:
          <code>ach</code>, <code>cash</code>, <code>proxy_api</code>, <code>wire_local</code>
          and others.
        in: query
        name: payoutMethodCategory
        required: false
        schema:
          enum:
          - visaDirect
          - sepa
          - ach
          - proxy
          - proxyFps
          - wallet
          - wireForeign
          - proxyDuitnow
          - wireLocal
          - proxyBank
          - cash
          - unionPay
          - proxyUpi
          - check
          - fednow
          - fedwire
          - interac
          type: string
      - description: Determines the routing code type for the currency.
        in: query
        name: routingCodeType
        required: false
        schema:
          enum:
          - SWIFT
          - IFSC
          - ACH CODE
          - BSB CODE
          - SORT CODE
          - LOCATION ID
          - BANK CODE
          - TRANSIT NUMBER
          - BRANCH CODE
          - BRANCH NAME
          type: string
      - description: Determines the number of elements per page. Typical values can
          be 1-500.
        example: 500
        in: query
        name: size
        required: false
        schema:
          format: int32
          type: integer
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerSupportedCorridorsResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApiError'
          description: Internal Server Error
      tags:
      - Payout
      deprecated: false
      description: This API will allow you to fetch the supported corridors for remittance
        with details.
      operationId: FetchSupportedCorridorsV3
      summary: Fetch Supported Corridors V3
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/remittance/{systemReferenceNumber}/cancel:
    post:
      tags:
      - Payout
      summary: Cancel Remittance
      operationId: CancelRemittance
      parameters:
      - name: clientHashId
        in: path
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        required: true
        schema:
          type: string
      - name: systemReferenceNumber
        in: path
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CancelledRemittanceResponseDTO'
              example:
                message: Transaction Cancelled Successfully
                systemReferenceNumber: RT6431795378
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletStandard404Error'
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500Error'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/verifications/{verificationId}:
    get:
      parameters:
      - description: clientHashId
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: verificationId
        in: path
        name: verificationId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyResponse'
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
      - Nium Verify
      deprecated: false
      operationId: VerificationDetailsByVerificationId
      summary: Fetch Verification
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/verifications:
    get:
      parameters:
      - description: clientHashId
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: end
        in: query
        name: end
        required: false
        schema:
          type: string
      - description: endingBefore
        in: query
        name: endingBefore
        required: false
        schema:
          type: string
      - description: limit
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
      - description: sortOrder
        in: query
        name: sortOrder
        required: false
        schema:
          type: string
      - description: start
        in: query
        name: start
        required: false
        schema:
          type: string
      - description: startingAfter
        in: query
        name: startingAfter
        required: false
        schema:
          type: string
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageResponse_VerifyResponse_'
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
      - Nium Verify
      deprecated: false
      operationId: VerificationDetailsHistoryByClientHashId
      summary: List Verifications
      x-info:
        apiType: external
    post:
      parameters:
      - description: clientHashId
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyResponse'
          description: OK
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
      - Nium Verify
      deprecated: false
      operationId: ClientVerification
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyRequest'
        description: verifyRequest
        required: true
      summary: Verify a Bank Account
      x-info:
        apiType: external
  /api/v1/txn:
    post:
      responses:
        '200':
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/LocalIsoResponse'
          description: OK
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
      - Simulators
      deprecated: false
      operationId: simulateAuthorization
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/LocalIsoRequest'
        description: message
        required: true
      summary: Simulate Authorize Card Transaction
      x-info:
        apiType: external
      parameters:
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
  /api/v1/settlement/run:
    post:
      parameters:
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: string
          description: OK
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
      - Simulators
      deprecated: false
      operationId: simulateClearing
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SettlementRequestDTO'
        description: settlementRequestDTO
        required: true
      summary: Simulate Settlement Transaction
      x-info:
        apiType: external
  /api/v2/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card:
    post:
      tags:
      - Lifecycle
      summary: Add Card V2
      description: This API allows you to issue a card for a customer.
      operationId: addCardV2
      parameters:
      - name: clientHashId
        in: path
        description: The unique client identifier generated and shared before the
          API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: The unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: The unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCardRequestV2'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddCardV2ResponseDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-info:
        apiType: external
  /api/v2/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/activate:
    post:
      tags:
      - Lifecycle
      summary: Activate Card V2
      description: This API allows you to activate a card after delivery to the customer.
      operationId: ActivateCard
      parameters:
      - name: clientHashId
        in: path
        description: The unique client identifier generated and shared before the
          API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: The unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: The unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - name: cardHashId
        in: path
        description: The unique card identifier generated while new/add-on card issuance.
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivateCardRequestV2DTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivateCardResponseV2DTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-info:
        apiType: external
  /api/v2/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}:
    get:
      tags:
      - Lifecycle
      summary: Card Details V2
      description: Fetch the details about a specific card.
      operationId: cardDetailsV2
      parameters:
      - name: clientHashId
        in: path
        description: The unique client identifier generated and shared before the
          API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: The unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: The unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - name: cardHashId
        in: path
        description: The unique card identifier generated while new/add-on card issuance.
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDetails'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-info:
        apiType: external
    post:
      tags:
      - Lifecycle
      summary: Update Card Details V2
      operationId: updateCardDetailsV2
      parameters:
      - name: clientHashId
        in: path
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        required: true
        schema:
          type: string
      - name: cardHashId
        in: path
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateContactInfoRequestDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse2'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-info:
        apiType: external
  /api/v2/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/cards:
    get:
      tags:
      - Lifecycle
      summary: Card List V2
      description: This API returns all the cards issued for a given customer wallet.
      operationId: cardListV2
      parameters:
      - name: clientHashId
        in: path
        description: The unique client identifier generated and shared before the
          API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: The unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: The unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - name: childCustomerHashId
        in: query
        required: false
        schema:
          type: string
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageResponseCardDetails'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/widget/showCardDetails:
    post:
      tags:
      - Lifecycle
      summary: Get Card Details Widget
      description: Use this API to fetch card widget url and token for Non-PCI DSS
        compliant Clients
      operationId: GetCardWidget
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: Unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - name: cardHashId
        in: path
        description: Unique card identifier generated while new/add-on card issuance.
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardWidgetTokenRequestDTO'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardWidgetTokenResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard401Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard403Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500Error'
      x-info:
        apiType: external
  /api/v2/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/blockAndReplace:
    post:
      tags:
      - Lifecycle
      summary: Block and Replace Card
      description: Use this API to block and replace a card.
      operationId: blockAndReplaceCardV2
      parameters:
      - name: clientHashId
        in: path
        description: The unique client identifier generated and shared before the
          API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: The unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: The unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - name: cardHashId
        in: path
        description: The unique card identifier generated while new/add-on card issuance.
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockAndReplaceCardRequestDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockAndReplaceCardResponseDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/convert:
    post:
      tags:
      - Lifecycle
      summary: Convert Card
      description: Convert your virtual card to a physical card. For more information,
        see [Manage Cards](/docs/card-management).
      operationId: convertCard
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: Unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - name: cardHashId
        in: path
        description: Unique card identifier generated while new/add-on card issuance.
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConvertCardRequestDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConvertCardResponseDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard401Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard403Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-info:
        apiType: external
  /api/v2/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/lockAction:
    put:
      tags:
      - Lifecycle
      summary: Lock/Unlock Cards
      operationId: lockUnlockCardV2
      parameters:
      - name: clientHashId
        in: path
        description: The unique client identifier generated and shared before the
          API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: The unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: The unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - name: cardHashId
        in: path
        description: The unique card identifier generated while new/add-on card issuance.
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LockStatusUpdateRequestDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LockStatusUpdateResponseDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/renewCard:
    post:
      tags:
      - Lifecycle
      summary: Renew Card
      description: Use this API for card renewal.
      operationId: RenewCard
      parameters:
      - name: clientHashId
        in: path
        description: The unique client identifier generated and shared before the
          API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: The unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: The unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - name: cardHashId
        in: path
        description: The unique card identifier generated while new/add-on card issuance.
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RenewCardRequest'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/assignCard:
    post:
      tags:
      - Lifecycle
      summary: Assign Card
      description: This API is used to assign a card to a customer. In this use case,
        the client has an unassigned card with him/her. The client hands over the
        card to the customer and assigns it to him/her.
      operationId: AssignCard
      parameters:
      - name: clientHashId
        in: path
        description: The unique client identifier generated and shared before the
          API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: The unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: The unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignCardDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardAssignResponseDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card:
    post:
      tags:
      - Lifecycle
      summary: Add Card
      description: "This API allows you to issue a card for a customer.\n\n\u26A0\uFE0F\
        \ **WARNING**  \nThis API version is deprecated. Eventually, a deprecated\
        \ API version becomes unsupported. [Add Card V2](https://docs.nium.com/apis/reference/addcardv2)\
        \ is the latest version of this API.\n"
      operationId: AddCard
      parameters:
      - name: clientHashId
        in: path
        description: The unique client identifier generated and shared before the
          API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: The unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: The unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCardRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddCardResponseDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}:
    get:
      tags:
      - Lifecycle
      summary: Card Details
      description: "Enables you to fetch the card details of a particular card.\n\n\
        \u26A0\uFE0F **WARNING**  \nThis API version is deprecated. Eventually, a\
        \ deprecated API version becomes unsupported. [Card Details V2](https://docs.nium.com/apis/reference/carddetailsv2)\
        \ is the latest version of this API.\n"
      operationId: CardDetails
      parameters:
      - name: clientHashId
        in: path
        description: The unique client identifier generated and shared before the
          API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: The unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: The unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - name: cardHashId
        in: path
        description: The unique card identifier generated while new/add-on card issuance.
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponseDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/activate:
    post:
      tags:
      - Lifecycle
      summary: Activate Card
      description: This API allows you to activate a card after delivery to a customer.
      operationId: ActivateCard_1
      parameters:
      - name: clientHashId
        in: path
        description: The unique client identifier generated and shared before the
          API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: The unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: The unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - name: cardHashId
        in: path
        description: The unique card identifier generated while new/add-on card issuance.
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivateCardResponseDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/cardAction:
    post:
      tags:
      - Lifecycle
      summary: Block/Unblock Cards
      description: "This API helps you perform the following operations:\n- Permanent\
        \ block card\n- Temporary block card\n- Unblock card.\n\n\u26A0\uFE0F **WARNING**\
        \  \nThis API version is deprecated. Eventually, a deprecated API version\
        \ becomes unsupported. \n\nFor a temporary lock and unlock, [Lock/Unlock Card\
        \ API](ref:lockunlockcardv2) is the latest version of this API. For a permanent\
        \ block and replacing the card, [Block and Replace API](ref:blockandreplacecardv2)\
        \ is the latest version of this API.\n"
      operationId: BlockUnblockCards
      parameters:
      - name: clientHashId
        in: path
        description: The unique client identifier generated and shared before the
          API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: The unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: The unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - name: cardHashId
        in: path
        description: The unique card identifier generated while new/add-on card issuance.
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockCodeDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockCodeCardResponseDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/replaceCard:
    post:
      tags:
      - Lifecycle
      summary: Issue Replacement Card
      description: "Use this API for issuing a card replacement.\n\n\u26A0\uFE0F **WARNING**\
        \  \nThis API version is deprecated. Eventually, a deprecated API version\
        \ becomes unsupported. \n\nFor a permanent block and replacing the card, use\
        \ the [Block and Replace](https://docs.nium.com/apis/reference/blockandreplacecardv2).\n"
      operationId: IssueReplacementCard
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: Unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - name: cardHashId
        in: path
        description: Unique card identifier generated while new/add-on card issuance.
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplaceCardRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddCardResponseDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/cards:
    get:
      tags:
      - Lifecycle
      summary: Card List
      description: This API will return all the cards issued, for a given wallet.
      operationId: CardList
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: Unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-info:
        apiType: external
  /api/v2/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/retrieve:
    get:
      tags:
      - Security
      summary: Fetch card data encrypted
      description: This API allows you to fetch the unmasked card number, CVV2 and
        expiry (encrypted) for a card
      operationId: fetchCardDataEncryptedV2
      parameters:
      - name: clientHashId
        in: path
        description: The unique client identifier generated and shared before the
          API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: The unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: The unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - name: cardHashId
        in: path
        description: The unique card identifier generated while new/add-on card issuance.
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveCardDetailsResponseDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/pin:
    get:
      tags:
      - Security
      summary: Fetch ATM Pin
      description: 'Fetch the base-64 encoded ATM PIN for: - Physical cards - Virtual
        cards that you have upgraded to a physical card in your production environment.  Please
        note: - This request **does not** work for virtual cards.  - Only allowed
        for the EU and UK cards.'
      operationId: FetchATMPin
      parameters:
      - name: clientHashId
        in: path
        description: The unique client identifier generated and shared before the
          API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: The unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: The unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - name: cardHashId
        in: path
        description: The unique card identifier generated while new/add-on card issuance.
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchPinResponseDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-info:
        apiType: external
    post:
      tags:
      - Security
      summary: Set/Reset PIN
      description: This API allows you to set a new PIN or change the PIN for a card
        in the production environment. This API only applies to a physical card or
        a virtual card upgraded to a physical card. This is allowed only for cards
        issued in APAC, not for EU/UK cards.
      operationId: SetResetPIN
      parameters:
      - name: clientHashId
        in: path
        description: The unique client identifier generated and shared before the
          API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: The unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: The unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - name: cardHashId
        in: path
        description: The unique card identifier generated while new/add-on card issuance.
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PinUpdateRequestDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PinUpdateResponseDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/pin/status:
    get:
      tags:
      - Security
      summary: Fetch Pin Status
      description: This API allows you to fetch the PIN status of an active card.
      operationId: FetchPinStatus
      parameters:
      - name: clientHashId
        in: path
        description: The unique client identifier generated and shared before the
          API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: The unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: The unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - name: cardHashId
        in: path
        description: The unique card identifier generated while new/add-on card issuance.
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchPinStatusResponseDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/pin/unblock:
    post:
      tags:
      - Security
      summary: Unblock PIN
      description: This API allows you to unblock PIN and reset retry count for a
        card. This API is only applicable for the APAC region.
      operationId: UnblockCardPIN
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: Unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - name: cardHashId
        in: path
        description: Unique card identifier generated while new/add-on card issuance.
        required: true
        schema:
          type: string
      - description: Please enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PinUpdateResponseDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/cvv:
    get:
      tags:
      - Security
      summary: Fetch CVV2
      description: >-
        This API allows you to fetch the base-64 encoded CVV2 and expiry for a card.

        Please note, this request version is deprecated.

        Eventually, a deprecated API version becomes unsupported. See [Fetch Card
        Data Encrypted](https://docs.nium.com/apis/reference/fetchcarddataencryptedv2)
        for the latest version of this request.
      operationId: FetchCVV2
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: Unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - name: cardHashId
        in: path
        description: Unique card identifier generated while new/add-on card issuance.
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CvvResponseDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/unmask:
    get:
      tags:
      - Security
      summary: Unmask Card
      description: "This API allows you to unmask a card number before using it for\
        \ an e-commerce transaction.\n\n\u26A0\uFE0F **WARNING**  \nThis API version\
        \ is deprecated. Eventually, a deprecated API version becomes unsupported.\n\
        \n[Fetch Card Data Encrypted](https://docs.nium.com/apis/reference/fetchcarddataencryptedv2)\
        \ is the latest version of this API.\n"
      operationId: UnmaskCard
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: Unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - name: cardHashId
        in: path
        description: Unique card identifier generated while new/add-on card issuance.
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnmaskCardResponseDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-info:
        apiType: external
  /api/v2/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/pin:
    get:
      tags:
      - Security
      summary: Fetch ATM Pin V2
      description: This API allows you to fetch the ATM Pin in RSA encrypted format
        for Physical cards & Virtual upgrade to Physical in the production environment.
        This API will not work for Virtual cards. This is allowed only for the EU
        & UK cards.
      operationId: FetchATMPinV2
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: Unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - name: cardHashId
        in: path
        description: Unique card identifier generated while new/add-on card issuance.
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchPinResponseDTOV2'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard401Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard403Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500Error'
      x-info:
        apiType: external
    post:
      tags:
      - Security
      summary: Set/Reset PIN V2
      description: This API allows you to set a new pin for a card in the production
        environment. This API will return a stubbed response in the API sandbox. This
        API should be used outside EU/UK.
      operationId: SetResetPINV2
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: Unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - name: cardHashId
        in: path
        description: Unique card identifier generated while new/add-on card issuance.
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PinUpdateRequestDTOV2'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PinUpdateResponseDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard401Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard403Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500Error'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/showSecurityDetails:
    get:
      tags:
      - Security
      summary: Show Security Details Encrypted
      description: 'This API allows you to show Security Details: the unmasked card
        number, CVV2 and expiry (encrypted) for a card'
      operationId: showSecurityDetailsEncrypted
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: Unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - name: cardHashId
        in: path
        description: Unique card identifier generated while new card issuance.
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShowSecurityDetailsResponseDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard401Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard403Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500Error'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/3ds/passcode/status:
    get:
      tags:
      - 3DS
      summary: 3DS passcode enrollment status
      operationId: passcodeEnrollmentStatus
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: Unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - name: cardHashId
        in: query
        description: Unique card identifier generated while new/add-on card issuance.
        required: false
        schema:
          type: string
      - description: Please enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PasscodeStatusDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/3ds/passcode:
    post:
      tags:
      - 3DS
      summary: Add or Update passcode
      description: API to update the 3DS passcode for a specific card.
      operationId: setPasscode
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: Unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - name: cardHashId
        in: path
        description: Unique card identifier generated while new/add-on card issuance.
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasscodeRequestDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasscodeResponseDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard401Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard403Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500Error'
      x-info:
        apiType: external
  /api/v2/client/{clientHashId}/3ds/oob/callback:
    post:
      tags:
      - 3DS
      summary: 3DS OOB Callback V2
      description: API to notify Nium on success or failure of OOB authentication
      operationId: processOobCallbackV2
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OobCallbackRequestDTO'
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/notifications/3ds/oob/callback:
    post:
      tags:
      - 3DS
      summary: Process OOB callback
      operationId: ProcessOOBcallback
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OOBCallbackRequestDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OOBCallbackResponseDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/channels:
    get:
      tags:
      - Controls
      summary: Get Channel Restriction
      description: This API will get the restriction set at card level for all the
        channels, for example, instore, online, ATM, cross border, and magnetic stripe.
      operationId: GetChannelRestriction
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: Unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - name: cardHashId
        in: path
        description: Unique card identifier generated while new/add-on card issuance.
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseTransactionChannelsResponseDTO'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
      x-info:
        apiType: external
    post:
      tags:
      - Controls
      summary: Update Channel Restriction
      description: This API will restrict transaction at card level for a given channel,
        for example, in instore, online, ATM, cross border and magnetic stripe.
      operationId: UpdateChannelRestriction
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: Unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - name: cardHashId
        in: path
        description: Unique card identifier generated while new/add-on card issuance.
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChannelActionRequestDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseString'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/channels/mcc:
    get:
      tags:
      - Controls
      summary: Get MCC Channel Restrictions
      description: This API allows you to fetch MCC based channel restrictions at
        the card level.
      operationId: GetMCCChannelRestrictions
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          maxLength: 36
          minLength: 36
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          maxLength: 36
          minLength: 36
          type: string
      - name: walletHashId
        in: path
        description: Unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          maxLength: 36
          minLength: 36
          type: string
      - name: cardHashId
        in: path
        description: Unique card identifier generated while new/add-on card issuance.
        required: true
        schema:
          maxLength: 36
          minLength: 36
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MCCRestrictionDTO'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
      x-info:
        apiType: external
    post:
      tags:
      - Controls
      summary: Update MCC Channel Restrictions
      description: This API allows you to create MCC based channel restrictions at
        the card level.
      operationId: UpdateMCCChannelRestrictions
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          maxLength: 36
          minLength: 36
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          maxLength: 36
          minLength: 36
          type: string
      - name: walletHashId
        in: path
        description: Unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          maxLength: 36
          minLength: 36
          type: string
      - name: cardHashId
        in: path
        description: Unique card identifier generated while new/add-on card issuance.
        required: true
        schema:
          maxLength: 36
          minLength: 36
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MCCRestrictionDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiResponse2'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/card/{cardHashId}/limits:
    get:
      tags:
      - Controls
      summary: Fetch Card Limits
      description: This API allows you to fetch card limits.
      operationId: GetCardLimits
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          maxLength: 36
          minLength: 36
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          maxLength: 36
          minLength: 36
          type: string
      - name: walletHashId
        in: path
        description: Unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          maxLength: 36
          minLength: 36
          type: string
      - name: cardHashId
        in: path
        description: Unique card identifier generated while new/add-on card issuance.
        required: true
        schema:
          maxLength: 36
          minLength: 36
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionLimitsDTO'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
      x-info:
        apiType: external
    post:
      tags:
      - Controls
      summary: Card Limits
      description: This API allows you to set card limits.
      operationId: SetCardLimits
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          maxLength: 36
          minLength: 36
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          maxLength: 36
          minLength: 36
          type: string
      - name: walletHashId
        in: path
        description: Unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          maxLength: 36
          minLength: 36
          type: string
      - name: cardHashId
        in: path
        description: Unique card identifier generated while new/add-on card issuance.
        required: true
        schema:
          maxLength: 36
          minLength: 36
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionLimitsDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiResponse2'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/limits:
    get:
      tags:
      - Controls
      summary: Limits For All Cards For A Customer
      description: This API allows you to fetch card level limits for all cards belonging
        to a customer.
      operationId: LimitsForAllCardsForACustomer
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          maxLength: 36
          minLength: 36
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          maxLength: 36
          minLength: 36
          type: string
      - name: walletHashId
        in: path
        description: Unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          maxLength: 36
          minLength: 36
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionWalletLimitsDTO'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
      x-info:
        apiType: external
  /api/v1/client/{clientHashId}/referenceRate:
    get:
      tags:
      - Cards Reference Data
      summary: Reference Exchange Rate
      description: This API allows you to get the reference exchange rate.
      operationId: ReferenceExchangeRate
      parameters:
      - name: cardScheme
        in: query
        description: >-
          This field accepts the card scheme provider name:

          Visa

          Mastercard
        required: true
        allowEmptyValue: false
        schema:
          type: string
      - name: clientHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
          example: '{{clientHashId}}'
      - name: fromAmount
        in: query
        description: From Amount also known as transaction amount that will be converted
          from the fromCurrency and to the toCurrency.
        required: true
        allowEmptyValue: false
        schema:
          type: number
          format: double
          default: 0
      - name: fromCurrency
        in: query
        description: This field contains the 3-letter [ISO-4217 currency code](/docs/currency-and-country-codes)
          of the transaction currency. Should be one of the applicable EEA currencies
          (EUR, BGN, HRK, CZK, DKK, HUF, PLN, RON, SEK, GBP, ISK, CHF and NOK).
        required: true
        allowEmptyValue: false
        schema:
          type: string
      - name: toCurrency
        in: query
        description: This field contains the 3-letter [ISO-4217 currency code](/docs/currency-and-country-codes)
          of the cardholder billing currency. Should be one of the applicable EEA
          currencies (EUR, BGN, HRK, CZK, DKK, HUF, PLN, RON, SEK, GBP, ISK, CHF and
          NOK)
        required: true
        allowEmptyValue: false
        schema:
          type: string
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferenceRateResponseDto'
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
      deprecated: false
      security:
      - default: []
      x-info:
        apiType: external
      x-wso2-application-security:
        optional: false
        security-types:
        - api_key
  /api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/fees:
    post:
      tags:
      - Customer Fees
      summary: Charge Fee
      description: "This API allows you to levy a custom fee.\n\n\u26A0\uFE0F **WARNING**\
        \  \nDue to regulatory requirements, using the Fee endpoint requires explicit\
        \ approval from Nium. Any fees charged to customers must be disclosed in the\
        \ client\u2019s terms and conditions and approved by Nium legal and compliance.\
        \ If you have any questions, please reach out to your Nium account manager\
        \ or [Nium Support](mailto:support@nium.com).\n"
      operationId: ChargeFee
      parameters:
      - name: clientHashId
        in: path
        description: Unique client identifier generated and shared before API handshake.
        required: true
        schema:
          type: string
      - name: customerHashId
        in: path
        description: Unique customer identifier generated on customer creation.
        required: true
        schema:
          type: string
      - name: walletHashId
        in: path
        description: Unique wallet identifier generated simultaneously with customer
          creation.
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomFeeRequestDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomFeeResponseDTO'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletApiError'
      x-info:
        apiType: external
  /api/v1/simulations/transactions/{systemReferenceNumber}/transition:
    post:
      parameters:
      - description: System Reference Number
        in: path
        name: systemReferenceNumber
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimulateStatusResponseDTO'
          description: OK
        '400':
          $ref: '#/components/responses/InvalidInput'
        '401':
          $ref: '#/components/responses/n1-simulationUnauthorized'
        '403':
          $ref: '#/components/responses/n1-simulationForbidden'
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimulateUnprocessableEntityErrorDTO'
              example:
                errors:
                - code: sim_invalid_system_reference_number
                  description: System Reference Number is Invalid
                - code: sim_invalid_next_status
                  description: Next Status allowed from current ACTION_REQUIRED is
                    RFI_REQUESTED
          description: Unprocessable Entity
        '500':
          $ref: '#/components/responses/n1-simulationInternalError'
      security:
      - default: []
      tags:
      - Payouts
      deprecated: false
      description: Transition the `status` of a transaction using the `nextStatus`
        field. For more information, see [Testing Nium](/docs/testing).
      operationId: simulateTransactionStatus
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimulateTransactionStatusRequestDTO'
            examples:
              EXPIRED:
                summary: EXPIRED
                description: Transition transaction status from SCHEDULED or AWAITING_FUNDS
                  to EXPIRED
                value:
                  nextStatus: EXPIRED
              RFI_REQUESTED:
                summary: RFI_REQUESTED
                description: Transition transaction status from ACTION_REQUIRED to
                  RFI_REQUESTED
                value:
                  nextStatus: RFI_REQUESTED
                  requestInfoFor: creditor_firstName
              COMPLIANCE_COMPLETED:
                summary: COMPLIANCE_COMPLETED
                description: Transition transaction status from RFI_RESPONDED to COMPLIANCE_COMPLETED
                value:
                  nextStatus: COMPLIANCE_COMPLETED
              REJECTED:
                summary: REJECTED
                description: Transition transaction status from RFI_RESPONDED to REJECTED
                value:
                  nextStatus: REJECTED
              PAID:
                summary: PAID
                description: Transition transaction status from SENT_TO_BANK or ERROR
                  or PAID to PAID, RETURN, ERROR
                value:
                  nextStatus: PAID
      x-info:
        apiType: external
  /api/v1/inward/payment/manual:
    post:
      parameters:
      - description: Enter a unique UUID value
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayinApiResponse2'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayinApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayinApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayinApiError'
          description: Internal Server Error
      tags:
      - Payin
      deprecated: false
      operationId: Simulatereceivepayment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InwardPaymentManualRequestDTO'
        description: inwardPaymentManualRequestDTO
        required: true
      summary: Simulate Receiving a Transaction
      x-info:
        apiType: external
  /api/v1/simulations/client/{clientHashId}/customer/{customerHashId}/fundingInstruments/{fundingInstrumentId}/updateStatus:
    post:
      parameters:
      - description: clientHashId
        in: path
        name: clientHashId
        required: true
        schema:
          type: string
      - description: customerHashId
        in: path
        name: customerHashId
        required: true
        schema:
          type: string
      - description: fundingInstrumentId
        in: path
        name: fundingInstrumentId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayinApiError'
          description: BadRequest
        '401':
          content:
            application/json:
              schema:
                type: string
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                type: string
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayinApiError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayinApiError'
          description: Internal Server Error
      tags:
      - Payin
      deprecated: false
      operationId: SimulateFundingInstrumentStatusUpdate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FundingInstrumentStatusUpdateRequestDTO'
        description: fundingInstrumentStatusUpdateRequestDTO
        required: true
      summary: Simulate Funding Instrument Status Update (Sandbox Testing)
      x-info:
        apiType: external
  /api/v1/simulations/client/{clientHashId}/customer/{customerHashId}/bankAccounts/{bankAccountId}/microDeposits:
    get:
      tags:
      - Customer
      summary: Fetch micro-deposit details
      description: This API is used to fetch the micro-deposit details that were sent
        to a linked bank account pending authentication for E2E testing.
      operationId: fetchMicroDepositDetails
      parameters:
      - name: clientHashId
        in: path
        description: Unique identifier of the client.
        required: true
        schema:
          type: string
          format: UUID
      - name: customerHashId
        in: path
        description: Unique identifier of the customer.
        required: true
        schema:
          type: string
          format: UUID
      - name: bankAccountId
        in: path
        description: Unique identifier of the linked bank account.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/BankAccountId'
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MicroDepositDetails'
              example:
                amounts:
                - 0.03
                - 0.32
        '401':
          description: Error response when the request is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/externalAccountServiceStandard401Error'
        '404':
          description: Error response when the requested resource is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/externalAccountServiceStandard404Error'
        '500':
          description: Error response when an internal error occurs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/externalAccountServiceStandard500Error'
      deprecated: false
      x-info:
        apiType: external
  /api/v1/simulations/onboard/{customerHashId}/transition:
    post:
      parameters:
      - description: Customer Hash Id
        in: path
        name: customerHashId
        required: true
        schema:
          type: string
      - description: Enter a unique UUID value.
        in: header
        name: x-request-id
        schema:
          type: string
          example: '{{$guid}}'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimulateStatusResponseDTO'
          description: OK
        '400':
          $ref: '#/components/responses/InvalidInput'
        '401':
          $ref: '#/components/responses/n1-simulationUnauthorized'
        '403':
          $ref: '#/components/responses/n1-simulationForbidden'
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimulateUnprocessableEntityErrorDTO'
              example:
                errors:
                - code: sim_invalid_customer_hashId
                  description: Customer Hash Id is Invalid
                - code: sim_invalid_next_status
                  description: Next Status allowed from current status ACTION_REQUIRED
                    is RFI_REQUESTED
          description: Unprocessable Entity
        '500':
          $ref: '#/components/responses/n1-simulationInternalError'
      security:
      - default: []
      tags:
      - Customer
      deprecated: false
      description: Transition the compliance status of a customer account's using
        the `nextStatus` field. For more information, see [Testing Nium](/docs/testing).
      operationId: simulateAccountComplianceStatus
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimulateAccountStatusRequestDTO'
            examples:
              RFI_REQUESTED:
                summary: RFI_REQUESTED
                description: Transition account compliance status from ACTION_REQUIRED
                  to RFI_REQUESTED
                value:
                  nextStatus: RFI_REQUESTED
                  requestInfoFor: firstName
              COMPLETED:
                summary: COMPLETED
                description: Transition account compliance status from RFI_RESPONDED
                  to COMPLETED
                value:
                  nextStatus: COMPLETED
              REJECT:
                summary: REJECT
                description: Transition account compliance status from RFI_RESPONDED
                  to REJECT
                value:
                  nextStatus: REJECT
      x-info:
        apiType: external
components:
  securitySchemes:
    default:
      in: header
      name: x-api-key
      type: apiKey
  schemas:
    ApplicationCommonResponse:
      type: object
      properties:
        applicationStatus:
          type: string
          description: application status of application
        message:
          type: string
        errorDetails:
          type: array
          items:
            $ref: '#/components/schemas/ErrorCodeMapping'
        errors:
          type: array
          items:
            type: string
    ErrorCodeMapping:
      type: object
      properties:
        code:
          type: string
        description:
          type: string
    CommonResponse:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        errorDetails:
          type: array
          items:
            $ref: '#/components/schemas/ErrorCodeMapping'
        errors:
          type: array
          items:
            type: string
    RegenerateUrlResponse:
      type: object
      properties:
        status:
          type: string
        redirectUrl:
          type: string
        expiryInMinutes:
          type: string
    NewErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/TypedErrorErrorCodes'
    TypedErrorErrorCodes:
      type: object
      properties:
        code:
          type: string
          enum:
          - INVALID_CLIENT_HASH_ID
          - INVALID_CUSTOMER_HASH_ID
          - INVALID_WALLET_HASH_ID
          - INVALID_CARD_HASH_ID
          - CARD_IS_PERMANENTLY_BLOCKED
          - CARD_EXPIRED
          - VALIDATION_ERROR
          - INVALID_INPUT
          - validation_error
          - issuance_limit_exceeded
          - not_applicable
          - internal_error
        description:
          type: string
        field:
          type: string
    Standard401Error:
      type: object
      properties:
        code:
          type: string
          enum:
          - unauthorized
        description:
          type: string
          enum:
          - Access Denied
    Standard403Error:
      type: object
      properties:
        code:
          type: string
          enum:
          - access_forbidden
        description:
          type: string
          enum:
          - Access to resource not allowed
    Standard500Error:
      type: object
      properties:
        code:
          type: string
          enum:
          - internal_error
          - external_dependent_system_failed
        description:
          type: string
          enum:
          - An internal error occurred
    ApiError:
      type: object
      properties:
        status:
          type: string
          description: Http status code of the response.
          example: 200 OK
          enum:
          - 100 CONTINUE
          - 101 SWITCHING_PROTOCOLS
          - 102 PROCESSING
          - 103 CHECKPOINT
          - 200 OK
          - 201 CREATED
          - 202 ACCEPTED
          - 203 NON_AUTHORITATIVE_INFORMATION
          - 204 NO_CONTENT
          - 205 RESET_CONTENT
          - 206 PARTIAL_CONTENT
          - 207 MULTI_STATUS
          - 208 ALREADY_REPORTED
          - 226 IM_USED
          - 300 MULTIPLE_CHOICES
          - 301 MOVED_PERMANENTLY
          - 302 FOUND
          - 302 MOVED_TEMPORARILY
          - 303 SEE_OTHER
          - 304 NOT_MODIFIED
          - 305 USE_PROXY
          - 307 TEMPORARY_REDIRECT
          - 308 PERMANENT_REDIRECT
          - 400 BAD_REQUEST
          - 401 UNAUTHORIZED
          - 402 PAYMENT_REQUIRED
          - 403 FORBIDDEN
          - 404 NOT_FOUND
          - 405 METHOD_NOT_ALLOWED
          - 406 NOT_ACCEPTABLE
          - 407 PROXY_AUTHENTICATION_REQUIRED
          - 408 REQUEST_TIMEOUT
          - 409 CONFLICT
          - 410 GONE
          - 411 LENGTH_REQUIRED
          - 412 PRECONDITION_FAILED
          - 413 PAYLOAD_TOO_LARGE
          - 413 REQUEST_ENTITY_TOO_LARGE
          - 414 URI_TOO_LONG
          - 414 REQUEST_URI_TOO_LONG
          - 415 UNSUPPORTED_MEDIA_TYPE
          - 416 REQUESTED_RANGE_NOT_SATISFIABLE
          - 417 EXPECTATION_FAILED
          - 418 I_AM_A_TEAPOT
          - 419 INSUFFICIENT_SPACE_ON_RESOURCE
          - 420 METHOD_FAILURE
          - 421 DESTINATION_LOCKED
          - 422 UNPROCESSABLE_ENTITY
          - 423 LOCKED
          - 424 FAILED_DEPENDENCY
          - 425 TOO_EARLY
          - 426 UPGRADE_REQUIRED
          - 428 PRECONDITION_REQUIRED
          - 429 TOO_MANY_REQUESTS
          - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
          - 451 UNAVAILABLE_FOR_LEGAL_REASONS
          - 500 INTERNAL_SERVER_ERROR
          - 501 NOT_IMPLEMENTED
          - 502 BAD_GATEWAY
          - 503 SERVICE_UNAVAILABLE
          - 504 GATEWAY_TIMEOUT
          - 505 HTTP_VERSION_NOT_SUPPORTED
          - 506 VARIANT_ALSO_NEGOTIATES
          - 507 INSUFFICIENT_STORAGE
          - 508 LOOP_DETECTED
          - 509 BANDWIDTH_LIMIT_EXCEEDED
          - 510 NOT_EXTENDED
          - 511 NETWORK_AUTHENTICATION_REQUIRED
        message:
          type: string
          description: Response message.
          example: Transaction business updated successfully.
        errors:
          type: array
          description: Error description if any.
          example:
          - field1 is not valid
          - field2 is not valid
          items:
            type: string
            description: List of errors occurred
            example: '["field1 is not valid","field2 is not valid"]'
    LockStatusUpdateRequestDTO:
      required:
      - action
      type: object
      properties:
        action:
          type: string
          description: >-
            The field accepts the lock action to be applied on the card.The possible
            values are:

            lock

            unlock
          example: lock
    LockStatusUpdateResponseDTO:
      type: object
      properties:
        status:
          type: string
          description: This field will contain the status of the request after processing.
            It shall be success if the lock/unlock is successful.
          example: Success
        message:
          type: string
          description: This field will return a success message if the request processes
            successfully else this will return an error message.
    ApiResponse2:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
    CardsAddress:
      type: object
      properties:
        addressLine1:
          maxLength: 40
          minLength: 0
          pattern: ^[A-Za-z0-9.,'#%@:&/ -]+$
          type: string
          description: Address line1 field captures the first line of the address,
            typically including house number, street name, and any unit/apartment
            number
          example: 20 W 34th St.
        addressLine2:
          maxLength: 40
          minLength: 0
          pattern: ^(|[A-Za-z0-9.,'#%@:&/ -]+)$
          type: string
          description: Address line2 is an optional field for adding extra details
            to the address.
          example: Suite 200
        city:
          maxLength: 20
          minLength: 0
          type: string
          description: City field is where the city or town name of the address
          example: New York
        landmark:
          maxLength: 40
          minLength: 0
          type: string
          description: Landmark is an optional field used to specify a nearby recognizable
            location or point of reference to assist
          example: Empire State Building
        country:
          type: string
          description: Country is two-letter ISO2 country code of the address
          example: SG
        state:
          maxLength: 30
          minLength: 0
          type: string
          description: State field is where the name of the state, province, or region
            should be entered for the address
          example: New York
        postCode:
          maxLength: 10
          minLength: 0
          type: string
          description: Post code field is where the postal code or ZIP code of the
            address
          example: '10001'
      description: 'Delivery address details, mandatory fields : addressLine1, postCode,
        city, country'
    ActivateCardResponseDTO:
      type: object
      properties:
        status:
          type: string
          description: This field shows the status of the activation request.
          example: Active
    AddCardRequestV2:
      required:
      - cardExpiry
      - cardProductId
      - cardType
      - plasticId
      type: object
      properties:
        cardProductId:
          type: string
          description: Pre-defined product Id, defined at NIUM and communicated to
            client for card issuance.
          format: uuid
          example: '100'
        cardType:
          type: string
          description: >-
            This field accepts the card type to be issued. The acceptable values are:

            " + "PHY: This value is used to issue a physical card

            " + "VIR: This value is used to issue a virtual card

            " + "VIRUP2PHY: This value is used to issue a virtual upgrade to physical
            card
          example: VIR
        cardExpiry:
          type: string
          description: Expiry date to be set for virtual and virtual physical cards.
            For physical cards do not send this field. This field is in MMYY format.
            For virtual cards, the last acceptable date is the year-end of the 5th
            year from now. Card will be valid till the last day of the month and year
            of expiry.
          example: '1122'
        nameOnCard:
          maxLength: 26
          minLength: 0
          type: string
          description: >-
            This field can be used to print the customer name. The value sent in this
            field will be printed on the card.If this field is left empty, line 1
            will not be printed on the card.

            This field accepts alphanumeric characters along with space(s)

            The maximum character limit is 26.
          example: John Doe
        additionalLine:
          maxLength: 26
          minLength: 0
          type: string
          description: "This field can be used to send the company name or employeeID.\
            \ Anything sent in this field will be printed on the card. \nThis field\
            \ accepts alphanumeric characters along with space(s).\nThe maximum character\
            \ limit is 26."
          example: John Doe
        delivery:
          $ref: '#/components/schemas/CardsAddress'
        email:
          type: string
          description: Email of the card holder.
          example: example@domain.com
        countryCode:
          pattern: '[A-Z]{2}'
          type: string
          description: Country code of recipient's phone number accepted in [2-letter
            ISO Alpha-2 country code](/docs/currency-and-country-codes).
          example: '01'
        mobile:
          maxLength: 20
          minLength: 6
          type: string
          description: Mobile field is where the recipient's mobile phone number.
          example: '9876543210'
        issuanceMode:
          type: string
          description: >-
            This field is only required for physical cards(PHY) mode of delivery of
            a card. Possible values are:

            NORMAL_DELIVERY_LOCAL

            EXPRESS_DELIVERY_LOCAL

            INTERNATIONAL_DELIVERY
          example: NORMAL_DELIVERY_LOCAL
        plasticId:
          maxLength: 10
          minLength: 0
          type: string
          description: Pre-defined plastic Id defined at NIUM and communicated to
            client. It is used to determine the card design
          example: '100100'
        childCustomerHashId:
          type: string
          description: Unique ID for an individual customer linked to a parent-level
            corporate customer. Used to associate and track the child customer within
            a corporate customer's program.
          example: dcfe0a79-9386-4b50-a1e1-7299f6bfb0c0
        additionalInfo:
          type: object
          additionalProperties:
            type: string
            description: This field accepts additional information in form of map
              with key value pairs as string.
          description: This field accepts additional information in form of map with
            key value pairs as string.
    AddCardV2ResponseDTO:
      type: object
      properties:
        cardHashId:
          type: string
          description: Unique card identifier generated while new/add-on card issuance.
          format: uuid
          example: dd0a1721-2821-48fc-bbce-6c737bc47174
        cardActivationStatus:
          type: string
          description: Card activation status values are VIRTUAL_ACTIVE and INACTIVE
          example: VIRTUAL_ACTIVE
    UpdateContactInfoRequestDTO:
      type: object
      properties:
        email:
          maxLength: 60
          minLength: 0
          type: string
          description: Card holder Email
          example: example@mail.com
        countryCode:
          maxLength: 2
          minLength: 2
          type: string
          description: Country code for mobile number in [ISO Alpha-2](/docs/currency-and-country-codes)
            format.
          example: SG
        mobile:
          pattern: \d{0,30}
          type: string
          description: Card holder mobile number
          example: '9876543210'
        delivery:
          $ref: '#/components/schemas/CardsAddress'
        nameOnCard:
          pattern: ^[a-zA-Z\s]{1,26}$
          type: string
          description: >-
            This field can be used to print the customer name. The value sent in this
            field will be updated on the card.If this field is left empty, line 1
            will not be printed on the card.

            This field accepts alphanumeric characters along with space(s)

            The maximum character limit is 26.
          example: John Doe
    PinUpdateRequestDTOV2:
      required:
      - pinBlock
      type: object
      properties:
        pinBlock:
          type: string
          description: This field accepts RSA encrypted pin block.
          example: AIclvRluh..
    PinUpdateResponseDTO:
      type: object
      properties:
        status:
          type: string
          description: This field will contain the status of the request after processing.
            It shall be success if the pin set/change is successful.
          example: success
    BlockAndReplaceCardRequestDTO:
      required:
      - reason
      - replaceCard
      type: object
      properties:
        reason:
          type: string
          description: >-
            This field accepts the reason for card block. The possible values are:

            fraud

            lost

            stolen

            damaged
          example: fraud
          enum:
          - fraud, lost, stolen, damaged
        replaceCard:
          type: boolean
          description: A Flag that specifies whether to replace card or not
          example: true
        plasticId:
          type: string
          description: Pre-defined plastic Id defined at NIUM and communicated to
            client. It is used to determine the card design
          example: '100100'
        cardExpiry:
          type: string
          description: The expiry date is applicable only for Virtual cards and not
            applicable for physical cards. This field is in MMYY format. For Virtual
            cards, the expiry date can be a maximum of 5 years from when the API is
            used.
          example: '1122'
        useCurrentAddress:
          type: boolean
          description: Boolean "useCurrentAddress" specifies whether to use existing
            address in the system or new address passed in address object
          example: false
        delivery:
          $ref: '#/components/schemas/CardsAddress'
        email:
          type: string
          description: Card holder Email
          example: example@mail.com
        countryCode:
          maxLength: 2
          minLength: 2
          type: string
          description: Country is two-letter ISO2 country code for mobile
          example: GB
        mobile:
          pattern: \d{0,30}
          type: string
          description: Mobile field is where the recipient's mobile phone number.
            This field is mandatory when useBillingAddress is true
          example: '9876543210'
      description: A card can be blocked and replaced using the Block And Replace
        Card API
    BlockAndReplaceCardResponseDTO:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        newCardHashId:
          type: string
        maskedCardNumber:
          type: string
    ActivateCardRequestV2DTO:
      required:
      - activationCode
      type: object
      properties:
        activationCode:
          pattern: \d{8}$
          type: string
          description: This field can be used to send the activation code.
          example: '90090012'
    ActivateCardResponseV2DTO:
      type: object
      properties:
        status:
          type: string
          description: This field contains the status of the activation request.
          example: Active
        message:
          type: string
          description: This field contains the status description of the activation
            request.
          example: Card Activated successfully
    OobCallbackRequestDTO:
      required:
      - authTransactionId
      - referenceNumber
      - statusCode
      type: object
      properties:
        authTransactionId:
          type: string
          description: This field represents the unique authorization ID of the transaction
            received during the OOB authentication.
        referenceNumber:
          type: string
          description: A reference number is a unique ID associated with the OOB request
            from your system.
        statusCode:
          type: string
          description: "The OOB authentication status code indicated if the transaction\
            \ is approved or declined. The allowed values are: 001 \u2014 OOB authentication\
            \ approved, 002 \u2014 OOB authentication declined."
          enum:
          - 001, 002
        message:
          type: string
          description: An optional field to attach a message associated with the authentication.
    BlockAndReplaceStatus:
      type: object
      properties:
        blockReason:
          type: string
          description: This field contains the card block reason.
          example: cardLost
        replacedOn:
          type: string
          description: This field contains the card replacement date
          example: '2022-01-01'
      description: Card block/replace status
    CardDetails:
      type: object
      properties:
        cardHashId:
          type: string
          description: This field contains the unique card identifier generated while
            new/add-on card issuance.
          format: uuid
          example: dcfe0a79-9386-4b50-a1e1-7299f6bfb0c0
        details:
          $ref: '#/components/schemas/CardInfo'
        embossing:
          $ref: '#/components/schemas/EmbossingDetails'
        lastUpdatedOn:
          type: string
          description: This field contains the last updated timestamp
          example: '2021-03-12 04:16:46'
        blockAndReplaceStatus:
          $ref: '#/components/schemas/BlockAndReplaceStatus'
        demographics:
          $ref: '#/components/schemas/Demographics'
        deliveredTo:
          $ref: '#/components/schemas/CardsAddress'
        tokens:
          type: array
          description: This array contains the token details.
          items:
            $ref: '#/components/schemas/CardTokensDTO'
        walletHashId:
          type: string
    CardInfo:
      type: object
      properties:
        cardProductId:
          type: string
          description: Pre-defined product Id, defined at NIUM and communicated to
            client for card issuance.
          example: '100'
        plasticId:
          type: string
          description: This field contains the pre-defined plastic Id which is used
            to determine card design.
          example: '750065001'
        regionCode:
          type: string
          description: This field contains the 2-letter [region code](/docs/currency-and-country-codes)
            for the card.
          example: AU
        maskedCardNumber:
          type: string
          description: This field contains the 16-digit masked card number in format
            1234-56xx-xxxx-3456.
          example: 4572-50xx-xxxx-0123
        proxyNumber:
          type: string
          description: This field contains the reference number for the card.
          example: '0007570020000010123'
        cardType:
          type: string
          description: This field contains the issued card type.
          example: GPR_VIR
        issuanceType:
          type: string
          description: This field contains the type of the card issued.
          example: primaryCard
        cardStatus:
          type: string
          description: This field contains the activation status of the card.
          example: VIRTUAL_ACTIVE
          enum:
          - INACTIVE,ACTIVE,VIRTUAL_ACTIVE,TEMP_BLOCK,P_BLOCK
        childCustomerHashId:
          type: string
          description: Unique ID for an individual customer linked to a parent-level
            corporate customer. Used to associate and track the child customer within
            a corporate customer's program.
      description: Card details
    CardTokensDTO:
      type: object
      properties:
        providerType:
          type: string
          description: >-
            This field contains the wallet provider.It can contain two values -

            googlePay

            applePay
          example: applePay
          enum:
          - googlePay,applePay,samsungPay,unknown
        tokenReferenceNumber:
          type: string
          description: This field contains the reference number for the token provided
            against the provisioning request.
          example: DNITHE400000000000000037
        tokenNumber:
          type: string
          description: This field contains the token value created for the provisioned
            card.
          example: 0004611350190078050
        tokenRequesterId:
          type: string
          description: This field contains the identifier for the provisioning service.
          example: 40010030273
          enum:
          - googlePay,applePay
        deviceId:
          type: string
          description: This field contains the unique ID of the device on which the
            card is provisioned.
          example: 04312E7B342C80014328036811932950DA075B1C4DD45672
        deviceType:
          type: string
          description: This field contains the device type in numeric format used
            for provisioning.
          example: '01'
        status:
          type: string
          description: This field contains the token status.
          example: DEACTIVATED
          enum:
          - ACTIVE,SUSPENDED,DEACTIVATED,UNKNOWN
        createdAt:
          type: string
          description: This field contains the date and time of token creation in
            the format - YYYY-MM-DD HH:mm:ss.
          example: '2021-05-28 06:06:11'
        updatedAt:
          type: string
          description: This field contains the date and time of token update in the
            format - YYYY-MM-DD HH:mm:ss.
          example: '2021-05-28 06:24:33'
      description: This array contains the token details.
    Demographics:
      type: object
      properties:
        firstName:
          type: string
          description: This field contains the first name of the card holder.
          example: John
        middleName:
          type: string
          description: This field contains the middle name of the card holder.
          example: W
        lastName:
          type: string
          description: This field contains the last name of the card holder.
          example: Smith
        email:
          type: string
          description: This field contains the email ID of the card holder.
          example: johnsmith@xyzmail.com
        countryCode:
          type: string
          description: This field contains the 2-letter [ISO-2 country code](/docs/currency-and-country-codes)
            for identifying the country prefix to a mobile number.
          example: AU
        mobile:
          type: string
          description: This field contains the mobile number of the card holder--digits
            only--without the country code.
          example: '0412345111'
        currentDeliveryAddress:
          $ref: '#/components/schemas/CardsAddress'
      description: Demographic details
    EmbossingDetails:
      type: object
      properties:
        nameOnCard:
          type: string
          description: This field contains the printed name on card.
          example: John Doe
        additionalLine:
          type: string
          description: This field contains the printed additional line on card.
          example: John Doe
        issuanceMode:
          type: string
          description: This field contains the mode of delivery of a card.
          example: NORMAL_DELIVERY_LOCAL
        createdOn:
          type: string
          description: This field contains the card created date
          example: '2021-03-12 04:16:46'
        processedOn:
          type: string
          description: This field contains the card processed date
          example: '2021-03-12 04:16:46'
        printedOn:
          type: string
          description: This field contains the card printed date
        dispatchedOn:
          type: string
          description: This field contains the card dispatched date
        dispatchAWB:
          type: string
          description: This field contains the card dispatched airway bill
      description: Embossing details
    PageResponseCardDetails:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/CardDetails'
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
    OOBCallbackRequestDTO:
      required:
      - authTransactionId
      - referenceNumber
      - statusCode
      type: object
      properties:
        authTransactionId:
          type: string
        referenceNumber:
          type: string
        statusCode:
          type: string
          enum:
          - SSS000
          - VCL001
          - VCL002
          - VCU001
          - VCU601
          - VCU602
          - VCU603
          - VCU701
          - VWA001
          - VCF001
          - VCT001
          - VCD001
          - VII001
          - VII002
          - UAS001
          - UAS002
          - UAS003
          - UAS004
          - ISE999
        status:
          type: string
          enum:
          - ACTIVE
          - INACTIVE
          - BLOCKED
          - P_BLOCK
          - SUSPEND
          - PENDING
          - APPROVED
          - REJECTED
          - UPLOADED
          - REVIEWED
          - FAILED
          - SUCCESS
          - ASSIGNED
          - UNASSIGNED
          - TEMP_BLOCK
          - All
          - ARCHIVED
          - VIRTUAL_ACTIVE
          - CLOSED
          - RENEWED
          - DAMAGED
          - DO_NOT_HONOUR
          - LOST_CARD
          - REFER_TO_ISSUER
          - CARD_PIN_BLOCKED
          - CARD_VOIDED
          - CARD_DESTROYED
          - STOLEN_CARD
          - CARD_EXPIRED
          - FRAUD
          - TEMP_BLOCK
    OOBCallbackResponseDTO:
      type: object
      properties:
        status:
          type: string
          enum:
          - ACTIVE
          - INACTIVE
          - BLOCKED
          - P_BLOCK
          - SUSPEND
          - PENDING
          - APPROVED
          - REJECTED
          - UPLOADED
          - REVIEWED
          - FAILED
          - SUCCESS
          - ASSIGNED
          - UNASSIGNED
          - TEMP_BLOCK
          - All
          - ARCHIVED
          - VIRTUAL_ACTIVE
          - CLOSED
          - RENEWED
          - DAMAGED
          - DO_NOT_HONOUR
          - LOST_CARD
          - REFER_TO_ISSUER
          - CARD_PIN_BLOCKED
          - CARD_VOIDED
          - CARD_DESTROYED
          - STOLEN_CARD
          - CARD_EXPIRED
          - FRAUD
          - TEMP_BLOCK
    AddCardRequest:
      required:
      - cardExpiry
      - cardFeeCurrencyCode
      - cardIssuanceAction
      - cardType
      - logoIdentifier
      - plasticId
      type: object
      properties:
        logoIdentifier:
          type: string
          description: Pre-defined logo Id, defined at NIUM and communicated to client
            for card issuance.
          format: uuid
          example: '100'
        plasticId:
          maxLength: 10
          minLength: 0
          type: string
          description: Pre-defined plastic Id defined at Nium and communicated to
            client. It is used to determine the card design
          example: '100100'
        cardType:
          type: string
          description: >-
            This field accepts the card type to be issued. The acceptable values are:

            GPR_PHY: This value is used to issue a physical card

            GPR_VIR: This value is used to issue a virtual card

            GPR_VIR_UP2PHY: This value is used to issue a virtual upgrade to physical
            card
          example: GPR_VIR
          enum:
          - GPR_VIR
          - GPR_PHY
          - GPR_VIR_UP2PHY
          - VIR
          - PHY
          - VIRUP2PHY
        cardIssuanceAction:
          type: string
          description: >-
            This field determines if the card issued is primary or add-on. The possible
            values are:

            NEW(for a new card)

            ADD_ON(for add on card)

            Note that a customer may have only one primary Physical(GPR_PHY) card,
            one primary Virtual(GPR_VIR) and only one primary virtual upgrade to physical
            card(GPR_VIR_UP2PHY). Any further cards can be issued as add-on cards.
          example: NEW
        cardFeeCurrencyCode:
          maxLength: 3
          minLength: 3
          type: string
          description: This field contains the 3-letter [ISO-4217 currency code](/docs/currency-and-country-codes)
            for one of the opted currencies in which the card issuance fee is to be
            charged
          example: SGD
        cardExpiry:
          maxLength: 4
          minLength: 0
          type: string
          description: The expiry date is applicable only for Virtual cards and not
            applicable for physical cards. This field is in MMYY format. For Virtual
            cards, the expiry date can be a maximum of 5 years from when the API is
            used.
          example: '1122'
        embossingLine1:
          maxLength: 26
          minLength: 1
          type: string
          description: >-
            This field can be used to print the customer name. The value sent in this
            field will be printed on the card.If this field is left empty, line 1
            will not be printed on the card.

            This field accepts alphanumeric characters along with space(s)

            The maximum character limit is 26.
          example: John Doe
        embossingLine2:
          maxLength: 26
          minLength: 1
          type: string
          description: "This field can be used to send the company name or employeeID.\
            \ Anything sent in this field will be printed on the card. \nThis field\
            \ accepts alphanumeric characters along with space(s).\nThe maximum character\
            \ limit is 26."
          example: John Doe
        issuanceMode:
          type: string
          description: >-
            This field is only required for physical cards(GPR_PHY) mode of delivery
            of a card. Possible values are:

            NORMAL_DELIVERY_LOCAL

            EXPRESS_DELIVERY_LOCAL

            INTERNATIONAL_DELIVERY
          example: NORMAL_DELIVERY_LOCAL
        demogOverridden:
          type: boolean
          description: >-
            This flag specifies if the demogOverriden is true or false

            The default value of demogOverridden is false. It should always be sent
            as false for issuing a primary card.
          example: false
        countryCode:
          maxLength: 2
          minLength: 2
          type: string
          description: This field accepts the [2-letter ISO Alpha-2 country code](/docs/currency-and-country-codes)
            for the add-on cardholder. This field is mandatory when demogOverridden
            is true.
          example: IN
        mobile:
          maxLength: 20
          minLength: 6
          type: string
          description: This field accepts the mobile number for the add-on cardholder.
            This field is mandatory when demogOverridden is true
        email:
          maxLength: 60
          minLength: 4
          type: string
          description: This field accepts the email ID for the add-on cardholder.
            This field is mandatory when demogOverridden is true
          example: example@gmail.com
        firstName:
          maxLength: 40
          minLength: 1
          type: string
          description: This field accepts the firstname for the add-on cardholder.
            This field is mandatory when demogOverridden is true
        lastName:
          maxLength: 40
          minLength: 1
          type: string
          description: This field accepts the lastname for the add-on cardholder.
            This field is mandatory when demogOverridden is true
        middleName:
          maxLength: 40
          minLength: 1
          type: string
          description: The middle name of the customer
        cardHashId:
          type: string
          description: This is the cardHashId of the primary(NEW) card which is already
            issued. It is mandatory to send this value when ADD_ON card is being issued.
            This field is not needed for NEW card
          format: uuid
          example: fadf2ddd-b726-46bf-3c0a-965b096478f4
    AddCardResponseDTO:
      type: object
      properties:
        cardHashId:
          type: string
          description: Unique card identifier generated while new/add-on card issuance.
          format: uuid
          example: dd0a1721-2821-48fc-bbce-6c737bc47174
        cardActivationStatus:
          type: string
          description: Card activation status values are VIRTUAL_ACTIVE and INACTIVE
          example: VIRTUAL_ACTIVE
        maskedCardNumber:
          type: string
          description: This is the 16-digit masked card number in format 1234-56xx-xxxx-3456
          example: 4611-35xx-xxxx-9772
    CardWidgetTokenRequestDTO:
      type: object
      properties:
        clientDomain:
          type: string
          description: This field contains the domain name where the widget needs
            to be embedded
          example: http://localhost:8078/
    CardWidgetTokenResponse:
      type: object
      properties:
        widgetUrl:
          type: string
    ReplaceCardRequest:
      required:
      - cardFeeCurrencyCode
      type: object
      properties:
        cardExpiry:
          type: string
          description: The expiry date is applicable only for Virtual cards and not
            applicable for physical cards. This field is in MMYY format. For Virtual
            cards, the expiry date can be a maximum of 5 years from when the API is
            used.
          example: '1124'
        cardFeeCurrencyCode:
          maxLength: 3
          minLength: 3
          type: string
          description: This field accepts 3-letter [ISO-4217 currency code](/docs/currency-and-country-codes)
            in which the client wants to levy the card issuance fee.
          example: SGD
        plasticId:
          type: string
      description: A card can be replaced using the Replace Card API only if it is
        permanently blocked. A permanently blocked card cannot be replaced on the
        same date as date of issuance. For example, a customer issued a card today
        and request to block the card permanently, on the same day. However, a customer
        may not call the Replace Card API to issue a replacement on the same date.
    RenewCardRequest:
      type: object
      properties:
        cardExpiry:
          type: string
          description: The expiry date is applicable only for Virtual cards and not
            applicable for physical cards. This field is in MMYY format. For Virtual
            cards, the expiry date can be a maximum of 5 years from when the API is
            used.
          example: '1126'
        useCurrentAddress:
          type: boolean
          description: "Flag indicates if the address details for the renewed card\
            \ must be current address on file or a new address.\nThis flag should\
            \ only be used for physical cards. \nSkip this parameter for virtual cards.\
            \ \n **Note**: `delivery` field is mandatory if the value for this flag\
            \ is true"
          example: false
        delivery:
          $ref: '#/components/schemas/CardsAddress'
        email:
          maxLength: 60
          minLength: 0
          type: string
          description: Email Address to be mapped to the renewed card.
          example: renewal@abccorp.com
        countryCode:
          type: string
          description: Mobile country code to be mapped to the renewed card, it is
            two-letter ISO2 country code.
          example: SG
        mobile:
          pattern: \d{0,30}
          type: string
          description: Mobile number to be mapped to the renewed card
          example: '1234567890'
      description: A card can be renewed using the Renew Card API on or before 45
        days from the date of expiry
    PinUpdateRequestDTO:
      required:
      - pinBlock
      type: object
      properties:
        pinBlock:
          type: string
          description: This field accepts the base64 encoded pin block.
          example: MTA0NzM=
    ConvertCardRequestDTO:
      required:
      - plasticId
      - useCurrentAddress
      type: object
      properties:
        useCurrentAddress:
          type: boolean
          description: Should the delivery address be changed or not?
          example: false
        plasticId:
          maxLength: 10
          minLength: 0
          type: string
          description: Pre-defined plastic Id defined at NIUM and communicated to
            client. It is used to determine the card design
          example: '100100'
        email:
          maxLength: 60
          minLength: 4
          type: string
          description: This field accepts the email ID for the add-on cardholder.
            This field is mandatory when demogOverridden is true
          example: example@gmail.com
        countryCode:
          maxLength: 2
          minLength: 2
          type: string
          description: Country is two-letter ISO2 country code of the address
          example: NL
        mobile:
          pattern: \d{0,30}
          type: string
          description: Mobile field is where the recipient's mobile phone number.
            This field is mandatory when useBillingAddress is true
          example: '9876543210'
        delivery:
          $ref: '#/components/schemas/CardsAddress'
      description: Convert card request payload
    ConvertCardResponseDTO:
      type: object
      properties:
        cardActivationStatus:
          type: string
          description: Activation Status of the Card
          example: virtual_active
    BlockCodeDTO:
      required:
      - blockAction
      type: object
      properties:
        reason:
          type: string
          description: >-
            This field accepts the reason for card block. It is required only in case
            of a permanent block [blockAction = permanentBlock]. Otherwise, it is
            not necessary.The possible values are:

            fraud

            cardLost

            cardStolen

            damaged
          example: fraud
          enum:
          - fraud, cardLost, cardStolen,damaged
        blockAction:
          type: string
          description: >-
            The field accepts the block action to be applied on the card.The possible
            values are:

            permanentBlock

            temporaryBlock

            unblock
          example: permanentBlock
        remarks:
          maxLength: 255
          minLength: 0
          type: string
        comments:
          type: string
    BlockCodeCardResponseDTO:
      type: object
      properties:
        status:
          type: string
          description: This field will contain the status of the request after processing.
            It shall be success if the block/unblock is successful.
          example: Success
    PasscodeRequestDTO:
      required:
      - passcode
      type: object
      properties:
        passcode:
          type: string
          description: This field contains Base64 encoded passcode.
          example: MTIzNDU2
    PasscodeResponseDTO:
      type: object
      properties:
        status:
          type: string
          description: HTTP response
          example: SUCCESS
    AssignCardDTO:
      required:
      - accountNumber
      - cardNumberLast4Digits
      type: object
      properties:
        accountNumber:
          maxLength: 19
          minLength: 9
          type: string
          description: >-
            This field accepts the 19-digit account number (also known as card proxy
            number) printed on the non-personalized physical card. Alternately, the
            leading zeros may also be ignored in which case only the last 16-digits
            are required.

            For example, account number can be entered as 0007560010000160875, 007560010000160875,
            07560010000160875 or 7560010000160875
        cardNumberLast4Digits:
          maxLength: 4
          minLength: 4
          type: string
          description: This field accepts the last 4 digit of the card number
          example: '2197'
        childCustomerHashId:
          type: string
          description: Unique ID for an individual customer linked to a parent-level
            corporate customer. Used to associate and track the child customer within
            a corporate customer's program.
          example: 123e4567-e89b-12d3-a456-426614174000
    CardAssignResponseDTO:
      type: object
      properties:
        cardHashId:
          type: string
          description: Unique card identifier generated while new/add-on card issuance.
          format: uuid
          example: c2ed4095-f342-b7e6-3e8b-d83e8241ec86
        cardActivationStatus:
          type: string
          description: This field contains the card activation status. The values
            are VIRTUAL_ACTIVE and INACTIVE. In case of Assign Card flow, expected
            status is INACTIVE.
          example: INACTIVE
          enum:
          - VIRTUAL_ACTIVE,INACTIVE
        maskedCardNumber:
          type: string
          description: This field contains the 16-digit masked card number in format
            1234-56xx-xxxx-3456.
          example: xxxxxxxxxxxx0830
    RetrieveCardDetailsResponseDTO:
      type: object
      properties:
        cvv:
          type: string
          description: This field contains the base64 encoded 3-digit CVV for the
            card.
          example: NjAx
        expiry:
          type: string
          description: This field contains the base64 encoded expiry date of the card
            in MM/YY format.
          example: MjYwMQ==
        unMaskedCardNumber:
          type: string
          description: This field contains the complete 16 digit card number in base64
            encoded format.
          example: NDYxMTk5MDM0MzU3ODEwNQ==
    FetchPinResponseDTOV2:
      type: object
      properties:
        pin:
          type: string
          description: This field contains the four digit pin in RSA encrypted format
            for the card.
          example: xCArZhNVpVvCl7YDl+bbWufoMIHgdl6a4Wl1Vk7wENXuEWDWmU4irYIkLi7k9wv1SuKy/IJiDLC8SxEW+9evyQ==
    CardResponseDTO:
      type: object
      properties:
        cardHashId:
          type: string
          description: This field contains the unique card identifier generated while
            new/add-on card issuance.
          format: uuid
          example: dcfe0a79-9386-4b50-a1e1-7299f6bfb0c0
        cardType:
          type: string
          description: >-
            This field contains the card type to be issued. The acceptable values
            are:

            GPR_PHY: This value is used to issue a physical card.

            GPR_VIR: This value is used to issue a virtual card.

            GPR_VIR_UP2PHY: This value is used to issue a virtual upgrade to physical
            card.
          example: GPR_VIR
        cardStatus:
          type: string
          description: This field contains the activation status of the card.
          example: VIRTUAL_ACTIVE
          enum:
          - INACTIVE,ACTIVE,VIRTUAL_ACTIVE,TEMP_BLOCK,P_BLOCK
        maskedCardNumber:
          type: string
          description: This field contains the 16-digit masked card number in format
            1234-56xx-xxxx-3456.
          example: 4572-50xx-xxxx-0123
        proxyNumber:
          type: string
          description: This field contains the reference number for the card.
          example: '0007570020000010123'
        logoId:
          type: string
          description: This field contains the pre-defined logo for card issuance.
          example: '177'
        plasticId:
          type: string
          description: This field contains the pre-defined plastic ID which is used
            to determine card design.
          example: '750065001'
        regionCode:
          type: string
          description: This field contains the 2-letter [region code](/docs/currency-and-country-codes)
            for the card.
          example: AU
        blockReason:
          type: string
          description: This field contains the reason for card block.
          example: fraud
          enum:
          - fraud,cardLost,cardStolen,damaged
        replacedOn:
          type: string
          description: This field contains the timestamp when the card was replaced,
            otherwise null.
          example: 'null'
        issuanceMode:
          type: string
          description: This field contains the mode of delivery of a card.
          example: NORMAL_DELIVERY_LOCAL
          enum:
          - NORMAL_DELIVERY_LOCAL,EXPRESS_DELIVERY_LOCAL,INTERNATIONAL_DELIVERY
        issuanceType:
          type: string
          description: This field contains the type of the card issued.The values
            can be primaryCard, additionalCard, or replaceCard.
          example: primaryCard
        embossingLine1:
          type: string
          description: This field contains the printed name on line 1.
          example: John Smith
        embossingLine2:
          type: string
          description: This field contains the printed name on line 2.
        firstName:
          type: string
          description: This field contains the first name of the card holder.
          example: John
        middleName:
          type: string
          description: This field contains the middle name of the card holder.
          example: W
        lastName:
          type: string
          description: This field contains the last name of the card holder.
          example: Smith
        email:
          type: string
          description: This field contains the email ID of the card holder.
          example: johnsmith@xyzmail.com
        countryCode:
          type: string
          description: This field contains the 2-letter [ISO-2 country code](/docs/currency-and-country-codes)
            for identifying the country prefix to a mobile number.
          example: AU
        mobile:
          type: string
          description: This field contains the mobile number of the card holder--digits
            only--without the country code.
          example: '0412345111'
        demogOverridden:
          type: boolean
          description: This field is required in case of ADD_ON cards. If sent as
            false, the card shall be issued in the name of the customer(primary card
            holder). If sent as true, the card shall be issued in the name of the
            add-on card holder whose full details need to be provided.
          example: false
        createdAt:
          type: string
          description: This field contains the date and time of card creation
          example: '2021-03-12 04:16:46'
        updatedAt:
          type: string
          description: This field contains the date and time of card updation
          example: '2021-03-12 04:16:46'
        tokens:
          type: array
          description: This array contains the token details.
          items:
            $ref: '#/components/schemas/CardTokensDTO'
    UnmaskCardResponseDTO:
      type: object
      properties:
        unMaskedCardNumber:
          type: string
          description: This field contains the complete 16 digit card number in plain
            text.
          example: '4611350100002726'
    ShowSecurityDetailsResponseDTO:
      type: object
      properties:
        cvv:
          type: string
          description: This field contains RSA Encrypted 3-digit CVV for the card.
          example: NjAx
        expiry:
          type: string
          description: This field contains RSA Encrypted expiry date of the card in
            MM/YY format.
          example: MjYwMQ==
        unMaskedCardNumber:
          type: string
          description: This field contains the complete 16 digit card number RSA Encrypted.
          example: NDYxMTk5MDM0MzU3ODEwNQ==
    FetchPinResponseDTO:
      type: object
      properties:
        pin:
          type: string
          description: This field contains the four digit Base64 encoded pin for the
            card.
          example: MjM0NQ==
    FetchPinStatusResponseDTO:
      type: object
      properties:
        status:
          type: string
    CvvResponseDTO:
      type: object
      properties:
        cvv:
          type: string
          description: This field contains the 3-digit Base64 encoded CVV for the
            card.
          example: MzIx
        expiry:
          type: string
          description: This field contains the Base64 encoded expiry date of the card
            in YYMM format.
          example: MjYwNg==
    PasscodeStatusDTO:
      type: object
      properties:
        cardHashId:
          type: string
          description: Unique card identifier generated while new/add-on card issuance.
          example: c1dd9515-eac5-43ea-807c-7d6bdb6259af
        passcodeEnrolled:
          type: boolean
          description: Passcode enrollment status
          example: true
        createdDateTime:
          type: string
          description: Passcode enrollment created date and time
          example: '2022-11-22T11:55:08.687Z'
        updatedDateTime:
          type: string
          description: Passcode enrollment updated date and time
          example: '2022-11-23T10:55:08.687Z'
    Bank:
      properties:
        accountNumber:
          type: string
        iban:
          type: string
        identification:
          $ref: '#/components/schemas/Identification'
        routing:
          $ref: '#/components/schemas/Routing'
      title: Bank
      type: object
    DerivedAccountDetails:
      properties:
        name:
          description: The name of the account holder associated with the verified
            bank account or proxy values (email, phone number, etc.).
          type: string
        nameLocal:
          description: Account holder's name in the regional language of the requested
            country, if provided.
          type: string
      title: DerivedAccountDetails
      type: object
    Errors:
      properties:
        code:
          description: Error code indicating the type of error.
          type: string
        description:
          description: Detailed error description.
          type: string
        field:
          description: Field associated with the error (if applicable).
          type: string
      required:
      - code
      - description
      title: Errors
      type: object
    Identification:
      properties:
        companyNumber:
          description: Company Number
          type: string
        registrationId:
          description: Registration Id
          type: string
        vatNumber:
          description: VAT Number
          type: string
      title: Identification
      type: object
    PageResponse_VerifyResponse_:
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        verifications:
          items:
            $ref: '#/components/schemas/VerifyResponse'
          type: array
      title: "PageResponse\xABVerifyResponse\xBB"
      type: object
    Pagination:
      properties:
        currentCursor:
          type: string
        nextCursor:
          type: string
      title: Pagination
      type: object
    Proxy:
      properties:
        type:
          description: The proxy type that needs to be verified. For example, `vpa`
            for India or `mobile` for general mobile number verification.
          type: string
        value:
          description: The value associated with the proxy type. For example, if the
            `proxyType` is `vpa`, this field contains the UPI ID(e.g. `upii_id@upi`).
          type: string
      required:
      - type
      - value
      title: Proxy
      type: object
    Routing:
      properties:
        achCode:
          type: string
        bankCode:
          type: string
        ifsc:
          type: string
        sortCode:
          type: string
        swift:
          type: string
      title: Routing
      type: object
    VerifyRequest:
      properties:
        accountHolderName:
          description: The name of the account holder.
          type: string
        bank:
          $ref: '#/components/schemas/Bank'
        country:
          description: The 2-letter [ISO-2 country code] representing the country
            where the bank account is held.
          type: string
        currency:
          description: >-
            The 3-letter [ISO-4217 currency code] representing the currency for the
            account verification.

            This field specifies the currency in which the verification is conducted
            (e.g. MYR for Malaysian Ringgit).
          type: string
        externalId:
          description: External client request ID to track verification response.
          type: string
        proxy:
          $ref: '#/components/schemas/Proxy'
        verificationEntity:
          type: string
      required:
      - accountHolderName
      - country
      - currency
      title: VerifyRequest
      type: object
    VerifyResponse:
      properties:
        accountHolderName:
          description: The name of the account holder.
          type: string
        code:
          description: Error code indicating the type of error.
          type: string
        country:
          description: The 2-letter [ISO-2 country code] representing the countrywhere
            the bank account is held.
          type: string
        currency:
          description: >-
            The 3-letter [ISO-4217 currency code] representing the currency for the
            account verification.

            This field specifies the currency in which the verification is conducted
            (e.g. MYR for Malaysian Ringgit).
          type: string
        date:
          description: The date and time when the verification was created
          type: string
        derivedAccountDetails:
          $ref: '#/components/schemas/DerivedAccountDetails'
          description: Contains account details related to the account requested for
            verification.
        description:
          description: Error description describing the type of error.
          type: string
        errors:
          description: List of detailed error information if there were multiple errors.
          items:
            $ref: '#/components/schemas/Errors'
          type: array
        externalId:
          description: External client request ID to track verification response.
          type: string
        failureCode:
          description: Failure code will be present if the verificationstatus is invalid.
          type: string
        id:
          description: A unique account verification service id of the response. This
            is used to track the end-to-end flow of account verification.
          type: string
        status:
          description: The status of the verification (valid or invalid).
          type: string
      required:
      - accountHolderName
      - code
      - country
      - currency
      - description
      - errors
      - status
      title: VerifyResponse
      type: object
    AccountVerificationInfoDTO:
      properties:
        name:
          type: string
        status:
          type: string
      title: AccountVerificationInfoDTO
      type: object
    AddBeneficiaryRequest:
      properties:
        authenticationCode:
          description: >-
            This field accepts the authentication code generated as part of Strong
            Customer Authentication (SCA).

            Note: Authentication code must be passed if regulatory region of the program
            is UK or EU. This field does not accept a value for any other region.
          type: string
        beneficiaryDetail:
          $ref: '#/components/schemas/BeneficiaryDetailRequest'
          description: This object accepts the beneficiary details.
        payoutDetail:
          $ref: '#/components/schemas/PayoutRequest'
          description: "This object accepts the payout details of the beneficiary\u2019\
            s bank."
      required:
      - beneficiaryDetail
      - payoutDetail
      title: Add beneficiary request
      type: object
    AddBeneficiaryRequestDTO:
      properties:
        authenticationCode:
          description: "This fields accepts the authenticationCode generated as part\
            \ of SCA(Strong Customer Authentication).\nNote: Authentication code must\
            \ be passed if regulatory region of the program is UK or EU and License\
            \ Entity Nium. For other regions, this field is optional. \n Note: For\
            \ this conditional field, see the callout at the top of this page."
          type: string
        autoSweepPayoutAccount:
          type: boolean
        beneficiaryAccountNumber:
          description: "This field accepts an account number. \n Note: For this conditional\
            \ field, see the callout at the top of this page."
          type: string
        beneficiaryAccountType:
          description: This field accepts the bank account type of the beneficiary.
            The account type can be either Individual or Corporate.
          enum:
          - Individual
          - Corporate
          type: string
        beneficiaryAddress:
          description: "This field accepts an address of the beneficiary. \n Note:\
            \ For this conditional field, see the callout at the top of this page."
          type: string
        beneficiaryAlias:
          description: "This field accepts the alias of beneficiary. \n Note: For\
            \ this conditional field, see the callout at the top of this page."
          type: string
        beneficiaryBankAccountType:
          description: "The type of account. This field is conditional in case of\
            \ WALLET payout and the possible values are:\nCurrent\nSaving\nMaestra\n\
            Checking \n Note: For this conditional field, see the callout at the top\
            \ of this page."
          type: string
        beneficiaryBankCode:
          description: "This field accepts the beneficiary bank code. \n Note: For\
            \ this conditional field, see the callout at the top of this page."
          type: string
        beneficiaryBankName:
          description: "This field accepts the beneficiary bank name. \n Note: For\
            \ this conditional field, see the callout at the top of this page."
          type: string
        beneficiaryCardExpiryDate:
          description: "This field accepts expiry date of card. \n Note: For this\
            \ conditional field, see the callout at the top of this page."
          type: string
        beneficiaryCardIssuerName:
          description: "This field accepts issuer name of the card. \n Note: For this\
            \ conditional field, see the callout at the top of this page."
          type: string
        beneficiaryCity:
          description: "This field accepts the city of the beneficiary. \n Note: For\
            \ this conditional field, see the callout at the top of this page."
          type: string
        beneficiaryContactCountryCode:
          description: "This field accepts the mobile number country code of the beneficiary.\
            \ \n Note: For this conditional field, see the callout at the top of this\
            \ page."
          type: string
        beneficiaryContactName:
          type: string
        beneficiaryContactNumber:
          description: "This field accepts the mobile number of the beneficiary--digits\
            \ only--without the country code. \n Note: For this conditional field,\
            \ see the callout at the top of this page."
          type: string
        beneficiaryCountryCode:
          description: This field accepts the [ISO-2 country code](/docs/currency-and-country-codes)
            of the beneficiary.
          type: string
        beneficiaryDob:
          type: string
        beneficiaryEmail:
          description: "This field accepts an email of the beneficiary. \n Note: For\
            \ this conditional field, see the callout at the top of this page."
          type: string
        beneficiaryEntityType:
          type: string
        beneficiaryEstablishmentDate:
          type: string
        beneficiaryIdentificationType:
          description: "This field accepts the type of identification document name\
            \ for a beneficiary. \n Note: For this conditional field, see the callout\
            \ at the top of this page."
          type: string
        beneficiaryIdentificationValue:
          description: "This field accepts an identification document number for the\
            \ beneficiary. \n Note: For this conditional field, see the callout at\
            \ the top of this page."
          type: string
        beneficiaryName:
          description: This field accepts the name of the beneficiary.
          type: string
        beneficiaryName_local:
          description: This field accepts the name of beneficiary in local language
          type: string
        beneficiaryPostcode:
          description: "This field accepts the postal code of the beneficiary. \n\
            \ Note: For this conditional field, see the callout at the top of this\
            \ page."
          type: string
        beneficiaryState:
          description: "This field accepts the state of the beneficiary. \n Note:\
            \ For this conditional field, see the callout at the top of this page."
          type: string
        convertDestinationCurrency:
          description: This field denotes if the beneficiary bank converts the amount
            in the destination account currency and credits to the account in case
            the beneficiary account is not in the same currency as destination currency.
          type: boolean
        defaultAutoSweepPayoutAccount:
          type: boolean
        destinationCountry:
          description: "This field contains the 2-letter [ISO-2 country code](/docs/currency-and-country-codes)\
            \ of the destination country. \n Note: For this conditional field, see\
            \ the callout at the top of this page."
          type: string
        destinationCurrency:
          description: This field accepts the 3-letter [ISO-4217 destination currency
            code](/docs/currency-and-country-codes).
          type: string
        encryptedBeneficiaryCardToken:
          description: "This field accepts the system generated token number to identify\
            \ the card stored at NIUM's platform.\nNote: This field is mandatory if\
            \ the client is non-PCI DSS compliant. \n Note: For this conditional field,\
            \ see the callout at the top of this page."
          type: string
        payoutMethod:
          description: >-
            This field accepts the payout method for the remittance payout. This field
            can accept one of the following values:

            LOCAL

            SWIFT

            WALLET

            CARD

            PROXY
          enum:
          - LOCAL
          - SWIFT
          - WALLET
          - CASH
          - CARD
          - PROXY
          - CHECK
          type: string
        proxyType:
          description: "This field indicates the proxy type sent in the payment request.\n\
            For SGD-PayNow: The proxy type can be MOBILE, UEN , NRIC, or VPA\n For\
            \ INR-UPI: The proxy type should be VPA\nFor BRL-PIX: The proxy type can\
            \ be MOBILE, ID, EMAIL, or RANDOM_KEY\n For AUD-PayID: The proxy type\
            \ can be MOBILE, EMAIL, ABN, or ORGANISATION_ID (only domestic payouts\
            \ are allowed)\nFor MYR-DuitNow: The proxy type can be NRIC, PASSPORT,\
            \ CORPORATE_REGISTRATION_NUMBER, MOBILE, or ARMY_ID\nNote: This field\
            \ is mandatory when the payoutMethod type is PROXY. \n Note: For this\
            \ conditional field, see the callout at the top of this page."
          type: string
        proxyValue:
          description: "This field indicates the proxy value such as VPA, UEN, or\
            \ mobile number etc.\nNote: This field is mandatory when the payoutMethod\
            \ type is PROXY\nThe mobile number should include country code. \n Note:\
            \ For this conditional field, see the callout at the top of this page."
          type: string
        remitterBeneficiaryRelationship:
          description: "This field accepts the relationship of the beneficiary with\
            \ the remitter. \n Note: For this conditional field, see the callout at\
            \ the top of this page."
          type: string
        routingCodeType1:
          description: "This field accepts the routing code type 1, for example, SWIFT\
            \ for all countries, IFSC for India, SORT CODE for UK, ACH CODE for USA,\
            \ BRANCH CODE for Brazil and Bangladesh, BSB CODE for Australia, BANK\
            \ CODE for HongKong. \n Note: For this conditional field, see the callout\
            \ at the top of this page."
          type: string
        routingCodeType2:
          description: "This field accepts the routing code type 2, for example, SWIFT\
            \ for all countries, IFSC for India, SORT CODE for UK, ACH CODE for USA,\
            \ BRANCH CODE for Brazil and Bangladesh, BSB CODE for Australia, BANK\
            \ CODE for HongKong. \n Note: For this conditional field, see the callout\
            \ at the top of this page."
          type: string
        routingCodeValue1:
          description: "This field accepts the routing code value 1, for example,\
            \ ADCBINBB or ADCBINBB123 for SWIFT, SBIN0000058 for IFSC, 100000 for\
            \ SORT CODE, 111000025 for ACH CODE, 012515 for BSB CODE, 151 for BANK\
            \ CODE. \n Note: For this conditional field, see the callout at the top\
            \ of this page."
          type: string
        routingCodeValue2:
          description: "This field accepts the routing code value 2, for example,\
            \ ADCBINBB or ADCBINBB123 for SWIFT, SBIN0000058 for IFSC, 100000 for\
            \ SORT CODE, 111000025 for ACH CODE, 012515 for BSB CODE, 151 for BANK\
            \ CODE. \n Note: For this conditional field, see the callout at the top\
            \ of this page."
          type: string
      required:
      - beneficiaryAccountType
      - beneficiaryCountryCode
      - beneficiaryName
      - destinationCurrency
      - payoutMethod
      title: Add beneficiary request
      type: object
    AddCustomerRequestDTO:
      properties:
        tags:
          description: >-
            This object contains the user defined key-value pairs provided by the
            client.

            The maximum number of tags allowed is 15
          items:
            $ref: '#/components/schemas/CustomerCustomerTagDTO'
          type: array
        additionalInfo:
          additionalProperties:
            type: string
          description: This array accepts additional information.
          type: object
        billingAddress1:
          description: "This field accepts line 1 of the customer\u2019s billing address.\
            \ In the case of eKYC[GreenId], this field is used to verify the address\
            \ with the document chosen.\nMaximum character limit: 40\nThe format for\
            \ GreenId is: StreetNumber | StreetName | Suburb."
          type: string
        billingAddress2:
          description: >-
            This field accepts the line 2 of customer's billing address.

            Maximum character limit: 40
          type: string
        billingCity:
          description: "This field accepts the city of customer\u2019s billing address.\n\
            Maximum character limit: 20"
          type: string
        billingCountry:
          description: This field accepts the 2-letter [ISO Alpha-2 country code](/docs/currency-and-country-codes)
            denoting the country of customer's billing address.
          type: string
        billingLandmark:
          description: "This field accepts the landmark for customer\u2019s billing\
            \ address.\nMaximum character limit: 40"
          type: string
        billingState:
          description: >-
            This field accepts the state of customer's billing address.

            Maximum character limit: 30
          type: string
        billingZipCode:
          description: "This field accepts the zipcode of customer\u2019s billing\
            \ address.\nMaximum character limit: 10"
          type: string
        complianceLevel:
          description: This field accepts the compliance level for the customer. It
            is useful when the client has multiple compliance setup. For example,
            customer may be onboarded with SCREENING and upgrade to SCREENING_KYC
            later.
          enum:
          - SCREENING
          - SCREENING_KYC
          type: string
        correspondenceAddress1:
          description: >-
            This field accepts the line 1 of customer's correspondence address.

            Maximum character limit: 40
          type: string
        correspondenceAddress2:
          description: >-
            This field accepts the line 2 of customer's correspondence address.

            Maximum character limit: 40
          type: string
        correspondenceCity:
          description: >-
            This field accepts the city of customer's correspondence address.

            Maximum character limit: 20
          type: string
        correspondenceCountry:
          description: This field accepts the 2-letter [ISO Alpha-2 country code](/docs/currency-and-country-codes)
            denoting the country of customer's correspondence address.
          type: string
        correspondenceLandmark:
          description: >-
            This field accepts the landmark for customer's correspondence address.

            Maximum character limit: 40
          type: string
        correspondenceState:
          description: >-
            This field accepts the state of customer's correspondence address.

            Maximum character limit: 30
          type: string
        correspondenceZipCode:
          description: >-
            This field accepts the zipcode of customer's correspondence address.

            Maximum character limit: 10
          type: string
        countryCode:
          description: This field accepts the 2-letter [ISO Alpha-2 country code](/docs/currency-and-country-codes)
            denoting the country prefix code to the customer's mobile number.
          type: string
        countryIP:
          description: This field accepts the country IP for the device by the customer
            for initiating the request.
          type: string
        countryOfBirth:
          description: "This field accepts the 2-letter [ISO country code](/docs/currency-and-country-codes)\
            \ denoting the customer\u2019s country of birth.\nNote: This field is\
            \ mandatory for EU."
          type: string
        customerHashId:
          description: This field accepts the previously generated unique customer
            identifier of customer.
          format: uuid
          type: string
        dateOfBirth:
          description: >-
            This field accepts the date of birth of the customer in YYYY-MM-DD format.

            Minimum customer age should be 18 years. Discuss with your NIUM account
            manager for any special use-cases.
          type: string
        deliveryAddress1:
          description: "This field accepts the line 1 of customer\u2019s delivery\
            \ address.\nMaximum character limit: 40"
          type: string
        deliveryAddress2:
          description: >-
            This field accepts the line 2 of customer's delivery address.

            Maximum character limit: 40
          type: string
        deliveryCity:
          description: >-
            This field accepts the city of customer's delivery address.

            Maximum character limit: 20
          type: string
        deliveryCountry:
          description: This field accepts the 2-letter [ISO Alpha-2 country code](/docs/currency-and-country-codes)
            denoting the country of customer's delivery address.
          type: string
        deliveryLandmark:
          description: >-
            This field accepts the landmark for customer's delivery address.

            Maximum character limit: 40
          type: string
        deliveryState:
          description: >-
            This field accepts the state of customer's delivery address.

            Maximum character limit: 30
          type: string
        deliveryZipCode:
          description: >-
            This field accepts the zipcode of customer's delivery address.

            Maximum character limit: 10
          type: string
        designation:
          description: "This field accepts the designation of the customer for certain\
            \ shipping industry use-cases.\nThis field can accept only one of the\
            \ following values:\n\u2022 CAPTAIN\n\u2022 SEAFARER\n\u2022 SMC\n\u2022\
            \ VESSEL"
          type: string
        deviceInfo:
          description: This field accepts the OS of the device used by the customer
            for initiating the request.
          type: string
        email:
          description: >-
            This field accepts the unique email address of the customer.

            Maximum character limit: 60
          type: string
        employeeId:
          description: This field accepts the employee ID of the customer, if applicable.
          type: string
        estimatedMonthlyFunding:
          description: "This field accepts the estimated monthly funding amount expected\
            \ in the wallet. This field is required when estimatedMonthlyFundingCurrency\
            \ field is provided in the request.\nThe possible values are:\n\u2022\
            \ MF001: <1000\n\u2022 MF002: 1000-5000\n\u2022 MF003: 5001-10000\n\u2022\
            \ MF004: 10001-20000\n\u2022 MF005: >20000\nSee the [Unified Add Customer](https://docs.nium.com/apis/docs/unified-add-customer-api)\
            \ request\nNote: This field is mandatory for EU and UK."
          enum:
          - MF001
          - MF002
          - MF003
          - MF004
          - MF005
          type: string
        estimatedMonthlyFundingCurrency:
          description: >-
            This field accepts the 3-letter [ISO-4217 currency code](/docs/currency-and-country-codes)
            in which estimated monthly funding is expected in the wallet, for example,
            SGD.

            Note: This field is mandatory for EU and UK.
          type: string
        expectedCountriesToSendReceiveFrom:
          description: "This is an array of 2-letter [ISO Alpha-2 country code](/docs/currency-and-country-codes)\
            \ to allow the client to capture the expected countries to send/receive\
            \ international payments from. This field is required when internationalPaymentsSupported\
            \ field is true, for example, [\u201CFR\u201D, \u201CDE\u201D].\nNote:\
            \ This field is mandatory for EU and UK."
          items:
            type: string
          type: array
        firstName:
          description: >-
            This field accepts the first name of the customer.

            Maximum character limit: 40
          type: string
        gender:
          description: "This field can accept only one of the following values:\n\u2022\
            \ Male\n\u2022 Female\n\u2022 Others"
          enum:
          - Male
          - Female
          - Others
          type: string
        identificationDoc:
          description: This is an array of actual Base-64 documents as required. The
            maximum allowed size of this payload is 10 MB. A separate object is needed
            for each document image.
          items:
            $ref: '#/components/schemas/ComplianceIdentificationDocDTO'
          type: array
        intendedUseOfAccount:
          description: >-
            This field accepts the customer's intended use of account.

            See the [Unified Add Customer](https://docs.nium.com/apis/docs/unified-add-customer-api)
            request for more information.
          enum:
          - IU100
          - IU101
          - IU102
          - IU103
          - IU104
          - IU105
          - IU106
          - IU107
          - IU108
          - IU109
          type: string
        internationalPaymentsSupported:
          description: >-
            This field specifies if the customer will be doing International send/receive
            payments. The default value will be false.

            Note: This field is mandatory for EU and UK.
          type: boolean
        ipAddress:
          description: This field accepts the IP address of the device used by the
            customer for initiating the request.
          type: string
        isTncAccepted:
          description: This flag specifies if the customer has accepted or rejected
            the Terms and Conditions.
          type: boolean
        kycMode:
          description: "This field can accept only one of the following values:\n\u2022\
            \ E_KYC\n\u2022 MANUAL_KYC\n\u2022 SCREENING\n\u2022 E_DOC_VERIFY"
          enum:
          - E_KYC
          - MANUAL_KYC
          - SCREENING
          - E_DOC_VERIFY
          type: string
        lastName:
          description: >-
            This field accepts the last name of the customer.

            Maximum character limit: 40
          type: string
        middleName:
          description: >-
            This field accepts the middle name of the customer.

            Maximum character limit: 40
          type: string
        mobile:
          description: >-
            This field accepts the mobile number of the customer--digits only--without
            the country code.

            Maximum character limit: 20
          type: string
        nationality:
          description: This field accepts the 2-letter [ISO Alpha-2 country code](/docs/currency-and-country-codes)
            denoting the customer's citizenship.
          type: string
        nativeLanguageName:
          description: >-
            This field accepts the customer's name in native language.

            Maximum character limit: 40
          type: string
        occupation:
          description: "This field accepts the customer\u2019s occupation. Refer to\
            \ [Enum values](https://docs.nium.com/apis/docs/unified-add-customer-api)\
            \ for the description. \n Note: This field is mandatory for CA."
          enum:
          - OC0001
          - OC1001
          - OC1002
          - OC1003
          - OC1110
          - OC1120
          - OC1201
          - OC1210
          - OC1211
          - OC1220
          - OC1310
          - OC1311
          - OC1320
          - OC1410
          - OC1411
          - OC1420
          - OC1430
          - OC1440
          - OC2001
          - OC2110
          - OC2111
          - OC2112
          - OC2120
          - OC2121
          - OC2122
          - OC2123
          - OC2130
          - OC2131
          - OC2132
          - OC2133
          - OC2139
          - OC2210
          - OC2211
          - OC2221
          - OC2222
          - OC2223
          - OC2230
          - OC2231
          - OC3001
          - OC3110
          - OC3111
          - OC3112
          - OC3120
          - OC3130
          - OC3210
          - OC3211
          - OC3212
          - OC3220
          - OC3310
          - OC4001
          - OC4002
          - OC4003
          - OC4004
          - OC4110
          - OC4120
          - OC4121
          - OC4122
          - OC4130
          - OC4131
          - OC4132
          - OC4140
          - OC4210
          - OC4220
          - OC4310
          - OC4320
          - OC4410
          - OC4420
          - OC4510
          - OC5001
          - OC5110
          - OC5111
          - OC5112
          - OC5210
          - OC5211
          - OC5212
          - OC5310
          - OC5311
          - OC5312
          - OC5320
          - OC5410
          - OC5510
          - OC6001
          - OC6002
          - OC6003
          - OC6004
          - OC6201
          - OC6202
          - OC6210
          - OC6220
          - OC6310
          - OC6320
          - OC6321
          - OC6322
          - OC6410
          - OC6420
          - OC6430
          - OC6431
          - OC6432
          - OC6440
          - OC6441
          - OC6510
          - OC6520
          - OC6521
          - OC6522
          - OC6531
          - OC6532
          - OC7001
          - OC7002
          - OC7201
          - OC7202
          - OC7210
          - OC7220
          - OC7230
          - OC7231
          - OC7232
          - OC7240
          - OC7241
          - OC7242
          - OC7250
          - OC7260
          - OC7299
          - OC7310
          - OC7311
          - OC7320
          - OC7330
          - OC7331
          - OC7340
          - OC7410
          - OC7420
          - OC7510
          - OC7511
          - OC7520
          - OC7521
          - OC8001
          - OC8002
          - OC8201
          - OC8202
          - OC8203
          - OC8310
          - OC8311
          - OC8312
          - OC8410
          - OC8411
          - OC8412
          - OC8510
          - OC8511
          - OC8512
          - OC9001
          - OC9201
          - OC9202
          - OC9210
          - OC9310
          - OC9320
          - OC9410
          - OC9411
          - OC9412
          - OC9413
          - OC9414
          - OC9415
          - OC9420
          - OC9421
          - OC9510
          type: string
        parentCustomerHashId:
          description: This field contains the unique parent customer identifier generated
            at the time of customer creation.
          example: 190dddbe-fdbc-48fe-a7c2-d55266e9acf5
          type: string
        pep:
          description: >-
            This field specifies if the customer is a Politically Exposed Person (PEP)
            or not.

            Note: This field is mandatory for EU.
          type: boolean
        preferredName:
          description: >-
            This field accepts the common name or preferred name of the customer.
            It is also acceptable to pass the first name in this field.

            Maximum character limit: 20
          type: string
        segment:
          description: >-
            This field accepts the fee segment associated with a client.

            Maximum character limit: 64
          type: string
        sessionId:
          description: This field accepts the session ID for the session of the customer
            for initiating the request.
          type: string
        taxDetails:
          items:
            $ref: '#/components/schemas/CustomerCustomerTaxDetailDTO'
          type: array
        upgradeRequest:
          type: boolean
        verificationConsent:
          description: This field specifies if the electronic verification consent
            to process customer data for compliance is required or not.
          type: boolean
      title: Add customer request
      type: object
    AddCustomerResponseDTO:
      properties:
        complianceStatus:
          description: >-
            The compliance status of the transactions. Available values include:
              - **PENDING**: The transaction is under compliance review and may require
            additional checks before it can proceed.
              - **RFI_REQUESTED**: Additional information has been requested to complete
            the compliance review of this transaction.
              - **CLEAR**: The transaction has passed all compliance checks and can
            proceed to the next step in processing.
              - **REJECTED**: The transaction did not meet compliance requirements
            and cannot proceed.
          type: string
        customerHashId:
          description: Unique customer identifier generated on customer creation
          type: string
        kycStatus:
          description: This field contains the kyc status and this shall be available
            only in applicable cases. Call the [Customer Details](ref:customerdetailsv2)
            API to fetch the updated kyc status.
          type: string
        paymentIds:
          description: This is an array which contains the paymentIds assigned to
            the customer.
          items:
            $ref: '#/components/schemas/CustomerPaymentIdDTO'
          type: array
        redirectUrl:
          description: This field contains the redirect URL where the customer should
            be redirected for verification.
          type: string
        walletHashId:
          description: Unique wallet identifier generated simultaneously with customer
            creation.
          type: string
      title: Add customer response
      type: object
    AddressV2:
      properties:
        addressLine1:
          description: This field stores the address line 1.
          type: string
        addressLine2:
          description: This field stores the address line 2
          type: string
        city:
          description: This field stores the city.
          example: Sydney
          type: string
        country:
          description: This field stores the country. Use the [Fetch Corporate Constants
            API](ref:fetchcorporateconstantsusingget) to get the list of valid countries.
          example: AU
          type: string
        postCode:
          description: This field stores the zipCode.
          example: '2001'
          type: string
        state:
          description: This field stores the state.
          example: New South Wales
          type: string
      title: Address V2
      type: object
    CustomerApiError:
      properties:
        errors:
          description: This field will return an error message if any error occurs
            or blank if request is successfully executed.
          example:
          - field1 is not valid
          - field2 is not valid
          items:
            type: string
          type: array
        message:
          description: This field will return a message if a request is successfully
            executed or blank in case of an error.
          example: Error message descriptor.
          type: string
        status:
          description: This field returns an HTTP status code according to the success
            and failure of the request.
          enum:
          - 200 OK
          - 400 BAD_REQUEST
          - 403 FORBIDDEN
          - 404 NOT_FOUND
          - 500 INTERNAL_SERVER_ERROR
          - 502 BAD_GATEWAY
          - 503 SERVICE_UNAVAILABLE
          example: BAD_REQUEST
          type: string
      title: ApiError
      type: object
    ApplicantDetailsV2:
      properties:
        address:
          $ref: '#/components/schemas/AddressV2'
        birthCountry:
          type: string
        contactDetails:
          $ref: '#/components/schemas/ContactDetailsResponseDTO'
        dateOfBirth:
          type: string
        documentDetails:
          items:
            $ref: '#/components/schemas/CorporateDocumentDetails2DTO'
          type: array
        firstName:
          type: string
        firstName_local:
          type: string
        gender:
          type: string
        isPep:
          type: boolean
        isResident:
          type: string
        lastName:
          type: string
        lastName_local:
          type: string
        middleName:
          type: string
        nationality:
          type: string
        occupation:
          description: "This field accepts the customer\u2019s occupation. Refer to\
            \ [Enum values](https://docs.nium.com/apis/docs/unified-add-customer-api)\
            \ for the description. \n Note: This field is mandatory for CA."
          enum:
          - OC0001
          - OC1001
          - OC1002
          - OC1003
          - OC1110
          - OC1120
          - OC1201
          - OC1210
          - OC1211
          - OC1220
          - OC1310
          - OC1311
          - OC1320
          - OC1410
          - OC1411
          - OC1420
          - OC1430
          - OC1440
          - OC2001
          - OC2110
          - OC2111
          - OC2112
          - OC2120
          - OC2121
          - OC2122
          - OC2123
          - OC2130
          - OC2131
          - OC2132
          - OC2133
          - OC2139
          - OC2210
          - OC2211
          - OC2221
          - OC2222
          - OC2223
          - OC2230
          - OC2231
          - OC3001
          - OC3110
          - OC3111
          - OC3112
          - OC3120
          - OC3130
          - OC3210
          - OC3211
          - OC3212
          - OC3220
          - OC3310
          - OC4001
          - OC4002
          - OC4003
          - OC4004
          - OC4110
          - OC4120
          - OC4121
          - OC4122
          - OC4130
          - OC4131
          - OC4132
          - OC4140
          - OC4210
          - OC4220
          - OC4310
          - OC4320
          - OC4410
          - OC4420
          - OC4510
          - OC5001
          - OC5110
          - OC5111
          - OC5112
          - OC5210
          - OC5211
          - OC5212
          - OC5310
          - OC5311
          - OC5312
          - OC5320
          - OC5410
          - OC5510
          - OC6001
          - OC6002
          - OC6003
          - OC6004
          - OC6201
          - OC6202
          - OC6210
          - OC6220
          - OC6310
          - OC6320
          - OC6321
          - OC6322
          - OC6410
          - OC6420
          - OC6430
          - OC6431
          - OC6432
          - OC6440
          - OC6441
          - OC6510
          - OC6520
          - OC6521
          - OC6522
          - OC6531
          - OC6532
          - OC7001
          - OC7002
          - OC7201
          - OC7202
          - OC7210
          - OC7220
          - OC7230
          - OC7231
          - OC7232
          - OC7240
          - OC7241
          - OC7242
          - OC7250
          - OC7260
          - OC7299
          - OC7310
          - OC7311
          - OC7320
          - OC7330
          - OC7331
          - OC7340
          - OC7410
          - OC7420
          - OC7510
          - OC7511
          - OC7520
          - OC7521
          - OC8001
          - OC8002
          - OC8201
          - OC8202
          - OC8203
          - OC8310
          - OC8311
          - OC8312
          - OC8410
          - OC8411
          - OC8412
          - OC8510
          - OC8511
          - OC8512
          - OC9001
          - OC9201
          - OC9202
          - OC9210
          - OC9310
          - OC9320
          - OC9410
          - OC9411
          - OC9412
          - OC9413
          - OC9414
          - OC9415
          - OC9420
          - OC9421
          - OC9510
          example: OC0001
          type: string
        professionalDetails:
          items:
            $ref: '#/components/schemas/ProfessionalDetailsResponseDTO'
          type: array
        redirectURL:
          type: string
        referenceId:
          type: string
        taxDetails:
          items:
            $ref: '#/components/schemas/TaxDetailsResponseDTO'
          type: array
      title: Applicant details V2
      type: object
    CustomerAssociationDetails:
      properties:
        associationChairPerson:
          type: string
        associationName:
          type: string
        associationNumber:
          type: string
      title: AssociationDetails
      type: object
    BeneficiaryDetailRequest:
      properties:
        account_type:
          description: This field accepts the bank account type of the beneficiary.
            The account_type can be either Individual or Company.
          enum:
          - Individual
          - Corporate
          type: string
        address:
          description: This field accepts an address of the beneficiary.
          type: string
        autosweep_payout_account:
          description: This field accepts the boolean value for the autosweepPayoutAccount.
          type: boolean
        beneficiary_contact_name:
          description: This field accepts the contact name of the beneficiary.
          type: string
        beneficiary_dob:
          description: This field accepts the date of birth of the beneficiary in
            the format YYYY-MM-DD, for example, 2023-07-08
          example: '2023-07-08'
          type: string
        beneficiary_entity_type:
          description: This field accepts the entity type of the beneficiary.
          type: string
        beneficiary_establishment_date:
          description: This field accepts the date of establishment of the beneficiary
            in the format YYYY-MM-DD, for example, 2023-07-08
          example: '2023-07-08'
          type: string
        city:
          description: >-
            This field accepts the city of the beneficiary.

            Maximum character limit: 50.
          type: string
        contact_country_code:
          description: This field accepts the ISO-2 country code for the mobile number
            of beneficiary.
          type: string
        contact_number:
          description: This field accepts the mobile number of the beneficiary--digits
            only--without the country code.
          type: string
        convert_destination_currency:
          description: This field denotes if the beneficiary bank converts the amount
            in the destination account currency and credits to the account in case
            the beneficiary account is not in the same currency as destination currency.
          type: boolean
        country_code:
          description: This field accepts the [ISO-2 country code](/docs/currency-and-country-codes)
            for the mobile number of beneficiary.
          type: string
        default_autosweep_payout_account:
          description: This field accepts the boolean value for the defaultAutosweepPayoutAccount.
          type: boolean
        email:
          description: This field accepts an email of the beneficiary.
          type: string
        name:
          description: >-
            This field accepts the name of the beneficiary.The beneficiary_group_name
            is required.Name can contain alphabets, numbers, and special characters
            that is (. , () ' / -).

            Maximum character limit: 150.
          type: string
        postcode:
          description: This field accepts the postal code of the beneficiary.
          type: string
        relationship:
          description: This field accepts the relationship of the beneficiary with
            the remitter.
          type: string
        state:
          description: 'This field accepts the state of the beneficiary. Maximum character
            limit: 50.'
          type: string
      required:
      - account_type
      - country_code
      - name
      title: Beneficiary detail request
      type: object
    BeneficiaryResponseDTO:
      properties:
        accountVerification:
          $ref: '#/components/schemas/AccountVerificationInfoDTO'
          description: This object contains the account verification details
        autosweepPayoutAccount:
          description: This field contains the boolean value for the autosweepPayoutAccount.
          type: boolean
        beneficiaryAccountNumber:
          description: This field contains an account number as a payout detail.
          type: string
        beneficiaryAccountType:
          description: This field contains the bank account type of the beneficiary.
            The account type can be either Individual or Corporate.
          type: string
        beneficiaryAddress:
          description: This field contains an address of the beneficiary.
          type: string
        beneficiaryBankAccountType:
          description: "This field contains one of following four bank account types\
            \ given at the time of beneficiary creation:\n\u2022 Current\n\u2022 Saving\n\
            \u2022 Maestra\n\u2022 Checking"
          enum:
          - Current
          - Saving
          - Maestra
          - Checking
          type: string
        beneficiaryBankCode:
          description: This field contains the bank code of the payout.
          type: string
        beneficiaryBankName:
          description: This field contains the beneficiary bank name.
          type: string
        beneficiaryCardExpiryDate:
          description: "This field contains the beneficiary\u2019s card expiry date."
          type: string
        beneficiaryCardIssuerName:
          description: "This field contains the beneficiary\u2019s card issuer name."
          type: string
        beneficiaryCardMetaData:
          $ref: '#/components/schemas/CardMetaDataResponseDTO'
          description: This object contains the card information.
        beneficiaryCardNumberMask:
          description: This field contains the 16-digit masked card number of beneficiary
            in the format XXXX XXXX XXXX 8351.
          type: string
        beneficiaryCardToken:
          description: This field contains the system generated token number to identify
            the card stored at NIUM's platform.
          type: string
        beneficiaryCardType:
          description: This field contains the beneficiary card type, for example,
            VISA, geoswift.
          type: string
        beneficiaryCity:
          description: This field contains the city of the beneficiary.
          type: string
        beneficiaryContactCountryCode:
          description: This field contains the mobile country code of the beneficiary.
          type: string
        beneficiaryContactName:
          type: string
        beneficiaryContactNumber:
          description: This field contains the mobile number of the beneficiary--digits
            only--without the country code.
          type: string
        beneficiaryCountryCode:
          description: This field contains  the 2-letter [ISO-2 country code](/docs/currency-and-country-codes)
            for the mobile number of beneficiary.
          type: string
        beneficiaryCreatedAt:
          description: This field contains the date and time of beneficiary creation.
          type: string
        beneficiaryDob:
          type: string
        beneficiaryEmail:
          description: This field contains an email of the beneficiary.
          type: string
        beneficiaryEntityType:
          type: string
        beneficiaryEstablishmentDate:
          type: string
        beneficiaryHashId:
          description: This field contains the unique beneficiary hash ID.
          format: uuid
          type: string
        beneficiaryIdentificationType:
          description: This field contains the type of identification document name
            for a beneficiary.
          type: string
        beneficiaryIdentificationValue:
          description: This field contains an identification document number for the
            beneficiary.
          type: string
        beneficiaryName:
          description: This field contains the name of the beneficiary.
          type: string
        beneficiaryName_local:
          description: This field accepts the name of beneficiary in local language
          type: string
        beneficiaryPostcode:
          description: This field contains the postal code of the beneficiary.
          type: string
        beneficiaryState:
          description: This field contains the state of the beneficiary.
          type: string
        beneficiaryUpdatedAt:
          description: This field contains the date and time of beneficiary updation.
          type: string
        defaultAutosweepPayoutAccount:
          description: This field contains the boolean value for the defaultAutosweepPayoutAccount.
          type: boolean
        destinationCountry:
          description: This field contains the 2-letter [ISO-2 country code](/docs/currency-and-country-codes)
            for the payout bank.
          type: string
        destinationCurrency:
          description: This field contains the 3-letter [ISO-4217 destination currency
            code](/docs/currency-and-country-codes) of the payout as per the destination
            country from supported corridors.
          type: string
        payoutCreatedAt:
          description: This field contains the date and time of payout creation.
          type: string
        payoutHashId:
          description: This field contains the unique payout hash ID.
          format: uuid
          type: string
        payoutMethod:
          description: This field contains the payout method for the remittance payout.
          enum:
          - LOCAL
          - SWIFT
          - WALLET
          - CASH
          - CARD
          - PROXY
          - CHECK
          type: string
        payoutUpdatedAt:
          type: string
        proxyType:
          description: "This field contains the proxy type sent in the payment request.\n\
            \u2022 For SGD-PayNow: The proxy type can be MOBILE, UEN, NRIC, or VPA.\n\
            \u2022 For INR-UPI: The proxy type should be VPA.\n\u2022 For BRL-PIX:\
            \ The proxy type can be MOBILE, ID, EMAIL, or RANDOM_KEY.\n\u2022 For\
            \ AUD-PayID: The proxy type can be MOBILE, EMAIL, ABN, or ORGANISATION_ID(\
            \ only domestic payouts are allowed).\n\u2022 For MYR-DuitNow: The proxy\
            \ type can be NRIC, PASSPORT, CORPORATE_REGISTRATION_NUMBER, MOBILE, or\
            \ ARMY_ID."
          type: string
        proxyValue:
          description: This field contains the proxy value such as VPA, UEN, or mobile
            number etc.
          type: string
        remitterBeneficiaryRelationship:
          description: This field contains the relationship of the beneficiary with
            the remitter.
          type: string
        routingCodeType1:
          description: This field contains the routing code type 1, for example, SWIFT
            for all countries, IFSC for India, SORT CODE for UK, ACH CODE for USA,
            BRANCH CODE for Brazil and Bangladesh, BSB CODE for Australia, BANK CODE
            for HongKong.
          type: string
        routingCodeType2:
          description: This field contains the routing code type 2, for example, SWIFT
            for all countries, IFSC for India, SORT CODE for UK, ACH CODE for USA,
            BRANCH CODE for Brazil and Bangladesh, BSB CODE for Australia, BANK CODE
            for HongKong.
          type: string
        routingCodeValue1:
          description: This field contains the routing code value 1, for example,
            ADCBINBB or ADCBINBB123 for SWIFT, SBIN0000058 for IFSC, 100000 for SORT
            CODE, 111000025 for ACH CODE, 012515 for BSB CODE, 151 for BANK CODE.
          type: string
        routingCodeValue2:
          description: This field contains the routing code value 2, for example,
            ADCBINBB or ADCBINBB123 for SWIFT, SBIN0000058 for IFSC, 100000 for SORT
            CODE, 111000025 for ACH CODE, 012515 for BSB CODE, 151 for BANK CODE.
          type: string
      title: Beneficiary response
      type: object
    BeneficiaryValidationRequestDTO:
      properties:
        beneficiaryAccountNumber:
          description: The beneficiary account number.
          type: string
        beneficiaryAccountType:
          type: string
        beneficiaryBankCode:
          description: >-
            The bank code of the beneficiary. E.g: The bank code for England is GB.

            Note: This field is mandatory when the destination country is Pakistan
            (PK).
          type: string
        beneficiaryContactNumber:
          type: string
        beneficiaryCountryCode:
          type: string
        beneficiaryName:
          description: This field accepts the name of a beneficiary.
          type: string
        destinationCountry:
          description: The 2-letter [ISO-2 country code](/docs/currency-and-country-codes)
            of the destination country.
          type: string
        destinationCurrency:
          type: string
        payoutMethod:
          description: >
            This field can accept the different modes of payout. This field can accept
            one of the following values:

            LOCAL

            PROXY
          enum:
          - LOCAL
          - SWIFT
          - WALLET
          - CASH
          - CARD
          - PROXY
          - CHECK
          type: string
        proxyType:
          description: >-
            This field indicates the proxy type sent in the payment request.
             For SGD-PayNow: The proxy type can be MOBILE, UEN , or NRIC
            For INR-UPI: The proxy type should be VPA
             For MYR-DuitNow: The proxy type can be NRIC, PASSPORT, CORPORATE_REGISTRATION_NUMBER,
            MOBILE, or ARMY_ID Note : This field is mandatory when the payoutMethod
            type is PROXY.
          type: string
        proxyValue:
          description: >-
            This field indicates the proxy value such as VPA, UEN, or mobile number
            etc.

            Note: This field is mandatory when the payoutMethod type is PROXY

            The mobile number should include country code.
          type: string
        routingCodeType1:
          description: >-
            This field accepts the routing code type 1, for example, SWIFT for all
            countries, IFSC for India, SORT CODE for UK, ACH CODE for USA, BRANCH
            CODE for Brazil and Bangladesh, BSB CODE for Australia, BANK CODE for
            HongKong.

            This field is Required if the payoutMethod is LOCAL.
          type: string
        routingCodeValue1:
          description: >-
            This field accepts the routing code value 1, for example, ADCBINBB or
            ADCBINBB123 for SWIFT, SBIN0000058 for IFSC, 100000 for SORT CODE, 111000025
            for ACH CODE, 012515 for BSB CODE, 151 for BANK CODE.

            This field is Required if the payoutMethod is LOCAL.
          type: string
      required:
      - destinationCountry
      - payoutMethod
      title: Beneficiary validation request
      type: object
    BeneficiaryValidationResponseDTO:
      properties:
        beneficiaryBankCode:
          description: This field contains beneficiary bank code if the payout method
            is proxy and proxy type is VPA.
          type: string
        beneficiaryName:
          description: This field contains beneficiary name if the payout method is
            proxy.
          type: string
        status:
          description: >-
            This field contains the status only when the proxy type is VPA. The possible
            values are:

            VE: Virtual Address Available

            F: Failed

            VN: Virtual Address not Available
          type: string
        valid:
          description: This field will return true if the provided details are valid
            otherwise false.
          type: boolean
      title: Beneficiary validation response
      type: object
    BlockCustomerRequestDTO:
      properties:
        action:
          description: "This field accepts the action type of block/unblock. The possible\
            \ values are:\n\u2022 TEMPORARY_BLOCK\n\u2022 PERMANENT_BLOCK\n\u2022\
            \ UNBLOCK"
          enum:
          - TEMPORARY_BLOCK
          - PERMANENT_BLOCK
          - UNBLOCK
          type: string
        comment:
          description: >-
            This field accepts comment which describes the action or reason.

            Maximum character limit: 255
          type: string
        reason:
          description: "This field accepts the reason for block/unblock for customer.\
            \ Following are the valid values with respect to action:\n=> PERMANENT_BLOCK:\n\
            \u2022 CUSTOMER_REQUEST\n\u2022 CLIENT_REQUEST\n\u2022 DECEASED\n\u2022\
            \ ACCOUNT_CLOSURE\n\u2022 SUSPICIOUS_ACTIVITY\n\u2022 FRAUDULENT_ACTIVITY\n\
            \u2022 POTENTIAL_SANCTION\n\u2022 SANCTIONED_CUSTOMER\n\u2022 BLACKLISTED_CUSTOMER\n\
            \u2022 UNRESPONSIVE_CUSTOMER\n\u2022 DORMANCY\n\u2022 OTHER\n=> TEMPORARY_BLOCK:\n\
            \u2022 CUSTOMER_REQUEST\n\u2022 CLIENT_REQUEST\n\u2022 SUSPICIOUS_ACTIVITY\n\
            \u2022 POTENTIAL_SANCTION\n\u2022 DORMANT\n\u2022 NON_COMPLIANCE\n\u2022\
            \ POSSIBLE_PEP_MATCH\n\u2022 POSSIBLE_ADVERSE_MEDIA\n=> UNBLOCK:\n\u2022\
            \ CUSTOMER_REQUEST\n\u2022 CLIENT_REQUEST"
          enum:
          - CUSTOMER_REQUEST
          - CLIENT_REQUEST
          - DECEASED
          - ACCOUNT_CLOSURE
          - SUSPICIOUS_ACTIVITY
          - FRAUDULENT_ACTIVITY
          - POTENTIAL_SANCTION
          - SANCTIONED_CUSTOMER
          - BLACKLISTED_CUSTOMER
          - NO_OBJECTION
          - UNRESPONSIVE_CUSTOMER
          - DORMANCY
          - OTHER
          type: string
      required:
      - action
      - reason
      title: BlockCustomerRequestDTO
      type: object
    BranchNameResponseDTO:
      properties:
        city:
          type: string
        district:
          type: string
        ifsc:
          type: string
        state:
          type: string
      title: Branch name response
      type: object
    CustomerBusinessDetailsResponseDTO:
      properties:
        associationDetail:
          $ref: '#/components/schemas/CustomerAssociationDetails'
        businessAddress:
          $ref: '#/components/schemas/CustomerCorporateAddressDTO'
          description: This is an object which contains the business address details.
        businessExtractCoveredStakeholder:
          description: This field contains business extract covered stakeholder which
            specifies if the business extract document given covers the stakeholder
            details. The value for this field can be either Yes or No.
          type: string
        businessName:
          description: This field contains the business name of the entity.
          example: ABCD XYZ LTD
          type: string
        businessName_local:
          description: This field contains the business name of the entity in local
            language.
          example: ABCD XYZ LTD
          type: string
        businessRegistrationNumber:
          description: This field contains the business registration number of the
            entity.
          example: 10519001
          type: string
        businessRegistrationType:
          description: This field contains the business registration number type.
          example: 'null'
          type: string
        businessType:
          description: This field contains the legal entity type of the business.
          example: Public Company
          type: string
        caseId:
          description: This field contains the case ID of the corporate customer.
          example: 'null'
          type: string
        clientId:
          description: This field contains the client ID of the corporate customer.
          example: 'null'
          type: string
        complianceRegion:
          description: This field contains the compliance region of the customer.
          example: SG
          type: string
        description:
          description: This field contains the  description of the business details
          type: string
        documentDetails:
          description: This is an array which contains the document details.
          items:
            $ref: '#/components/schemas/CustomerCorporateDocumentDetailsDTO'
          type: array
        formerName:
          description: This field contains the former name.
          type: string
        legislationName:
          description: This field contains the name of the legislation under which
            the corporate entity being onboarded was formed.
          type: string
        legislationType:
          description: >-
            This field contains the type of the legislation under which the corporate
            entity being onboarded was formed.

            The possible values are:
             Established under Commonwealth legislation
            Established under State

            Territory legislation

            Other
          type: string
        listedExchange:
          description: This field contains the exchange where the company got listed.
          example: internationalExchange
          type: string
        partnershipDetails:
          $ref: '#/components/schemas/CustomerPartnershipDetails'
        referenceId:
          description: This field contains the  reference id of the entity
          type: string
        registeredAddress:
          $ref: '#/components/schemas/CustomerCorporateAddressDTO'
          description: This field is an object which contains the registered address
            details.
        registeredCountry:
          description: This field contains the 2-letter [ISO Alpha-2 country code](https://nium-documents.s3-eu-west-1.amazonaws.com/spend-documents/Country+Code.pdf)
            where business is registered.
          example: AU
          type: string
        registeredDate:
          description: This field contains the business registration date.
          example: '2021-08-10'
          type: string
        regulatoryDetails:
          $ref: '#/components/schemas/CustomerRegulatoryDetails'
        settlorName:
          type: string
        stockSymbol:
          type: string
        taxDetails:
          description: This array contains tax details provided during compliance
            onboarding for EU customers. Otherwise, it contains null.
          items:
            $ref: '#/components/schemas/CustomerTaxDetails'
          type: array
        tradeName:
          description: This field contains the trading name which is also known as
            Doing Business As(DBA)(In case the entity is doing business with a different
            name than the registered business name).
          example: ABCD XYZ
          type: string
        trusteeName:
          type: string
        website:
          description: This field contains the website of the company.
          example: www.abcxyz.com
          type: string
      title: BusinessDetailsResponseDTO
      type: object
    BusinessDetailsResponseV2DTO:
      properties:
        applicantDetails:
          $ref: '#/components/schemas/ApplicantDetailsV2'
        associationDetail:
          $ref: '#/components/schemas/CustomerAssociationDetails'
        businessAddress:
          $ref: '#/components/schemas/AddressV2'
          description: This is an object which contains the business address details.
        businessExtractCoveredStakeholder:
          description: This field contains business extract covered stakeholder which
            specifies if the business extract document given covers the stakeholder
            details. The value for this field can be either Yes or No.
          type: string
        businessName:
          description: This field contains the business name of the entity.
          example: ABCD XYZ LTD
          type: string
        businessName_local:
          description: This field contains the name of a business in local language
          type: string
        businessRegistrationNumber:
          description: This field contains the business registration number of the
            entity.
          example: '10519001'
          type: string
        businessType:
          description: This field contains the legal entity type of the business.
          example: Public Company
          type: string
        description:
          description: This field contains the  description of the business details
          type: string
        documentDetails:
          description: This is an array which contains the document details.
          items:
            $ref: '#/components/schemas/CorporateDocumentDetails2DTO'
          type: array
        formerName:
          description: This field contains the former name.
          type: string
        hasNominee:
          description: This field contains if the entity has a nominee stakeholder
          type: boolean
        isCashIntensiveBusiness:
          description: This field contains if the business is a cash intensive business
          type: boolean
        legalDetails:
          $ref: '#/components/schemas/LegalDetailsV2'
        partnershipDetails:
          $ref: '#/components/schemas/CustomerPartnershipDetails'
        referenceId:
          description: This field contains the  reference id of the entity
          type: string
        registeredAddress:
          $ref: '#/components/schemas/AddressV2'
          description: This field is an object which contains the registered address
            details.
        regulatoryDetails:
          $ref: '#/components/schemas/CustomerRegulatoryDetails'
        settlorName:
          type: string
        stakeholders:
          items:
            $ref: '#/components/schemas/StakeholderV2'
          type: array
        stockSymbol:
          type: string
        taxDetails:
          description: This array contains tax details provided during compliance
            onboarding for EU customers. Otherwise, it contains null.
          items:
            $ref: '#/components/schemas/TaxDetailsResponseDTO'
          type: array
        tradeName:
          description: This field contains the trading name which is also known as
            Doing Business As(DBA)(In case the entity is doing business with a different
            name than the registered business name).
          example: ABCD XYZ
          type: string
        trusteeName:
          type: string
        website:
          type: string
      title: Business details response V2
      type: object
    CustomerBusinessPartnerDetailsResponseDTO:
      properties:
        addressLine1:
          description: This field contains the address line 1 of the registered address.
          type: string
        addressLine2:
          description: This field contains the address line 2 of the registered address.
          type: string
        businessEntityType:
          description: >-
            This field contains the entity type of the business partner. The possible
            values are:

            Director

            Ultimate Beneficial Owner

            Shareholder

            Authorized Signatory

            Authorized Representative

            Protector

            Partner

            Trustee

            Settlor

            Members

            Executor
          type: string
        businessName:
          description: This field contains the registered business name of the business
            partner.
          type: string
        businessType:
          description: >-
            This field contains the legal entity type of the business. The supported
            entity types are:

            Sole Trader

            Private Limited Company

            Public Company

            Partnership

            Limited Liability Partnership Firm

            Government Body

            Associations

            Trust

            Regulated Trust

            Unregulated Trust

            Unincorporated Partnership
          type: string
        capitalContribution:
          description: This field contains the capital contribution of the stakeholder.
            Use the [Fetch Corporate Constants API](ref:fetchcorporateconstants) to
            get the list of valid enum values.
          type: string
        city:
          description: This field contains the city name of the registered address.
          type: string
        country:
          description: This field contains the country name of the registered address.
          type: string
        postcode:
          description: This field contains the postcode of the registered address.
          type: string
        referenceId:
          description: This field contains the unique reference ID.
          type: string
        registeredCountry:
          description: This field contains the 2-letter [ISO Alpha-2 country code](https://nium-documents.s3-eu-west-1.amazonaws.com/spend-documents/Country+Code.pdf).
          type: string
        registeredDate:
          description: This field contains the business registration date.
          type: string
        registrationNumber:
          description: This field contains the registered business registration number
            of the business partner.
          type: string
        sharePercentage:
          description: This field contains the share percentage that the business
            partner or the stakeholder holds in the company.
          type: string
        state:
          description: This field contains the state name of the registered address.
          type: string
      title: BusinessPartnerDetailsResponseDTO
      type: object
    BusinessPartnerLegalDetails:
      properties:
        registeredCountry:
          type: string
        registeredDate:
          type: string
      title: Business partner legal details
      type: object
    BusinessPartnerV2:
      properties:
        businessEntityType:
          type: string
        businessName:
          type: string
        businessRegistrationNumber:
          type: string
        businessType:
          type: string
        capitalContribution:
          type: string
        legalDetails:
          $ref: '#/components/schemas/BusinessPartnerLegalDetails'
        registeredAddress:
          $ref: '#/components/schemas/AddressV2'
        sharePercentage:
          type: string
      title: Business partner V2
      type: object
    ButtonDTO:
      properties:
        borderColor:
          description: This field accepts the client card widget style for button
            border color.
          type: string
        color:
          description: This field accepts the client card widget style for button
            color.
          type: string
        fontSize:
          description: This field accepts the client card widget style for button
            font size.
          type: string
        textColor:
          description: This field accepts the client card widget style for button
            text color.
          type: string
      title: Button
      type: object
    CSSAttributeDTO:
      properties:
        button:
          $ref: '#/components/schemas/ButtonDTO'
          description: This is an object which accepts button properties.
        container:
          $ref: '#/components/schemas/ContainerDTO'
          description: This is an object which accepts container properties.
        inputField:
          $ref: '#/components/schemas/InputFieldDTO'
          description: This is an object which accepts input fields as CSS attributes.
      title: CSS attributes
      type: object
    CardMetaDataResponseDTO:
      properties:
        billingCurrencyCode:
          description: This field contains the 3-letter [ISO-4217 destination currency
            code](/docs/currency-and-country-codes) for the card billing currency.
          type: string
        billingCurrencyMinorDigits:
          description: This field contains the number of decimal positions that should
            be present in any amounts for the requested card's billing currency.
          type: string
        cardIssuerCountryCode:
          description: This field indicates the beneficiary card issuer [country code](/docs/currency-and-country-codes).
          type: string
        cardTypeCode:
          description: This field contains the code of the card type, for example,
            Credit, Debit, Prepaid, Charge, Deferred Debit.
          type: string
        fastFundsIndicator:
          description: This field ensures if the card is eligible for fast funds that
            is if the funds will settle in 30 mins or less. If not eligible then typically
            fund will settle within 2 business days.
          type: string
        isBankSupported:
          description: This field ensures if the issuer bank is supported by the card
            type such as Visa or geoswift.
          type: boolean
        isCardValid:
          description: This field ensures if the card details entered is valid or
            not.
          type: boolean
        issuerName:
          description: This field contains the beneficiary card issuer name.
          type: string
        onlineGambingBlockIndicator:
          description: >-
            This code ensures if the card can receive push-payments for online gambling
            payouts.

            If the value is "Y" then the account cannot receive gambling Push Funds
            (OCTs).

            If the value is "N" then the account can receive gambling Push Funds (OCTs).
          type: string
        pushFundsBlockIndicator:
          description: This field ensures if the associated card can receive push-to-card
            disbursements or not.
          type: string
      title: Card metadata response
      type: object
    CustomerCardWidgetTokenRequestDTO:
      properties:
        cardType:
          type: string
        clientDomain:
          description: This field contains the domain name where the widget needs
            to be embedded
          type: string
        cssAttributes:
          $ref: '#/components/schemas/CSSAttributeDTO'
          description: This is an object which accepts CSS attributes.
        destinationCountry:
          description: This field contains the 2-letter [ISO-2 country code](https://nium-documents.s3-eu-west-1.amazonaws.com/spend-documents/Country+Code.pdf)
            of the destination country.
          type: string
      required:
      - cardType
      title: CardWidgetTokenRequestDTO
      type: object
    CustomerCardWidgetTokenResponse:
      properties:
        widgetUrl:
          type: string
      title: CardWidgetTokenResponse
      type: object
    ComplianceDocumentDTO:
      properties:
        identificationDoc:
          description: >-
            This field is an array which accepts document objects.

            Total size of the array should be less than 10 MB.
          items:
            $ref: '#/components/schemas/ComplianceIdentificationDocDTO'
          type: array
      title: Compliance document
      type: object
    ComplianceDocumentResponseDTO:
      properties:
        status:
          description: "This field contains the status and following are the valid\
            \ values for compliance status:\n\u2022 IN_PROGRESS\n\u2022 ACTION_REQUIRED\n\
            \u2022 RFI_REQUESTED\n\u2022 RFI_RESPONDED\n\u2022 COMPLETED\n\u2022 REJECT\n\
            \u2022 ERROR"
          type: string
      title: Compliance document response
      type: object
    ComplianceIdentificationDocDTO:
      properties:
        identificationDocColor:
          description: This field accepts the color of the medicare card which may
            be one of three values - G, B, Y. It is mandatory for medicare card.
          type: string
        identificationDocExpiry:
          description: "This field accepts the identification document expiry date.\
            \ The valid values are:\ndateOfExpiry for passport\ndateOfExpiry for government\
            \ letter\nformat yyyy-MM-dd "
          type: string
        identificationDocHolderName:
          description: This field accepts the name of the document holder exactly
            according to the proof of identity document uploaded.
          type: string
        identificationDocIssuanceCountry:
          description: This field accepts the country of the issuance for the document
            being uploaded.
          type: string
        identificationDocReferenceNumber:
          description: >-
            This field is mandatory for medicare card and accepts the document reference
            number for the following documents:

            Government Letter

            Bank Statement

            Utility Bill

            Employer Letter

            Medicare Card
          type: string
        identificationDocument:
          description: This is an array of actual Base-64 documents as required. The
            maximum allowed size of this payload is 10MB. A separate object is needed
            for each document image.
          items:
            $ref: '#/components/schemas/IdentificationDocumentDTO'
          type: array
        identificationIssuingAuthority:
          description: This field accepts the authorized issuer of the document for
            example, the name of the government agency issuing the document.
          type: string
        identificationIssuingDate:
          description: >-
            This field accepts the identification issuing date. The valid values are:

            dateOfIssue for FIN

            dateOfIssue for passport

            dateOfIssue for GovernmentLetter

            statementGeneratedOn for BankStatement

            billGeneratedOn for utilityBill
          type: string
        identificationType:
          description: >-
            This field accepts the identificationType for the document being uploaded
            for KYC. Some commonly used values are as follows:

            Selfie

            Passport

            Government Id

            NRIC

            FIN

            Driving Licence

            Government Letter

            Bank Statement

            Utility Bill

            Employer Letter

            Note: For EU, the acceptable values for identificationType are Passport,
            National ID.
          type: string
        identificationValue:
          description: >-
            This field accepts the identification value. The valid values for identificationValue
            are:

            For NRIC/FIN/Passport: Unique NRIC/FIN/passport number.

            For GovernmentID: Unique Id number as per the document.

            For selfieWithId/GovernmentLetter: Blank

            For others(as proof of address): Unique number as per document or blank(can
            pass the value in identificationDocReferenceNumber)
          type: string
      required:
      - identificationType
      title: Compliance identification document
      type: object
    ContactDetailsResponseDTO:
      properties:
        contactNo:
          type: string
        countryCode:
          type: string
        email:
          type: string
      title: Contact details response
      type: object
    ContainerDTO:
      properties:
        backgroundColor:
          description: This field accepts the client card widget style for container
            background color.
          type: string
        borderColor:
          description: This field accepts the client card widget style for container
            border color.
          type: string
      title: Container
      type: object
    CustomerCorporateAddressDTO:
      properties:
        address1:
          description: This field contains the address line 1 of the stakeholder's
            address.
          example: 221 Mulford Drive
          type: string
        address2:
          description: This field contains the address line 2 of the stakeholder's
            address.
          example: Johnson Square
          type: string
        city:
          description: This field contains the city of the stakeholder's address.
          example: Sydney
          type: string
        country:
          description: This field contains the country of the stakeholder's address.
          example: AU
          type: string
        state:
          description: This field contains the state of the stakeholder's address.
          example: New South Wales
          type: string
        zipCode:
          description: This field contains the zipCode of the stakeholder's address.
          example: 2001
          type: string
      title: CorporateAddressDTO
      type: object
    CorporateBusinessDetailsDocumentDetailDTO:
      properties:
        document:
          items:
            $ref: '#/components/schemas/Document1'
          type: array
        documentType:
          type: string
      title: Corporate business details document detail
      type: object
    CorporateComplianceDocumentRequestDTO:
      properties:
        businessDetails:
          $ref: '#/components/schemas/CorporateDocumentUploadBusinessDetailsDTO'
        region:
          type: string
      title: Corporate compliance document request
      type: object
    CorporateComplianceDocumentResponseDTO:
      properties:
        caseId:
          description: This field contains the case ID of the corporate customer.
          example: e18577fa-837b-43d1-a7c6-852404ed86e7
          type: string
        clientId:
          description: This field contains the client ID of the corporate customer.
          example: NIM1651497934275
          type: string
        remarks:
          description: This field contains the uploaded document remarks of the corporate
            customer.
          example: upload success
          type: string
        status:
          description: This field contains the uploaded document status of the corporate
            customer.
          example: Success
          type: string
      title: Corporate compliance document response
      type: object
    CustomerCorporateCustomerResponseDTO:
      properties:
        businessDetails:
          $ref: '#/components/schemas/BusinessDetailsResponseV2DTO'
        caseId:
          type: string
        clientId:
          description: >-
            This field accepts the NIUM client Id of the customer. This field should
            be provided only while performing the re-initiate KYB process.


            AU: Optional

            EU: Optional

            UK: Optional

            SG: Optional
          type: string
        complianceRegion:
          description: >-
            This field accepts the region code for which onboarding has been triggered.
            The acceptable value are:

            AU

            EU

            UK

            SG


            AU: Required

            EU: Required

            UK: Required

            SG: Required
          type: string
        expectedAccountUsage:
          $ref: '#/components/schemas/ExpectedAccountUsageDTO'
        natureOfBusiness:
          $ref: '#/components/schemas/NatureOfBusinessDTO'
        riskAssessmentInfo:
          $ref: '#/components/schemas/RiskAssessmentInfoV2'
      title: CorporateCustomerResponseDTO
      type: object
    CorporateDocumentDetails2DTO:
      properties:
        documentIssuanceCountry:
          description: This field contains the identification issuance Country value
            of each uploaded document, which was provided during document upload.
          example: SG
          type: string
        identificationType:
          description: "This field contains the identification document type. The\
            \ possible identification document type are:\nAU: Passport, Driver Licence,\
            \ Medicare Number \nUK & EU: National ID & Passport"
          example: PASSPORT
          type: string
        identificationValue:
          description: This field contains the masked value of the selected identificationType.
          example: XXXXXXXXX
          type: string
      title: Corporate document details2
      type: object
    CustomerCorporateDocumentDetailsDTO:
      properties:
        documentIssuanceCountry:
          description: This field contains the identification issuance Country value
            of each uploaded document, which was provided during document upload.
          example: SG
          type: string
        identificationType:
          description: "This field contains the identification document type. The\
            \ possible identification document type are:\nAU: Passport, Driver Licence,\
            \ Medicare Number \nUK & EU: National ID & Passport"
          example: PASSPORT
          type: string
        identificationValue:
          description: This field contains the identification document value of each
            uploaded document, which was provided during document upload.
          example: 234234423
          type: string
      title: CorporateDocumentDetailsDTO
      type: object
    CorporateDocumentUploadApplicantDetailsDTO:
      properties:
        documentDetails:
          items:
            $ref: '#/components/schemas/CustomerDocumentDetail'
          type: array
        referenceId:
          type: string
      title: Corporate document upload applicant details
      type: object
    CorporateDocumentUploadBusinessDetailsDTO:
      properties:
        applicantDetails:
          $ref: '#/components/schemas/CorporateDocumentUploadApplicantDetailsDTO'
        documentDetails:
          items:
            $ref: '#/components/schemas/CorporateBusinessDetailsDocumentDetailDTO'
          type: array
        referenceId:
          type: string
        stakeholders:
          items:
            $ref: '#/components/schemas/CorporateDocumentUploadStakeholdersDTO'
          type: array
      title: Corporate document upload business details
      type: object
    CorporateDocumentUploadStakeholderDetailsDTO:
      properties:
        documentDetails:
          items:
            $ref: '#/components/schemas/CustomerDocumentDetail'
          type: array
      title: Corporate document upload stakeholder details
      type: object
    CorporateDocumentUploadStakeholdersDTO:
      properties:
        referenceId:
          type: string
        stakeholderDetails:
          $ref: '#/components/schemas/CorporateDocumentUploadStakeholderDetailsDTO'
      title: Corporate document upload stakeholders
      type: object
    CustomerAccountDetail:
      properties:
        walletHashId:
          type: string
      title: Customer account detail
      type: object
    CustomerClientTagRequestDTO:
      properties:
        action:
          description: "This field accepts the action which determines the type of\
            \ operation that needs to be performed. The possible values are:\n\u2022\
            \ DELETE: When tag needs to be deleted.\n\u2022 MAINTAIN: When tags need\
            \ to be added or updated."
          enum:
          - MAINTAIN
          - DELETE
          type: string
        key:
          description: >-
            This field accepts the name of the tag.

            The maximum key length limit is 128 characters.
          type: string
        value:
          description: >-
            This field accepts the value of the tag.

            The maximum value length limit is 256 characters.

            Note: If the tags.action is MAINTAIN and the value is not present for
            a tag, then the system will not perform any operation on it.
          type: string
      required:
      - action
      - key
      - value
      title: Client tags
      type: object
    CustomerClientTagResponseDTO:
      properties:
        key:
          description: This field contains the name of the tag.
          type: string
        message:
          description: This field contains the status message related to tag operation.
          type: string
      title: Client tag response
      type: object
    CustomerClientTagsRequestDTO:
      properties:
        tags:
          description: >-
            This object accepts the user defined key-value pairs.

            The maximum number of tags allowed is 15.
          items:
            $ref: '#/components/schemas/CustomerClientTagRequestDTO'
          type: array
      required:
      - tags
      title: Client tags request
      type: object
    CustomerClientTagsResponseDTO:
      properties:
        tags:
          description: This object contains the user defined key-value pairs.
          items:
            $ref: '#/components/schemas/CustomerClientTagResponseDTO'
          type: array
      title: Client tags response
      type: object
    CustomerDataExternalRequestDTO:
      properties:
        countryCode:
          description: "This field accepts the 2-letter [ISO Alpha-2 country code](/docs/currency-and-country-codes)\
            \ denoting the country prefix code to the customer\u2019s mobile number."
          example: SG
          type: string
        customerHashId:
          description: This field accepts the previously generated unique customer
            identifier of customer.
          format: uuid
          type: string
        email:
          description: >-
            This field accepts the unique email address of the customer.

            Maximum character limit: 60
          example: john@abc.com
          type: string
        mobile:
          description: >-
            This field accepts the mobile number of the customer--digits only--without
            the country code.

            Maximum character limit: 20
          example: '4435544567'
          type: string
        nativeLanguageName:
          description: >-
            This field accepts the customer's name in native language.

            Maximum character limit: 40
          type: string
        segment:
          description: >-
            This field accepts the fee segment associated with a client.

            Maximum character limit: 64
          type: string
        upgradeRequest:
          type: boolean
      required:
      - countryCode
      - email
      - mobile
      title: Data external request
      type: object
    CustomerDataExternalResponseDTO:
      properties:
        complianceStatus:
          description: "This field contains the detailed compliance status of the\
            \ customer. While initiating MyInfo, this field would usually be INITIATED.\
            \ List of all possible values of complianceStatus field are:\n\u2022 INITIATED\n\
            \u2022 IN_PROGRESS\n\u2022 ACTION_REQUIRED\n\u2022 RFI_REQUESTED\n\u2022\
            \ COMPLETED\n\u2022 REJECT\n\u2022 ERROR\n\u2022 EXPIRED\n\u2022 CLOSED"
          type: string
        customerHashId:
          description: This field contains the unique customer identifier generated
            on customer creation.
          type: string
        kycStatus:
          description: "This field contains the overall KYC status of the customer.\
            \ While initiating MyInfo, this field would usually be Pending. The possible\
            \ values of kycStatus are:\n\u2022 Pending\n\u2022 Clear\n\u2022 Failed"
          type: string
        paymentIds:
          description: This is an array which contains the paymentIds assigned to
            the customer.
          items:
            $ref: '#/components/schemas/CustomerPaymentIdDTO'
          type: array
        redirectUrl:
          description: This field contains the URL returned for myinfo details.
          type: string
        walletHashId:
          description: This field contains the unique wallet identifier generated
            simultaneously with customer creation.
          type: string
      title: Data external response
      type: object
    CustomerDataRequestDTO:
      properties:
        additionalInfo:
          additionalProperties:
            type: string
          description: "This is key/value pair object which accepts additional info.\
            \ Expected keys are identificationType and identificationValue \n\nidentificationType\
            \  : This field accepts the name of the identification type, for example,\
            \ Passport. \nNote: This field is mandatory for certain clients with certain\
            \ KYC modes pre-approved by NIUM's compliance or when the KYC mode is\
            \ Screening. If you have plans to offer the Payout/Send feature, reach\
            \ out to your NIUM's representative to discuss on the requirement of this\
            \ field.\n\n identificationValue : This field accepts the identification\
            \ value provided by the customer.\nNote: This field is mandatory for certain\
            \ clients with KYC modes pre-approved by NIUM's compliance or when the\
            \ KYC mode is Screening.\n\nExample : {\n\"identificationType\": \"Passport\"\
            , \n\"identificationValue\" : \"P123456A\"\n}"
          example:
            identificationType: Passport
            identificationValue: P123456A
          type: object
        billingAddress1:
          description: "This field accepts the line 1 of customer\u2019s billing address.\n\
            Maximum character limit: 40"
          example: 72 James Buildin
          type: string
        billingAddress2:
          description: "This field accepts the line 2 of customer\u2019s billing address.\n\
            Maximum character limit: 40"
          example: Springfield Road
          type: string
        billingCity:
          description: "This field accepts the city of customer\u2019s billing address.\n\
            Maximum character limit: 20"
          example: Paris
          type: string
        billingCountry:
          description: "This field accepts the 2-letter [ISO Alpha-2 country code](/docs/currency-and-country-codes)\
            \ denoting the country of customer\u2019s billing address."
          example: FR
          type: string
        billingLandmark:
          description: "This field accepts the landmark for customer\u2019s billing\
            \ address.\nMaximum character limit: 40"
          example: near Post Office
          type: string
        billingState:
          description: "This field accepts the state of customer\u2019s billing address.\n\
            Maximum character limit: 30"
          example: Ile-de-France
          type: string
        billingZipCode:
          description: "This field accepts the zipcode of customer\u2019s billing\
            \ address.\nMaximum character limit: 10"
          example: 048581
          type: string
        birthCountry:
          type: string
        correspondenceAddress1:
          description: >-
            This field accepts the line 1 of customer's correspondence address.

            Maximum character limit: 40
          example: 472 James Building
          type: string
        correspondenceAddress2:
          description: >-
            This field accepts the line 2 of customer's correspondence address.

            Maximum character limit: 40
          example: Springfield Road
          type: string
        correspondenceCity:
          description: >-
            This field accepts the city of customer's correspondence address.

            Maximum character limit: 20
          example: Paris
          type: string
        correspondenceCountry:
          description: This field accepts the 2-letter [ISO Alpha-2 country code](/docs/currency-and-country-codes)
            denoting the country of customer's correspondence address.
          example: FR
          type: string
        correspondenceLandmark:
          description: >-
            This field accepts the landmark for customer's correspondence address.

            Maximum character limit: 40
          example: near Post Office
          type: string
        correspondenceState:
          description: "This field accepts the state of customer\u2019s correspondence\
            \ address.\nMaximum character limit: 30"
          example: Ile-de-France
          type: string
        correspondenceZipCode:
          description: >-
            This field accepts the zipcode of customer's correspondence address.

            Maximum character limit: 10
          example: 048581
          type: string
        countryCode:
          description: "This field accepts the 2-letter [ISO Alpha-2 country code](/docs/currency-and-country-codes)\
            \ denoting the country prefix code to the customer\u2019s mobile number."
          example: SG
          type: string
        countryIP:
          description: The country IP for the device by the customer for initiating
            the request.
          example: 2.2.2.2
          type: string
        countryOfBirth:
          description: "This field accepts the 2-letter [ISO country code](/docs/currency-and-country-codes)\
            \ denoting the customer\u2019s country of birth.\nNote:This field is mandatory\
            \ for EU and UK."
          example: FR
          type: string
        customerHashId:
          description: This field accepts previously generated unique customer identifier
            of customer.
          example: 2992c5c6-823b-4fa9-a64b-add0ea88bb66
          format: uuid
          type: string
        customerKycStatus:
          type: string
        dateOfBirth:
          description: >-
            This field accepts the date of birth of the customer in YYYY-MM-DD format.

            Minimum customer age should be 18 years. Discuss with your NIUM account
            manager for any special use-cases.
          example: '1995-01-13'
          type: string
        deliveryAddress1:
          description: "This field accepts the line 1 of customer\u2019s delivery\
            \ address.\nMaximum character limit: 40"
          example: 472 James Building
          type: string
        deliveryAddress2:
          description: >-
            This field accepts the line 2 of customer's delivery address.

            Maximum character limit: 40
          example: Springfield Road
          type: string
        deliveryCity:
          description: "This field accepts the city of customer\u2019s delivery address.\n\
            Maximum character limit: 20"
          example: Paris
          type: string
        deliveryCountry:
          description: "This field accepts the 2-letter [ISO Alpha-2 country code](/docs/currency-and-country-codes)\
            \ denoting the country of customer\u2019s billing address."
          example: FR
          type: string
        deliveryLandmark:
          description: >-
            This field accepts the landmark for customer's delivery address.

            Maximum character limit: 40
          example: near Post Office
          type: string
        deliveryState:
          description: >-
            This field accepts the state of customer's delivery address.

            Maximum character limit: 30
          example: Ile-de-France
          type: string
        deliveryZipCode:
          description: >-
            This field accepts the zipcode of customer's delivery address.

            Maximum character limit: 10
          example: 048581
          type: string
        deviceInfo:
          description: The OS of the device used by the customer for initiating the
            request.
          example: android
          type: string
        email:
          description: >-
            This field accepts the unique email address of the customer.
             Maximum character limit: 60
          example: arnav42@xyzmail.com
          type: string
        enableDocUpload:
          type: boolean
        estimatedMonthlyFunding:
          description: >-
            This field accepts the estimated monthly funding amount expected in the
            wallet. This field is required when estimatedMonthlyFundingCurrency field
            is provided in the request.

            Note:This field is mandatory for EU and UK.
          enum:
          - <1000
          - 1000-5000
          - 5001-10000
          - 10001-20000
          - '>20000'
          type: string
        estimatedMonthlyFundingCurrency:
          description: >-
            This field accepts the 3-letter [ISO-4217 currency code](/docs/currency-and-country-codes)
            in which estimated monthly funding is expected in the wallet, for example,
            SGD.

            Note:This field is mandatory for EU and UK.
          example: EUR
          type: string
        expectedCountriesToSendReceiveFrom:
          description: "This is an array of 2-letter [ISO Alpha-2 country code](/docs/currency-and-country-codes)\
            \ to allow the client to capture the expected countries to send/receive\
            \ international payments from. This field is required when internationalPaymentsSupported\
            \ field is true, for example, [\u201CFR\u201D, \u201CDE\u201D].\nNote:This\
            \ field is mandatory for EU and UK."
          example:
          - FR
          - DE
          items:
            type: string
          type: array
        firstName:
          description: >-
            This field accepts the first name of the customer.
             Maximum character limit: 40
          example: Arnav
          type: string
        gender:
          description: This field accepts the gender of the customer.
          enum:
          - Male
          - Female
          - Others
          example: Male
          type: string
        identificationDoc:
          items:
            $ref: '#/components/schemas/ComplianceIdentificationDocDTO'
          type: array
        intendedUseOfAccount:
          description: "This field accepts customer\u2019s intended use of account.\n\
            Note:This field is mandatory for EU and UK."
          enum:
          - Receiving from/Transfers to accounts I own
          - Receiving from/Transfers to friends or family
          - Property goods or services payments
          - Education-related payment
          - Investments
          - Receive or send donations
          - Saving
          - Day-to-day spending
          - Receiving a salary
          example: Receiving from/Transfers to friends or family
          type: string
        internationalPaymentsSupported:
          description: >-
            This field indicates if the customer will be doing International send/receive
            payments. The default value will be false.

            Note:This field is mandatory for EU and UK.
          example: true
          type: boolean
        ipAddress:
          description: The IP address of the device used by the customer for initiating
            the request.
          example: 1.1.1.1
          type: string
        kyc:
          type: boolean
        lastName:
          description: >-
            This field accepts the last name of the customer.

            Maximum character limit: 40
          example: Paul
          type: string
        middleName:
          description: >-
            This field accepts the middle name of the customer.
             Maximum character limit: 40
          example: Kumar
          type: string
        mobile:
          description: >-
            This field accepts the mobile number of the customer--digits only--without
            the country code.

            Maximum character limit: 20
          example: '991122142'
          type: string
        nationality:
          description: "This field accepts the 2-letter [ISO Alpha-2 country code](/docs/currency-and-country-codes)\
            \ denoting the customer\u2019s citizenship."
          example: SG
          type: string
        nativeLanguageName:
          description: >-
            This field contains the customer's name in native language.
             Maximum character limit: 40
          example: "\u754C\u9650"
          type: string
        occupation:
          description: "This field accepts the customer\u2019s occupation. Refer to\
            \ [Enum values](https://docs.nium.com/apis/docs/unified-add-customer-api)\
            \ for the description. \n Note: This field is mandatory for CA."
          enum:
          - OC0001
          - OC1001
          - OC1002
          - OC1003
          - OC1110
          - OC1120
          - OC1201
          - OC1210
          - OC1211
          - OC1220
          - OC1310
          - OC1311
          - OC1320
          - OC1410
          - OC1411
          - OC1420
          - OC1430
          - OC1440
          - OC2001
          - OC2110
          - OC2111
          - OC2112
          - OC2120
          - OC2121
          - OC2122
          - OC2123
          - OC2130
          - OC2131
          - OC2132
          - OC2133
          - OC2139
          - OC2210
          - OC2211
          - OC2221
          - OC2222
          - OC2223
          - OC2230
          - OC2231
          - OC3001
          - OC3110
          - OC3111
          - OC3112
          - OC3120
          - OC3130
          - OC3210
          - OC3211
          - OC3212
          - OC3220
          - OC3310
          - OC4001
          - OC4002
          - OC4003
          - OC4004
          - OC4110
          - OC4120
          - OC4121
          - OC4122
          - OC4130
          - OC4131
          - OC4132
          - OC4140
          - OC4210
          - OC4220
          - OC4310
          - OC4320
          - OC4410
          - OC4420
          - OC4510
          - OC5001
          - OC5110
          - OC5111
          - OC5112
          - OC5210
          - OC5211
          - OC5212
          - OC5310
          - OC5311
          - OC5312
          - OC5320
          - OC5410
          - OC5510
          - OC6001
          - OC6002
          - OC6003
          - OC6004
          - OC6201
          - OC6202
          - OC6210
          - OC6220
          - OC6310
          - OC6320
          - OC6321
          - OC6322
          - OC6410
          - OC6420
          - OC6430
          - OC6431
          - OC6432
          - OC6440
          - OC6441
          - OC6510
          - OC6520
          - OC6521
          - OC6522
          - OC6531
          - OC6532
          - OC7001
          - OC7002
          - OC7201
          - OC7202
          - OC7210
          - OC7220
          - OC7230
          - OC7231
          - OC7232
          - OC7240
          - OC7241
          - OC7242
          - OC7250
          - OC7260
          - OC7299
          - OC7310
          - OC7311
          - OC7320
          - OC7330
          - OC7331
          - OC7340
          - OC7410
          - OC7420
          - OC7510
          - OC7511
          - OC7520
          - OC7521
          - OC8001
          - OC8002
          - OC8201
          - OC8202
          - OC8203
          - OC8310
          - OC8311
          - OC8312
          - OC8410
          - OC8411
          - OC8412
          - OC8510
          - OC8511
          - OC8512
          - OC9001
          - OC9201
          - OC9202
          - OC9210
          - OC9310
          - OC9320
          - OC9410
          - OC9411
          - OC9412
          - OC9413
          - OC9414
          - OC9415
          - OC9420
          - OC9421
          - OC9510
          type: string
        pep:
          description: >-
            This field will ensure either a customer is a Politically Exposed Person
            (PEP) or not.

            Note:This field is mandatory for EU and UK.
          example: false
          type: boolean
        preferredName:
          description: >-
            This field accepts the common name or preferred name of the customer.
            It is also acceptable to pass the first name in this field.

            Maximum character limit: 40
          example: Arnav
          type: string
        segment:
          description: >-
            This is the fee segment associated with a client.

            Maximum character limit: 64
          example: gold
          type: string
        sessionId:
          description: The session Id for the session of the customer for initiating
            the request.
          example: '1234'
          type: string
        taxDetails:
          description: >-
            This is an array of tax details provided for compliance onboarding for
            EU customers.

            Note:This field is mandatory for EU and UK.
          items:
            $ref: '#/components/schemas/CustomerCustomerTaxDetailDTO'
          type: array
        upgradeRequest:
          type: boolean
      required:
      - billingAddress1
      - billingCity
      - billingCountry
      - billingZipCode
      - countryCode
      - customerHashId
      - dateOfBirth
      - deliveryAddress1
      - deliveryCity
      - deliveryCountry
      - deliveryZipCode
      - email
      - firstName
      - lastName
      - mobile
      - nationality
      - pep
      - taxDetails
      title: Data request
      type: object
    CustomerCustomerDetailResponse:
      properties:
        tags:
          additionalProperties:
            type: string
          description: This object contains the user defined key-value pairs provided
            by the client.
          type: object
        billingAddress1:
          description: "This field contains the line 1 of customer\u2019s [INDIVIDUAL]\
            \ or applicant\u2019s [CORPORATE] billing address, which is used for KYC."
          example: 221 Mulford Drive
          type: string
        billingAddress2:
          description: "This field contains the line 2 of customer\u2019s [INDIVIDUAL]\
            \ or applicant\u2019s [CORPORATE] billing address, if provided during\
            \ customer onboarding.\nOtherwise, it contains null."
          example: Johnson Square
          type: string
        billingCity:
          description: "This field contains the city of customer\u2019s [INDIVIDUAL]\
            \ or applicant\u2019s [CORPORATE] billing address."
          example: Sydney
          type: string
        billingCountry:
          description: "This field contains the 2-letter [ISO Alpha-2 country code](https://nium-documents.s3-eu-west-1.amazonaws.com/spend-documents/Country+Code.pdf)\
            \ of customer\u2019s [INDIVIDUAL] or applicant\u2019s [CORPORATE] billing\
            \ address, if provided during customer onboarding.\nOtherwise, it contains\
            \ null."
          example: AU
          type: string
        billingLandmark:
          description: "This field contains the landmark for customer\u2019s [INDIVIDUAL]\
            \ or applicant\u2019s [CORPORATE] billing address, if provided during\
            \ customer onboarding.\nOtherwise, it contains null."
          example: 'null'
          type: string
        billingState:
          description: "This field contains the state of customer\u2019s [INDIVIDUAL]\
            \ or applicant\u2019s [CORPORATE] billing address, if provided during\
            \ customer onboarding.\nOtherwise, it contains null."
          example: New South Wales
          type: string
        billingZipCode:
          description: "This field contains the zip code of customer\u2019s [INDIVIDUAL]\
            \ or applicant\u2019s [CORPORATE] billing address."
          example: 2001
          type: string
        blockComment:
          description: This field contains the comment entered while blocking the
            customer, if applicable. Otherwise, it contains null.
          example: 'null'
          type: string
        blockReason:
          description: This field contains the reason for blocking the customer, if
            applicable. Otherwise, it contains null.
          enum:
          - CUSTOMER_REQUEST
          - CLIENT_REQUEST
          - DECEASED
          - ACCOUNT_CLOSURE
          - SUSPICIOUS_ACTIVITY
          - FRAUDULENT_ACTIVITY
          - POTENTIAL_SANCTION
          - SANCTIONED_CUSTOMER
          example: 'null'
          type: string
        blockUpdatedBy:
          description: This field contains the details of the entity updating a customer
            block/unblock, if applicable. Otherwise, it contains null. The possible
            values are CLIENT or NIUM.
          enum:
          - NIUM
          - CLIENT
          example: NIUM
          type: string
        businessDetails:
          $ref: '#/components/schemas/CustomerBusinessDetailsResponseDTO'
          description: This object may contain the business details in certain client
            onboarding flows. It is null for individual customer onboarding flows.
        businessPartner:
          items:
            $ref: '#/components/schemas/CustomerBusinessPartnerDetailsResponseDTO'
          type: array
        complianceLevel:
          description: >-
            This field contains the compliance level for the customer.

            The possible values for customer type INDIVIDUAL are: SCREENING_KYC, SCREENING,
            SCREENING_KYB.

            The possible values for customer type CORPORATE is SCREENING_KYB.
          example: SCREENING_KY
          type: string
        complianceRemarks:
          description: This field contains the compliance remarks from Compliance
            officer, if applicable.
          example: APPLICANT -> VERIFIED|DIRECTOR -> VERIFIED
          type: string
        complianceStatus:
          description: This field contains the overall compliance status of the customer.
          enum:
          - INITIATED
          - IN_PROGRESS
          - ACTION_REQUIRED
          - RFI_REQUESTED
          - COMPLETED
          - REJECT
          - ERROR
          - EXPIRED
          - CLOSED
          example: IN_PROGRESS
          type: string
        countryCode:
          description: "This field contains the 2-letter [ISO-2 country code](https://nium-documents.s3-eu-west-1.amazonaws.com/spend-documents/Country+Code.pdf)\
            \ for identifying the country prefix to the customer\u2019s mobile number."
          example: AU
          type: string
        countryOfBirth:
          description: "This field contains the 2-letter [ISO Alpha-2 country code](https://nium-documents.s3-eu-west-1.amazonaws.com/spend-documents/Country+Code.pdf)\
            \ denoting the customer\u2019s country of birth."
          example: 'null'
          type: string
        createdAt:
          description: This field contains the timestamp of customer creation in the
            format YYY-MM-DD hh:mm:ss, for example, 2021-07-29 06:11:43.
          example: '2021-09-13 14:59:48'
          format: date-time
          type: string
        customerHashId:
          description: This field contains the unique customer identifier generated
            at the time of customer creation.
          example: 190dddbe-fdbc-48fe-a7c2-d55266e9acf5
          type: string
        customerId:
          description: This field contains an internal NIUM customer identifier. This
            field shall be deprecated in future.
          example: 62654
          format: int64
          type: integer
        customerType:
          description: This field contains the customer type which is either <B>INDIVIDUAL</B>
            or <B>CORPORATE</B> and this depends on customer onboarding flows.
          enum:
          - INDIVIDUAL
          - CORPORATE
          example: CORPORATE
          type: string
        dateOfBirth:
          description: This field contains the date of birth of the customer [INDIVIDUAL]
            or applicant [CORPORATE] in YYYY-MM-DD format.
          example: '1992-08-09'
          type: string
        deliveryAddress1:
          description: This field contains the line 1 of customer [INDIVIDUAL] or
            applicant [CORPORATE] delivery address. It is used for card delivery.
          example: 221 Mulford Drive
          type: string
        deliveryAddress2:
          description: "This field contains the line 2 of customer\u2019s [INDIVIDUAL]\
            \ or applicant\u2019s [CORPORATE] delivery address, if provided during\
            \ customer onboarding. It is used for card delivery.\nOtherwise, it contains\
            \ null."
          example: ohnson Squar
          type: string
        deliveryCity:
          description: "This field contains the city of customer\u2019s [INDIVIDUAL]\
            \ or applicant\u2019s [CORPORATE] delivery address."
          example: Sydney
          type: string
        deliveryCountry:
          description: "This field contains the 2-letter [ISO Alpha-2 country code](https://nium-documents.s3-eu-west-1.amazonaws.com/spend-documents/Country+Code.pdf)\
            \ of customer\u2019s [INDIVIDUAL] or applicant\u2019s [CORPORATE] delivery\
            \ address, if provided during customer onboarding.\nOtherwise, it contains\
            \ null."
          example: AU
          type: string
        deliveryLandmark:
          description: "This field contains the landmark for customer\u2019s [INDIVIDUAL]\
            \ or applicant\u2019s [CORPORATE] delivery address, if provided during\
            \ customer onboarding.\nOtherwise, it contains null."
          example: 'null'
          type: string
        deliveryState:
          description: "This field contains the state of customer\u2019s [INDIVIDUAL]\
            \ or applicant\u2019s [CORPORATE] delivery address, if provided during\
            \ customer onboarding.\nOtherwise, it contains null."
          example: New South Wale
          type: string
        deliveryZipCode:
          description: "This field contains the zip code of customer\u2019s [INDIVIDUAL]\
            \ or applicant\u2019s [CORPORATE] delivery address."
          example: 2001
          type: string
        designation:
          description: This field contains the designation of an employee, if provided
            during customer onboarding. Otherwise, it contains null.
          example: 'null'
          type: string
        email:
          description: This field contains the unique email address of the customer.
          example: xyzabc@abcmail.com
          type: string
        employeeId:
          description: This field contains the employee ID of an employee, if provided
            during customer onboarding. Otherwise, it contains null.
          example: 'null'
          type: string
        estimatedMonthlyFunding:
          description: This field contains the estimated monthly funding amount expected
            in the wallet. This field is required when estimatedMonthlyFundingCurrency
            field is provided in the request.
          enum:
          - <1000
          - 1000-5000
          - 5001-10000
          - 10001-20000
          - '>20000'
          example: 1000-5000
          type: string
        estimatedMonthlyFundingCurrency:
          description: This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html)
            in which estimated monthly funding is expected in the wallet, for example,
            SGD.
          example: EUR
          type: string
        expectedCountriesToSendReceiveFrom:
          description: "This is an array of 2-letter [ISO Alpha-2 country code](https://nium-documents.s3-eu-west-1.amazonaws.com/spend-documents/Country+Code.pdf)\
            \ to allow the client to capture the expected countries to send/receive\
            \ international payments from. This field is required when internationalPaymentsSupported\
            \ field is true, for example, [\u201CFR\u201D, \u201CDE\u201D]."
          example: FR
          items:
            type: string
          type: array
        firstName:
          description: This field contains the first name of the customer [INDIVIDUAL]
            or applicant [CORPORATE].
          example: ABCD XYZ
          type: string
        gender:
          description: >-
            This field contains the gender of the customer [INDIVIDUAL] or applicant
            [CORPORATE], if provided during customer onboarding. The possible values
            are - Male, Female, or Others.

            Otherwise, it contains null.
          example: Male
          type: string
        identificationData:
          description: This array contains objects consisting of type and value of
            each uploaded document.
          example: 'null'
          items:
            $ref: '#/components/schemas/Map_string_string_'
          type: array
        identificationTypes:
          description: This array contains the list of identification used during
            KYC. Otherwise, it contains null.
          example: 'null'
          items:
            type: string
          type: array
        intendedUseOfAccount:
          description: "This flag contains the customer\u2019s intended use of account."
          example: 'null'
          type: string
        internationalPaymentsSupported:
          description: This field indicates if the customer will be doing International
            send/receive payments. The default value will be false.
          example: true
          type: boolean
        kycMode:
          description: "This field contains the kyc mode \nThe possible values for\
            \ customer type INDIVIDUAL are: E_KYC, MANUAL_KYC, SCREENING, EVERIFY_KYC,\
            \ or NONE. \nThe possible values for customer type CORPORATE are: KYB\
            \ or NONE."
          example: MANUAL_KYC
          type: string
        lastName:
          description: This field contains the last name of the customer [INDIVIDUAL]
            or applicant [CORPORATE].
          example: PVT LTD
          type: string
        middleName:
          description: >-
            This field contains the middle name of the customer [INDIVIDUAL] or applicant
            [CORPORATE], if provided.

            Otherwise, it contains null.
          example: 'null'
          type: string
        mobile:
          description: This field contains the mobile number of the customer without
            the country code.
          example: 950030024
          type: string
        nationality:
          description: This field contains the 2-letter [ISO Alpha-2 country code](https://nium-documents.s3-eu-west-1.amazonaws.com/spend-documents/Country+Code.pdf)
            denoting the customer [INDIVIDUAL] or applicant [CORPORATE] citizenship.
          example: AU
          type: string
        nativeLanguageName:
          description: This field contains the name of the customer in native language,
            if provided during customer onboarding. Otherwise, it contains null
          example: 'null'
          type: string
        paymentIds:
          description: This field contains the unique payment Ids assigned to the
            customer.
          items:
            $ref: '#/components/schemas/CustomerPaymentIdDTO'
          type: array
        pep:
          description: This flag indicates if a customer is a Politically Exposed
            Person (PEP) or not.
          example: false
          type: boolean
        preferredName:
          description: This field contains the preferred name of the customer[INDIVIDUAL]
            or business name [CORPORATE].
          example: ABCD XYZ LT
          type: string
        professionalDetails:
          description: This array contains the applicant's professional details information
          items:
            $ref: '#/components/schemas/CustomerProfessionalDetails'
          type: array
        referenceId:
          description: This field contains the  applicant's reference id
          type: string
        regulatoryRegion:
          description: This field contains the regulatory region of the customer.
          enum:
          - SG
          - EU
          - AU
          - HK
          - UK
          example: SG
          type: string
        remarks:
          description: This field contains any system-generated compliance comments,
            if applicable.
          example: VERIFIED
          type: string
        rfiDetails:
          description: This array contains the details of RFI, if raised. Otherwise,
            it contains null.
          example: 'null'
          items:
            $ref: '#/components/schemas/CustomerRfiDetailsResponse'
          type: array
        riskAssessmentInfo:
          $ref: '#/components/schemas/RiskAssessmentInfoResponseDTO'
          description: This object may contain the risk assessment details in certain
            client onboarding flows. It is null for individual customer onboarding
            flows.
        segment:
          description: This field contains the fee segment applicable to the customer.
            Otherwise, it contains null.
          example: 'null'
          type: string
        stakeholderDetails:
          description: This is an array object may contain the stakeholder details
            in certain client onboarding flows. It is null for individual customer
            onboarding flows.
          items:
            $ref: '#/components/schemas/CustomerStakeholderDetailsResponseDTO'
          type: array
        status:
          description: This field contains the overall KYC status of the customer
          enum:
          - Pending
          - Clear
          - Failed
          - Suspended
          - Blocked
          example: Clear
          type: string
        taxDetails:
          description: This array contains tax details provided during compliance
            onboarding for EU customers. Otherwise, it contains null.
          items:
            $ref: '#/components/schemas/CustomerCustomerTaxDetailDTO'
          type: array
        termsAndConditionAcceptanceFlag:
          description: This flag denotes that the customer has accepted the Terms
            and Conditions.
          example: false
          type: boolean
        termsAndConditionName:
          description: This name that the customer has accepted the Terms and Conditions.
          example: B2BGENERIC
          type: string
        termsAndConditionVersionId:
          description: This version that the customer has accepted the Terms and Conditions.
          example: 1
          type: string
        updatedAt:
          description: This field contains the timestamp of last customer updation
            in the format YYY-MM-DD hh:mm:ss, for example, 2021-07-29 06:11:43.
          example: '2021-09-13 14:59:51'
          format: date-time
          type: string
        verificationConsent:
          description: This flag contain the customer consent to proceed in case e-Document
            verification flow is initiated.
          example: false
          type: boolean
        walletHashId:
          description: This field contains the unique wallet identifier generated
            simultaneously with customer creation.
          example: 836db275-cb97-4a16-a1fb-f1d25fd732aa
          type: string
      title: CustomerDetailResponse
      type: object
    CustomerDetailResponseDTO:
      properties:
        complianceStatus:
          type: string
        customerHashId:
          description: This field contains the unique client identifier generated
            and shared before API handshake
          example: 2992c5c6-823b-4fa9-a64b-add0ea88bb66
          format: uuid
          type: string
        kycStatus:
          type: string
        paymentIds:
          description: This is an array which contains the paymentIds assigned to
            the customer
          items:
            $ref: '#/components/schemas/CustomerPaymentIdDTO'
          type: array
        redirectUrl:
          type: string
        walletHashId:
          description: This field contains the unique wallet identifier generated
            simultaneously with customer creation.
          example: b4c0d385-cd92-46a0-af6f-d8332268e6ed
          format: uuid
          type: string
      title: Customer details
      type: object
    CustomerDetailsResponseV2DTO:
      properties:
        tags:
          additionalProperties:
            type: string
          type: object
        accountDetails:
          items:
            $ref: '#/components/schemas/CustomerAccountDetail'
          type: array
        blockComment:
          description: This field contains the comment entered while blocking the
            customer, if applicable. Otherwise, it contains null.
          example: 'null'
          type: string
        blockReason:
          description: This field contains the reason for blocking the customer, if
            applicable. Otherwise, it contains null.
          enum:
          - CUSTOMER_REQUEST
          - CLIENT_REQUEST
          - DECEASED
          - ACCOUNT_CLOSURE
          - SUSPICIOUS_ACTIVITY
          - FRAUDULENT_ACTIVITY
          - POTENTIAL_SANCTION
          - SANCTIONED_CUSTOMER
          example: 'null'
          type: string
        blockUpdatedBy:
          description: This field contains the details of the entity updating a customer
            block/unblock, if applicable. Otherwise, it contains null. The possible
            values are CLIENT or NIUM.
          enum:
          - NIUM
          - CLIENT
          example: NIUM
          type: string
        complianceLevel:
          description: >-
            This field contains the compliance level for the customer.

            The possible values for customer type INDIVIDUAL are: SCREENING_KYC, SCREENING,
            SCREENING_KYB.

            The possible values for customer type CORPORATE is SCREENING_KYB.
          example: SCREENING_KY
          type: string
        complianceRemarks:
          description: This field contains the compliance remarks from Compliance
            officer, if applicable.
          example: APPLICANT -> VERIFIED|DIRECTOR -> VERIFIED
          type: string
        complianceStatus:
          type: string
        corporateCustomer:
          $ref: '#/components/schemas/CustomerCorporateCustomerResponseDTO'
        createdAt:
          description: This field contains the timestamp of customer creation in the
            format YYY-MM-DD hh:mm:ss, for example, 2021-07-29 06:11:43.
          example: '2021-09-13 14:59:48'
          format: date-time
          type: string
        customerHashId:
          type: string
        customerType:
          enum:
          - INDIVIDUAL
          - CORPORATE
          type: string
        individualCustomer:
          $ref: '#/components/schemas/IndividualCustomerResponseDTO'
        kycMode:
          description: "This field contains the kyc mode \nThe possible values for\
            \ customer type INDIVIDUAL are: E_KYC, MANUAL_KYC, SCREENING, EVERIFY_KYC,\
            \ or NONE. \nThe possible values for customer type CORPORATE are: KYB\
            \ or NONE."
          example: MANUAL_KYC
          type: string
        remarks:
          description: This field contains any system-generated compliance comments,
            if applicable.
          example: VERIFIED
          type: string
        segment:
          type: string
        status:
          description: This field contains the overall KYC status of the customer
          enum:
          - Pending
          - Clear
          - Failed
          - Suspended
          - Blocked
          example: Clear
          type: string
        termsAndConditionAcceptanceFlag:
          description: This flag denotes that the customer has accepted the Terms
            and Conditions.
          example: false
          type: boolean
        termsAndConditionName:
          description: This name that the customer has accepted the Terms and Conditions.
          example: B2BGENERIC
          type: string
        termsAndConditionVersionId:
          description: This version that the customer has accepted the Terms and Conditions.
          example: 1
          type: string
        updatedAt:
          description: This field contains the timestamp of last customer updation
            in the format YYY-MM-DD hh:mm:ss, for example, 2021-07-29 06:11:43.
          example: '2021-09-13 14:59:51'
          format: date-time
          type: string
        verificationConsent:
          description: This flag contain the customer consent to proceed in case e-Document
            verification flow is initiated.
          example: false
          type: boolean
      title: CustomerDetailsResponseV2DTO
      type: object
    CustomerRfiDetailsResponse:
      properties:
        description:
          description: This field contains the RFI description or field for which
            RFI is raised. The example values are passport, gender, etc.
          example: dateOfBirth
          type: string
        documentType:
          description: This field contains the type of document requested as part
            of RFI. The possible values are POI, POA, or NA.
          example: POA
          type: string
        mandatory:
          description: This flag determines the mandatory nature of the RFI.
          example: true
          type: boolean
        remarks:
          description: "This field contains the compliance officer\u2019s remarks\
            \ while raising the RFI."
          example: DOB does not match the PO
          type: string
        requiredData:
          description: This array contains objects with details of each mandatory
            RFI field that is required by NIUM team. It is mandatory to respond to
            an RFI with all the required fields. While responding to an RFI, you may
            refer these details. Example, Passport has many fields and an RFI may
            be raised for passport number. Referring this array, you may determine
            which field/value is needed and if it is an RFI for data or document.
          items:
            $ref: '#/components/schemas/CustomerRfiAttributeResponse'
          type: array
        rfiHashId:
          description: This field contains the unique identifier for each RFI raised
            for the customer.
          example: ee8e7875-d835-4175-9df1-ab9272db445f
          type: string
        rfiId:
          description: This field contains the unique identifier for group of RFI
            raised for the customer.
          example: ee8e7875-d835-4175-9df1-ab9272db445f
          type: string
        rfiStatus:
          description: This field contains status of the RFI
          example: RFI_REQUESTED
          type: string
        rfiType:
          description: This field contains type of the RFI
          enum:
          - INTERNAL
          - EXTERNAL
          example: INTERNAL
          type: string
        type:
          description: This field contains the type of RFI. The possible values are
            data or document.
          example: data
          type: string
      title: Rfi details response
      type: object
    CustomerCustomerTagDTO:
      properties:
        key:
          description: >-
            This field accepts the name of the tag.

            The maximum key length limit is 128 characters.
          type: string
        value:
          description: >-
            This field accepts the value of the tag.

            The maximum value length limit is 256 characters.
          type: string
      title: CustomerTagDTO
      type: object
    CustomerCustomerTaxDetailDTO:
      properties:
        countryOfResidence:
          description: >-
            This field accepts the 2-letter [ISO Alpha-2 country code](https://nium-documents.s3-eu-west-1.amazonaws.com/spend-documents/Country+Code.pdf)
            denoting the country of residence,

            Note: This field is mandatory for EU and UK.
          example: FR
          type: string
        taxIdNumber:
          description: >-
            This field accepts the tax ID number of the customer, for example, "FR123456".

            Note: This field is mandatory for EU and UK.
          example: FR123456
          type: string
      title: CustomerTaxDetailDTO
      type: object
    Document1:
      properties:
        document:
          type: string
        fileName:
          type: string
        fileType:
          type: string
      title: Document
      type: object
    CustomerDocumentDetail:
      properties:
        document:
          items:
            $ref: '#/components/schemas/Document1'
          type: array
        documentColor:
          type: string
        documentExpiryDate:
          type: string
        documentHolderName:
          type: string
        documentIssuanceCountry:
          type: string
        documentIssuanceState:
          type: string
        documentIssuedDate:
          type: string
        documentIssuingAuthority:
          type: string
        documentNumber:
          type: string
        documentReferenceNumber:
          type: string
        documentType:
          type: string
      title: DocumentDetail
      type: object
    EVerifyCustomerRegistrationRequestDTO:
      properties:
        billingAddress1:
          description: "This field accepts the line 1 of customer\u2019s billing address.\n\
            Maximum character limit: 40"
          type: string
        billingAddress2:
          description: "This field accepts the line 2 of customer\u2019s billing address.\n\
            Maximum character limit: 40"
          type: string
        billingCity:
          description: "This field accepts the city of customer\u2019s billing address.\n\
            Maximum character limit: 20"
          type: string
        billingCountry:
          description: "This field accepts the 2-letter [ISO Alpha-2 country code](/docs/currency-and-country-codes)\
            \ denoting the country of customer\u2019s billing address."
          type: string
        billingState:
          description: "This field accepts the state of customer\u2019s billing address.\n\
            Maximum character limit: 30"
          type: string
        billingZipCode:
          description: "This field accepts the zipcode of customer\u2019s billing\
            \ address.\nMaximum character limit: 10"
          type: string
        countryCode:
          description: "This field accepts the 2-letter [ISO Alpha-2 country code](/docs/currency-and-country-codes)\
            \ denoting the country prefix code to the customer\u2019s mobile number."
          type: string
        countryIP:
          description: This field accepts the country IP for the device by the customer
            for initiating the request.
          type: string
        countryOfBirth:
          description: "This field accepts the 2-letter [ISO country code](/docs/currency-and-country-codes)\
            \ denoting the customer\u2019s country of birth.\nNote: This field is\
            \ mandatory for EU and UK."
          type: string
        customerHashId:
          description: This field accepts previously generated unique customer identifier
            of customer.
          format: uuid
          type: string
        dateOfBirth:
          description: >-
            This field accepts the date of birth of the customer in YYYY-MM-DD format.

            Minimum customer age should be 18 years. Discuss with your NIUM account
            manager for any special use-cases.
          type: string
        deviceInfo:
          description: This field accepts the OS of the device used by the customer
            for initiating the request.
          type: string
        email:
          description: >-
            This field accepts the unique email address of the customer.

            Maximum character limit: 60
          type: string
        estimatedMonthlyFunding:
          description: "This field accepts the estimated monthly funding amount expected\
            \ in the wallet. This field is required when estimatedMonthlyFundingCurrency\
            \ field is provided in the request.\nThe possible values are:\n\u2022\
            \ <1000\n\u2022 1000-5000\n\u2022 5001-10000\n\u2022 10001-20000\n\u2022\
            \ >20000\nNote: This field is mandatory for EU and UK."
          type: string
        estimatedMonthlyFundingCurrency:
          description: >-
            This field accepts the 3-letter [ISO-4217 currency code](/docs/currency-and-country-codes)
            in which estimated monthly funding is expected in the wallet, for example,
            SGD.

            Note: This field is mandatory for EU and UK.
          type: string
        expectedCountriesToSendReceiveFrom:
          description: "This is an array of 2-letter [ISO Alpha-2 country code](/docs/currency-and-country-codes)\
            \ to allow the client to capture the expected countries to send/receive\
            \ international payments from. This field is required when internationalPaymentsSupported\
            \ field is true, for example, [\u201CFR\u201D, \u201CDE\u201D].\nNote:\
            \ This field is mandatory for EU and UK."
          items:
            type: string
          type: array
        firstName:
          description: >-
            This field accepts the first name of the customer.

            Maximum character limit: 40
          type: string
        gender:
          description: This field accepts the gender of the customer.
          type: string
        identificationDoc:
          description: This is an array of actual Base-64 documents as required. The
            maximum allowed size of this payload is 10 MB. A separate object is needed
            for each document image.
          items:
            $ref: '#/components/schemas/ComplianceIdentificationDocDTO'
          type: array
        intendedUseOfAccount:
          description: "**Conditional**\nThis field accepts the customer\u2019s intended\
            \ use of account. \nNote: This field is mandatory for EU and UK."
          type: string
        internationalPaymentsSupported:
          description: >-
            This field specifies if the customer will be doing International send/receive
            payments. The default value will be false.

            Note: This field is mandatory for EU and UK.
          type: boolean
        ipAddress:
          description: This field accepts the IP address of the device used by the
            customer for initiating the request.
          type: string
        lastName:
          description: >-
            This field accepts the last name of the customer.

            Maximum character limit: 40
          type: string
        middleName:
          description: >-
            This field accepts the middle name of the customer.

            Maximum character limit: 40
          type: string
        mobile:
          description: >-
            This field accepts the mobile number of the customer without the country
            prefix code.

            Maximum character limit: 20
          type: string
        nationality:
          description: "This field accepts the 2-letter [ISO Alpha-2 country code](/docs/currency-and-country-codes)\
            \ denoting the customer\u2019s citizenship."
          type: string
        nativeLanguageName:
          description: >-
            This field accepts the customer's name in native language.

            Maximum character limit: 40
          type: string
        pep:
          description: >-
            This field specifies if the customer is a Politically Exposed Person (PEP)
            or not.

            Note: This field is mandatory for EU and UK.
          type: boolean
        preferredName:
          description: >-
            This field accepts the common name or preferred name of the customer.
            It is also acceptable to pass the first name in this field.

            Maximum character limit: 40
          type: string
        segment:
          description: >-
            This field accepts the fee segment associated with a client.

            Maximum character limit: 64
          type: string
        sessionId:
          description: This field accepts the session ID for the session of the customer
            for initiating the request.
          type: string
        taxDetails:
          description: >-
            This is an array of tax details provided for compliance onboarding for
            EU customers.

            Note: This field is mandatory for EU and UK.
          items:
            $ref: '#/components/schemas/CustomerCustomerTaxDetailDTO'
          type: array
        upgradeRequest:
          type: boolean
        verificationConsent:
          description: This field specifies if the electronic verification consent
            to process customer data for compliance or not.
          type: boolean
      required:
      - billingAddress1
      - billingCity
      - billingCountry
      - billingZipCode
      - countryCode
      - customerHashId
      - dateOfBirth
      - email
      - firstName
      - lastName
      - mobile
      - nationality
      - verificationConsent
      title: EVerify customer registration request
      type: object
    ExpectedAccountCreditDTO:
      properties:
        averageTransactionValue:
          type: string
        monthlyTransactionVolume:
          type: string
        monthlyTransactions:
          type: string
        topRemitters:
          items:
            type: string
          type: array
        topTransactionCountries:
          items:
            type: string
          type: array
      title: ExpectedAccountCreditDTO
      type: object
    ExpectedAccountDebitDTO:
      properties:
        averageTransactionValue:
          type: string
        monthlyTransactionVolume:
          type: string
        monthlyTransactions:
          type: string
        topBeneficiaries:
          items:
            type: string
          type: array
        topTransactionCountries:
          items:
            type: string
          type: array
      title: ExpectedAccountDebitDTO
      type: object
    ExpectedAccountUsageDTO:
      properties:
        credit:
          $ref: '#/components/schemas/ExpectedAccountCreditDTO'
        debit:
          $ref: '#/components/schemas/ExpectedAccountDebitDTO'
        intendedUses:
          items:
            type: string
          type: array
        intendedUsesDescription:
          type: string
      title: ExpectedAccountUsageDTO
      type: object
    File:
      properties:
        absolute:
          type: boolean
        absoluteFile:
          $ref: '#/components/schemas/File'
        absolutePath:
          type: string
        canonicalFile:
          $ref: '#/components/schemas/File'
        canonicalPath:
          type: string
        directory:
          type: boolean
        file:
          type: boolean
        freeSpace:
          format: int64
          type: integer
        hidden:
          type: boolean
        name:
          type: string
        parent:
          type: string
        parentFile:
          $ref: '#/components/schemas/File'
        path:
          type: string
        totalSpace:
          format: int64
          type: integer
        usableSpace:
          format: int64
          type: integer
      title: File
      type: object
    IdentificationDocumentDTO:
      properties:
        document:
          description: This field accepts the Base64 encoded document being uploaded.
            The size limit of the original document, which can be pdf, jpeg, jpg,
            or png, and should not exceed 2MB. It is recommended to use standard libraries
            for the same. For example, java.util.Base64.getEncoder().encodeToString(byte[]
            data);This can be used in Java.
          type: string
        fileName:
          description: This field accepts the file name of the document being uploaded.
          type: string
        fileType:
          description: This field accepts the file type of the document being uploaded.
            The valid values are jpg, jpeg, png, pdf, image/jpg, image/jpeg, image/png,
            and application/pdf.
          type: string
      title: IdentificationDocumentDTO
      type: object
    IndividualCustomerResponseDTO:
      properties:
        billingAddress1:
          type: string
        billingAddress2:
          description: "This field contains the line 2 of individual customer\u2019\
            s billing address, if provided during customer onboarding.\nOtherwise,\
            \ it contains null."
          example: Johnson Square
          type: string
        billingCity:
          description: "This field contains the city of individual customer\u2019\
            s billing address."
          example: Sydney
          type: string
        billingCountry:
          description: "This field contains the 2-letter [ISO Alpha-2 country code](/docs/currency-and-country-codes)\
            \ of customer\u2019s [INDIVIDUAL] or applicant\u2019s [CORPORATE] billing\
            \ address, if provided during customer onboarding.\nOtherwise, it contains\
            \ null."
          example: AU
          type: string
        billingLandmark:
          description: "This field contains the landmark for individual customer\u2019\
            s billing address, if provided during customer onboarding.\nOtherwise,\
            \ it contains null."
          example: 'null'
          type: string
        billingState:
          description: "This field contains the state of individual customer\u2019\
            s billing address, if provided during customer onboarding.\nOtherwise,\
            \ it contains null."
          example: New South Wales
          type: string
        billingZipCode:
          description: "This field contains the zip code of individual customer\u2019\
            s  billing address."
          example: '2001'
          type: string
        countryCode:
          description: "This field contains the 2-letter [ISO-2 country code](/docs/currency-and-country-codes)\
            \ for identifying the country prefix to the customer\u2019s mobile number."
          example: AU
          type: string
        countryOfBirth:
          description: "This field contains the 2-letter [ISO Alpha-2 country code](/docs/currency-and-country-codes)\
            \ denoting the customer\u2019s country of birth."
          example: 'null'
          type: string
        dateOfBirth:
          description: This field contains the date of birth of the customer [INDIVIDUAL]
            or applicant [CORPORATE] in YYYY-MM-DD format.
          example: '1992-08-09'
          type: string
        designation:
          description: This field contains the designation of an employee, if provided
            during customer onboarding. Otherwise, it contains null.
          example: 'null'
          type: string
        email:
          description: This field contains the unique email address of the customer.
          example: xyzabc@abcmail.com
          type: string
        employeeId:
          description: This field contains the employee ID of an employee, if provided
            during customer onboarding. Otherwise, it contains null.
          example: 'null'
          type: string
        estimatedMonthlyFunding:
          description: This field contains the estimated monthly funding amount expected
            in the wallet. This field is required when estimatedMonthlyFundingCurrency
            field is provided in the request.
          enum:
          - <1000
          - 1000-5000
          - 5001-10000
          - 10001-20000
          - '>20000'
          example: 1000-5000
          type: string
        estimatedMonthlyFundingCurrency:
          description: This field contains the 3-letter [ISO-4217 currency code](/docs/currency-and-country-codes)
            in which estimated monthly funding is expected in the wallet, for example,
            SGD.
          example: EUR
          type: string
        expectedCountriesToSendReceiveFrom:
          description: "This is an array of 2-letter [ISO Alpha-2 country code](/docs/currency-and-country-codes)\
            \ to allow the client to capture the expected countries to send/receive\
            \ international payments from. This field is required when internationalPaymentsSupported\
            \ field is true, for example, [\u201CFR\u201D, \u201CDE\u201D]."
          example:
          - FR
          items:
            type: string
          type: array
        firstName:
          description: This field contains the first name of the individual customer.
          example: ABCD XYZ
          type: string
        gender:
          description: >-
            This field contains the gender of the individual customer, if provided
            during customer onboarding. The possible values are - Male, Female, or
            Others.

            Otherwise, it contains null.
          example: Male
          type: string
        identificationData:
          description: This array contains objects consisting of type and value of
            each uploaded document.
          example: 'null'
          items:
            $ref: '#/components/schemas/Map_string_string_'
          type: array
        internationalPaymentsSupported:
          description: This field indicates if the customer will be doing International
            send/receive payments. The default value will be false.
          example: true
          type: boolean
        lastName:
          description: This field contains the last name of the individual customer.
          example: PVT LTD
          type: string
        middleName:
          description: >-
            This field contains the middle name of the individual customer, if provided.

            Otherwise, it contains null.
          example: 'null'
          type: string
        mobile:
          description: This field contains the mobile number of the customer without
            the country code.
          example: '950030024'
          type: string
        nationality:
          description: This field contains the 2-letter [ISO Alpha-2 country code](/docs/currency-and-country-codes)
            denoting the customer [INDIVIDUAL] or applicant [CORPORATE] citizenship.
          example: AU
          type: string
        nativeLanguageName:
          description: This field contains the name of the customer in native language,
            if provided during customer onboarding. Otherwise, it contains null
          example: 'null'
          type: string
        occupation:
          description: "This field accepts the customer\u2019s occupation. Refer to\
            \ [Enum values](https://docs.nium.com/apis/docs/unified-add-customer-api)\
            \ for the description. \n Note: This field is mandatory for CA."
          enum:
          - OC0001
          - OC1001
          - OC1002
          - OC1003
          - OC1110
          - OC1120
          - OC1201
          - OC1210
          - OC1211
          - OC1220
          - OC1310
          - OC1311
          - OC1320
          - OC1410
          - OC1411
          - OC1420
          - OC1430
          - OC1440
          - OC2001
          - OC2110
          - OC2111
          - OC2112
          - OC2120
          - OC2121
          - OC2122
          - OC2123
          - OC2130
          - OC2131
          - OC2132
          - OC2133
          - OC2139
          - OC2210
          - OC2211
          - OC2221
          - OC2222
          - OC2223
          - OC2230
          - OC2231
          - OC3001
          - OC3110
          - OC3111
          - OC3112
          - OC3120
          - OC3130
          - OC3210
          - OC3211
          - OC3212
          - OC3220
          - OC3310
          - OC4001
          - OC4002
          - OC4003
          - OC4004
          - OC4110
          - OC4120
          - OC4121
          - OC4122
          - OC4130
          - OC4131
          - OC4132
          - OC4140
          - OC4210
          - OC4220
          - OC4310
          - OC4320
          - OC4410
          - OC4420
          - OC4510
          - OC5001
          - OC5110
          - OC5111
          - OC5112
          - OC5210
          - OC5211
          - OC5212
          - OC5310
          - OC5311
          - OC5312
          - OC5320
          - OC5410
          - OC5510
          - OC6001
          - OC6002
          - OC6003
          - OC6004
          - OC6201
          - OC6202
          - OC6210
          - OC6220
          - OC6310
          - OC6320
          - OC6321
          - OC6322
          - OC6410
          - OC6420
          - OC6430
          - OC6431
          - OC6432
          - OC6440
          - OC6441
          - OC6510
          - OC6520
          - OC6521
          - OC6522
          - OC6531
          - OC6532
          - OC7001
          - OC7002
          - OC7201
          - OC7202
          - OC7210
          - OC7220
          - OC7230
          - OC7231
          - OC7232
          - OC7240
          - OC7241
          - OC7242
          - OC7250
          - OC7260
          - OC7299
          - OC7310
          - OC7311
          - OC7320
          - OC7330
          - OC7331
          - OC7340
          - OC7410
          - OC7420
          - OC7510
          - OC7511
          - OC7520
          - OC7521
          - OC8001
          - OC8002
          - OC8201
          - OC8202
          - OC8203
          - OC8310
          - OC8311
          - OC8312
          - OC8410
          - OC8411
          - OC8412
          - OC8510
          - OC8511
          - OC8512
          - OC9001
          - OC9201
          - OC9202
          - OC9210
          - OC9310
          - OC9320
          - OC9410
          - OC9411
          - OC9412
          - OC9413
          - OC9414
          - OC9415
          - OC9420
          - OC9421
          - OC9510
          example: OC0001
          type: string
        parentCustomerHashId:
          description: This field contains the unique identifier of the corporate
            parent customer to whom the individual customer is tagged.
          type: string
        pep:
          description: This flag indicates if a customer is a Politically Exposed
            Person (PEP) or not.
          example: false
          type: boolean
        preferredName:
          description: This field contains the preferred name of the individual customer
          example: ABCD XYZ LT
          type: string
        taxDetails:
          description: This array contains tax details provided during compliance
            onboarding for EU customers. Otherwise, it contains null.
          items:
            $ref: '#/components/schemas/TaxDetailsResponseDTO'
          type: array
      title: Individual customer response
      type: object
    InputFieldDTO:
      properties:
        activeBorderColor:
          description: This field accepts the client card widget style for text filed
            active border color.
          type: string
        errorBorderColor:
          description: This field accepts the client card widget style for text filed
            error border color.
          type: string
        errorMessageColor:
          description: This field accepts the client car d widget style for text filed
            error label color.
          type: string
        labelColor:
          description: This field accepts the client card widget style for text filed
            label color.
          type: string
        labelFontSize:
          description: This field accepts the client card widget style for text filed
            label size.
          type: string
      title: Input field
      type: object
    InputStream:
      title: InputStream
      type: object
    LegalDetailsV2:
      properties:
        isRegistered:
          type: boolean
        legislationName:
          type: string
        legislationType:
          type: string
        listedExchange:
          type: string
        registeredCountry:
          type: string
        registeredDate:
          type: string
        registrationType:
          type: string
      title: Legal details V2
      type: object
    Map_string_string_:
      additionalProperties:
        type: string
      title: Map_string_string_
      type: object
    NatureOfBusinessDTO:
      properties:
        industryCodes:
          items:
            type: string
          type: array
        industryDescription:
          type: string
      title: NatureOfBusinessDTO
      type: object
    PaginatedCustomerDetailsResponseV2DTO:
      properties:
        content:
          items:
            $ref: '#/components/schemas/CustomerCustomerDetailResponse'
          type: array
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
      title: PaginatedCustomerDetailsResponseV2DTO
      type: object
    PaginatedResponseDTO_CustomerDetailsResponseV2DTO_:
      properties:
        content:
          items:
            $ref: '#/components/schemas/CustomerDetailsResponseV2DTO'
          type: array
        pagination:
          $ref: '#/components/schemas/CustomerPagination'
      title: "PaginatedResponseDTO\xABCustomerDetailsResponseV2DTO\xBB"
      type: object
    CustomerPagination:
      properties:
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
      title: Pagination
      type: object
    PartialSearchBankNameResponseDTO:
      properties:
        bankName:
          type: string
        routingCodeValue:
          items:
            type: string
          type: array
      title: Partial search bank name response
      type: object
    PartialSearchBranchNameResponseDTO:
      properties:
        branchName:
          type: string
        routingCodeValue:
          items:
            $ref: '#/components/schemas/BranchNameResponseDTO'
          type: array
      title: Partial search branch name response
      type: object
    PartialSearchDTO:
      properties:
        country_code:
          description: This field accepts the [2-letter ISO-2 country code](/docs/currency-and-country-codes)
            for which routing code search is initiated.
          type: string
        currency_code:
          description: This field accepts the [3-letter ISO-4217 currency code](/docs/currency-and-country-codes)
            for which routing code search is to be initiated.
          type: string
        payout_method:
          description: >-
            This field can accept the different modes of payout. This field can accept
            one of the following values:

            1.LOCAL

            2.SWIFT

            Default value of the parameter is LOCAL.
          type: string
        routing_code_type:
          description: >-
            This field determines the routing code type for the search. The possible
            values are:

            IFSC

            SWIFT

            ACH CODE

            BSB CODE

            SORT CODE

            BANK CODE

            LOCATION ID

            BRANCH CODE

            BRANCH NAME

            TRANSIT NUMBER
          enum:
          - IFSC
          - SWIFT
          - ACH CODE
          - BSB CODE
          - SORT CODE
          - BANK CODE
          - LOCATION ID
          - BRANCH CODE
          - BRANCH NAME
          - TRANSIT NUMBER
          type: string
        search_key:
          description: >-
            This field accepts the key on which the search is initiated. The possible
            values for search key are:

            bank_name

            branch_name
          enum:
          - bank_name
          - branch_name
          type: string
        search_value:
          description: This field accepts the partial or full value of the search
            key on which the search is initiated, for example, if search_key is bank_name,
            search_value could be DBS.
          type: string
      required:
      - routing_code_type
      - search_key
      - search_value
      title: Partial search
      type: object
    CustomerPartnershipDetails:
      properties:
        partnerCountry:
          type: string
        partnerName:
          type: string
        partnerState:
          type: string
      title: PartnershipDetails
      type: object
    CustomerPaymentIdDTO:
      properties:
        bankName:
          description: This field contains the bank name for the paymentId.
          enum:
          - BOL_LT
          - MONOOVA_AU
          - DBS_HK
          - DBS_SG
          - JPM_AU
          - JPM_SG
          - CB_GB
          - CFSB_US
          example: JPM_SG
          type: string
        currencyCode:
          description: This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html).
          example: SGD
          type: string
        uniquePayerId:
          description: This field contains the unique email Id provided to the customer
            in addition to uniquePaymentId for supported regions and configuration,
            or else it will be null, for example, abc12_ca@nium.com.
          example: 'null'
          type: string
        uniquePaymentId:
          description: This field contains the virtual account number per currency
            provided to customers for supported regions and configuration, for example,
            IBAN in EU, virtual account number from Moonova in AU, or else, it will
            be null.
          example: 20024397230
          type: string
      title: PaymentIdDTO
      type: object
    PayoutRequest:
      properties:
        account_number:
          description: This field accepts an account number as a payout detail.
          type: string
        account_type:
          description: The type of account. This field is conditional in case of WALLET
            payout.
          enum:
          - Current
          - Saving
          - Maestra
          - Checking
          type: string
        bank_code:
          description: This field accepts the bank code of the payout.
          type: string
        bank_name:
          description: This field contains the beneficiary bank name.
          type: string
        country_code:
          description: This field accepts the [ISO-2 country code](/docs/currency-and-country-codes)
            for the payout bank.
          type: string
        destination_currency:
          description: This field accepts the 3-letter [ISO-4217 destination currency
            code](/docs/currency-and-country-codes) of the payout as per the destination
            country from supported corridors.
          type: string
        identification_type:
          description: This field accepts the type of identification document name
            for a beneficiary.
          type: string
        identification_value:
          description: This field accepts an identification document number for the
            beneficiary.
          type: string
        payout_method:
          description: This field accepts the payout method for the remittance payout.
          enum:
          - LOCAL
          - SWIFT
          - WALLET
          - CASH
          - CARD
          - PROXY
          - FEDWIRE
          type: string
        proxy_type:
          description: >-
            This field indicates the proxy type sent in the payment request.
             For SGD-PayNow: The proxy type can be MOBILE, UEN, NRIC, or VPA.
             For INR-UPI: The proxy type should be VPA.
            For BRL-PIX: The proxy type can be MOBILE, ID, EMAIL, or RANDOM_KEY

            For AUD-PayID: The proxy type can be MOBILE, EMAIL, ABN, or ORGANISATION_ID(only
            domestic payouts are allowed)

            For MYR-DuitNow: The proxy type can be NRIC, PASSPORT, CORPORATE_REGISTRATION_NUMBER,
            MOBILE, or ARMY_ID.

            Note: This field is mandatory when the payout_method type is PROXY
          type: string
        proxy_value:
          description: >-
            This field indicates the proxy value such as VPA, UEN, or mobile number
            etc.

            Note: This field is mandatory when the payout_method type is PROXY

            The mobile number should include country code.
          type: string
        routing_code_type_1:
          description: This field accepts the routing code type 1, for example, SWIFT
            for all countries, IFSC for India, SORT CODE for UK, ACH CODE for USA,
            BRANCH CODE for Brazil and Bangladesh, BSB CODE for Australia, BANK CODE
            for HongKong.
          type: string
        routing_code_type_2:
          description: This field accepts the routing code type 2, for example, SWIFT
            for all countries, IFSC for India, SORT CODE for UK, ACH CODE for USA,
            BRANCH CODE for Brazil and Bangladesh, BSB CODE for Australia, BANK CODE
            for HongKong.
          type: string
        routing_code_value_1:
          description: This field accepts the routing code value 1, for example, ADCBINBB
            or ADCBINBB123 for SWIFT, SBIN0000058 for IFSC, 100000 for SORT CODE,
            111000025 for ACH CODE, 012515 for BSB CODE, 151 for BANK CODE.
          type: string
        routing_code_value_2:
          description: This field accepts the routing code value 2, for example, ADCBINBB
            or ADCBINBB123 for SWIFT, SBIN0000058 for IFSC, 100000 for SORT CODE,
            111000025 for ACH CODE, 012515 for BSB CODE, 151 for BANK CODE.
          type: string
      required:
      - destination_currency
      - payout_method
      title: Payout request
      type: object
    CustomerProfessionalDetails:
      properties:
        capitalContribution:
          type: string
        employmentIndustry:
          type: string
        employmentStatus:
          type: string
        hasDistributionRight:
          type: boolean
        interestPercentage:
          type: string
        position:
          type: string
        positionEndDate:
          type: string
        positionStartDate:
          type: string
        sharePercentage:
          type: string
        trustBeneficiaryClass:
          type: string
        votingRights:
          items:
            type: string
          type: array
      title: ProfessionalDetails
      type: object
    ProfessionalDetailsResponseDTO:
      properties:
        capitalContribution:
          type: string
        hasDistributionRight:
          type: boolean
        interestPercentage:
          type: string
        position:
          type: string
        positionStartDate:
          type: string
        sharePercentage:
          type: string
        trustBeneficiaryClass:
          type: string
        votingRights:
          items:
            type: string
          type: array
      title: Professional details response
      type: object
    CustomerRegulatoryDetails:
      properties:
        regulatedTrustType:
          items:
            type: string
          type: array
        unregulatedTrustType:
          items:
            type: string
          type: array
      title: RegulatoryDetails
      type: object
    Resource:
      properties:
        description:
          type: string
        file:
          $ref: '#/components/schemas/File'
        filename:
          type: string
        inputStream:
          $ref: '#/components/schemas/InputStream'
        open:
          type: boolean
        readable:
          type: boolean
        uri:
          $ref: '#/components/schemas/URI'
        url:
          $ref: '#/components/schemas/URL'
      title: Resource
      type: object
    CustomerRfiAttributeResponse:
      properties:
        label:
          description: "This field contains the user-friendly name of the RFI subfield\
            \ that is required. For example, \u201CPassport Number\u201D when RFI\
            \ is raised for POI(Passport) and passport number is needed."
          example: Date Of Birth
          type: string
        type:
          description: This field contains the type of RFI which can be data or document.
          example: data
          type: string
        value:
          description: This field contains the NIUM field value for the label, for
            example, identificationValue when passport number is needed.
          example: dateOfBirth
          type: string
      title: RfiAttributeResponse
      type: object
    RfiIdentificationDoc:
      properties:
        identificationDocColor:
          description: This field accepts the color of the medicare card which may
            be one of three values - G, B, Y. It is mandatory for medicare card.
          type: string
        identificationDocExpiry:
          description: This field accepts the document expiry date. format yyyy-MM-dd
          type: string
        identificationDocHolderName:
          description: This field accepts the name of the document holder exactly
            according to the document uploaded.
          type: string
        identificationDocIssuanceCountry:
          description: This field accepts the document issuance country.
          type: string
        identificationDocReferenceNumber:
          description: This field accepts the reference number for the document being
            uploaded.
          type: string
        identificationDocument:
          description: It is an array of actual Base-64 documents as required. The
            maximum allowed size of this payload is 10MB. A separate object is needed
            for each document image.
          items:
            $ref: '#/components/schemas/IdentificationDocumentDTO'
          type: array
        identificationIssuingAuthority:
          description: This field accepts the name of the authorized issuer of the
            document such as the name of the government agency issuing the document.
          type: string
        identificationIssuingDate:
          description: This field accepts the document issuance date.
          type: string
        identificationType:
          description: This field accepts the identification type for the document
            being uploaded. Refer the details of the RFI raised and respond accordingly.
          type: string
        identificationValue:
          description: The field accepts the document number (value) for the document
            such as passport number, driving licence number, etc.
          type: string
      title: Rfi identification doc
      type: object
    CustomerRfiResponseRequest:
      properties:
        addressLine1:
          description: >-
            This field accepts the line1 of a customer's billing address.

            Maximum character limit: 40
          type: string
        addressLine2:
          description: >-
            This field accepts the line2 of a customer's billing address.

            Maximum character limit: 40
          type: string
        billingCountry:
          description: "This field accepts the 2-letter [ISO Alpha-2 country code](https://nium-documents.s3-eu-west-1.amazonaws.com/spend-documents/Country+Code.pdf)\
            \ denoting the customer\u2019s billing country."
          type: string
        city:
          description: >-
            This field accepts the billing address city name.

            Maximum character limit: 30
          type: string
        country:
          description: "This field accepts the 2-letter [ISO Alpha-2 country code](https://nium-documents.s3-eu-west-1.amazonaws.com/spend-documents/Country+Code.pdf)\
            \ denoting the country of the customer\u2019s billing address. It is important\
            \ to pass this field if the card to be issued is to be used for GooglePay\
            \ or ApplePay provisioning."
          type: string
        dateOfBirth:
          description: This field accepts the date of birth of a customer in YYYY-MM-DD
            format.
          type: string
        employmentStatus:
          description: >-
            This field accepts the customer's employment status. This field can accept
            alphanumeric characters.

            Maximum character limit: 30
          type: string
        firstName:
          description: >-
            This field accepts the first name of a customer.

            Maximum character limit: 40
          type: string
        gender:
          description: >-
            This field accepts the gender of the customer. The acceptable values are:
             Male
             Female
             Others
          type: string
        identificationDoc:
          $ref: '#/components/schemas/RfiIdentificationDoc'
          description: This field is an object which holds document details. It is
            required to send any document RFI under this object.
        industryType:
          description: >-
            This field accepts the customer's industry type. This field can accept
            alphanumeric characters.

            Maximum character limit: 30
          type: string
        intendedUseOfAccount:
          description: >-
            This field accepts the customer's intendedUse of account. This field can
            accept alphanumeric characters.

            Maximum character limit: 30
          type: string
        isPep:
          description: This field will ensure either a customer is a Politically Exposed
            Person (PEP) or not.
          example: true
          type: string
        lastName:
          description: >-
            This field accepts the last name of a customer.

            Maximum character limit: 40
          type: string
        middleName:
          description: >-
            This field accepts the middle name of a customer.

            Maximum character limit: 40
          type: string
        nationality:
          description: "This field accepts the 2-letter [ISO Alpha-2 country code](https://nium-documents.s3-eu-west-1.amazonaws.com/spend-documents/Country+Code.pdf)\
            \ denoting the customer\u2019s citizenship."
          type: string
        postcode:
          description: >-
            This field accepts the customer's billing ZIP code for the address. This
            field can accept alphanumeric characters, space, hyphen(-) and hash(#).

            Maximum character limit: 10
          type: string
        rfiHashId:
          description: This field accepts the unique UUID rfiHashId received in Customer
            API.
          format: uuid
          type: string
        sourceOfFunds:
          description: >-
            This field accepts the customer's source of funds. This field can accept
            alphanumeric characters.

            Maximum character limit: 30
          type: string
        state:
          description: >-
            This field accepts the customer's billing ZIP code for the address. This
            field can accept alphanumeric characters, space and hyphen(-).

            Maximum character limit: 30
          type: string
      required:
      - rfiHashId
      title: RfiResponseRequest
      type: object
    RiskAssessmentInfoResponseDTO:
      properties:
        annualTurnover:
          description: This field contains the annual turnover of the business.
          example: 'null'
          type: string
        industrySector:
          description: This field contains the industry sector of the business.
          example: Farming
          type: string
        intendedUseOfAccount:
          type: string
        totalEmployees:
          description: This field contains the total number of employee for the business.
          example: '1000'
          type: string
        transactionCountries:
          description: This field contains the list of countries where the customer
            is expected to send/receive/spend from his account
          example: 'null'
          items:
            type: string
          type: array
      title: Risk assessment info response
      type: object
    RiskAssessmentInfoV2:
      properties:
        annualTurnover:
          type: string
        countryOfOperation:
          items:
            type: string
          type: array
        industrySector:
          type: string
        intendedUseOfAccount:
          type: string
        ofacLicencePresent:
          type: boolean
        restrictedCountries:
          items:
            type: string
          type: array
        totalEmployees:
          type: string
        transactionCountries:
          items:
            type: string
          type: array
        travelRestrictedCountry:
          type: boolean
      title: Risk assessment info V2
      type: object
    StakeholderContactDetailsResponseDTO:
      properties:
        contactNo:
          type: string
        email:
          type: string
      title: Stakeholder contact details response
      type: object
    CustomerStakeholderDetailsResponseDTO:
      properties:
        address:
          $ref: '#/components/schemas/CustomerCorporateAddressDTO'
          description: This is an object which contains the stakeholder address details.
        birthCountry:
          type: string
        dateOfBirth:
          description: This field contains the date of birth of the stakeholder.
          example: '1947-02-15'
          type: string
        designation:
          description: This field contains the designation of the stakeholder.
          type: string
        documentDetails:
          items:
            $ref: '#/components/schemas/CustomerCorporateDocumentDetailsDTO'
          type: array
        email:
          description: This field contains the email address of the stakeholder
          example: john@qwe.com
          type: string
        firstName:
          description: This field contains the first name of the stakeholder.
          example: John
          type: string
        gender:
          description: This field contains the gender of the stakeholder.
          example: Male
          type: string
        lastName:
          description: This field contains the last name of the stakeholder.
          example: Cary
          type: string
        middleName:
          description: This field contains the middle name of the stakeholder.
          example: Lucius Arthur
          type: string
        mobile:
          description: This field contains the mobile number of the stakeholder
          example: 9876543210
          type: string
        nationality:
          description: This field contains the nationality of the stakeholder.
          example: AU
          type: string
        professionalDetails:
          items:
            $ref: '#/components/schemas/CustomerProfessionalDetails'
          type: array
        referenceId:
          description: This field contains the reference id of the stakeholder
          type: string
        resident:
          type: boolean
        taxDetails:
          items:
            $ref: '#/components/schemas/CustomerTaxDetails'
          type: array
      title: StakeholderDetailsResponseDTO
      type: object
    StakeholderDetailsV2:
      properties:
        address:
          $ref: '#/components/schemas/AddressV2'
        birthCountry:
          type: string
        contactDetails:
          $ref: '#/components/schemas/StakeholderContactDetailsResponseDTO'
        dateOfBirth:
          type: string
        documentDetails:
          items:
            $ref: '#/components/schemas/CorporateDocumentDetails2DTO'
          type: array
        firstName:
          type: string
        firstName_local:
          type: string
        gender:
          type: string
        isPep:
          type: boolean
        lastName:
          type: string
        lastName_local:
          type: string
        middleName:
          type: string
        nationality:
          type: string
        occupation:
          type: string
        professionalDetails:
          items:
            $ref: '#/components/schemas/ProfessionalDetailsResponseDTO'
          type: array
        taxDetails:
          items:
            $ref: '#/components/schemas/TaxDetailsResponseDTO'
          type: array
      title: Stakeholder details V2
      type: object
    StakeholderV2:
      properties:
        businessPartner:
          $ref: '#/components/schemas/BusinessPartnerV2'
        redirectURL:
          type: string
        referenceId:
          type: string
        stakeholderDetails:
          $ref: '#/components/schemas/StakeholderDetailsV2'
      title: Stakeholder V2
      type: object
    CustomerSupportedCorridorsResponse:
      properties:
        content:
          description: This field contains an array that holds the response data.
          items:
            $ref: '#/components/schemas/SupportedCorridorsResponseDTO2'
          type: array
        totalElements:
          description: This field contains the number of elements in the response
            body.
          format: int64
          type: integer
        totalPages:
          description: This field contains the number of pages in the response body.
          format: int32
          type: integer
      title: SupportedCorridorsResponse
      type: object
    SupportedCorridorsResponseDTO:
      properties:
        beneficiaryAccountType:
          type: string
        customerType:
          type: string
        destinationCountry:
          type: string
        destinationCurrency:
          type: string
        payoutMethod:
          type: string
        routingCodeType:
          type: string
      title: Supported corridors response
      type: object
    SupportedCorridorsResponseDTO2:
      properties:
        accountVerification:
          description: This field provides whether account verification is supported
            or not.
          type: string
        additionalInfo:
          description: This field provides additional information with respect to
            the corridor.
          example: USD ACH payouts can also be done to below countries if the ACH
            code is supported as  per regulator guidelines.  - U. S. Virgin Islands
            , Guam  American Samoa , The Northern Mariana Islands  The status update
            will be done on T+2 basis though the Beneficiary may receive the  credit
            before this.The status update will be done on T+2 basis though the Beneficiary
            may receive the  credit before this
          type: string
        beneficiaryAccountType:
          description: This field provides the beneficiary account type.
          example: INDIVIDUAL
          type: string
        beneficiaryStatementNarrative:
          description: This field provides information that will be visible on the
            beneficiary statement for payout transaction.
          example: "NIUM Transaction ID is passed on and will be visible in the Beneficiary\u2019\
            s Statement"
          type: string
        channels:
          description: 'This field provides information on channel supported. '
          example: All banks in USA in the ACH network
          type: string
        clientType:
          description: This field provides type of Client e.g. FI, NonFI
          example: NonFI
          type: string
        customerCountry:
          description: List of countries accepted as remitter country.
          example: US
          items:
            type: string
          type: array
        customerType:
          description: This field provides the type of customer.
          example: CORPORATE
          type: string
        cutoffDeliveryNotes:
          description: This field provides information on Cut-off times and delivery.
          example: T2 day credit subject to cutoff of 15.00 EST
          type: string
        deliveryTAT:
          description: "This field provides information on delivery times such as\
            \ Realtime, T0 \u2013 same day , T1 \u2013 next day etc."
          type: string
        destinationCountry:
          description: This field provides the 2-letter ISO-2 destination country
            code.
          example: US
          type: string
        destinationCurrency:
          description: This field provides destination Currency.
          example: USD
          type: string
        fxSource:
          description: This field provides information on the FX source.
          example: Live Interbank based rates available 24x7, including off-market
            hours
          type: string
        limitCurrency:
          description: This field provides currency for the minimum and maximum limits.
          example: USD
          type: string
        mandatoryDataRequirement:
          description: This field provides information on mandatory information required
            for payout request.
          example: "Remitter Name,Remitter Identification Type,Remitter Address,Remitter\
            \ State,Remitter Post Code,Remitter Date of Birth (for Individual),Beneficiary\
            \ City,Beneficiary Country Code,Beneficiary Post Code,Beneficiary Account\
            \ Number,Routing Code Value 1,Remitter Account Type,Remitter Identification\
            \ Number,Remitter Country Code,Remitter City,Remit Purpose Code,Beneficiary\
            \ Address,Beneficiary State,Beneficiary Account Type,Beneficiary Bank\
            \ Name,Beneficiary Name,Routing Code Type 1 \u2013 ACH Code"
          items:
            type: string
          type: array
        maximumAmount:
          description: This field provides information for maximum amount for the
            corridor, currency and payment method
          example: 1000000
          type: string
        minimumAmount:
          description: This field provides information for minimum amount for the
            corridor, currency and payment method.
          type: string
        networkParticipant:
          description: This field provides type of network participant.
          example: Bank
          type: string
        payoutMethod:
          description: 'This field accepts the different modes of payout. '
          example: LOCAL
          type: string
        payoutMethodCategory:
          description: Separates the payout methods into different categories including
            <strong>ach</strong>, <strong>cash</strong>, <strong>proxy_upi</strong>,
            and <strong>wire_local</strong>.
          type: string
        proofOfPayment:
          description: This field provides information on proof of payment.
          type: string
        routingCodeType:
          description: "This field provides the routing code type for the currency.\
            \ For example SWIFT, ACH CODE etc. \nThe possible values are: \n\u2022\
            \ SWIFT for all cases where SWIFT is applicable \n\u2022 IFSC (relevant\
            \ for India) \n\u2022 ACH CODE (relevant for USA) \n\u2022 BSB CODE (relevant\
            \ for Australia) \n\u2022 SORT CODE (relevant for the UK) \n\u2022 LOCATION\
            \ ID (relevant for Nepal) \n\u2022 BANK CODE (relevant for few countries\
            \ including Canada, Hong Kong, Sri Lanka, South Korea, Pakistan, Brazil,\
            \ and some more) \n\u2022 TRANSIT NUMBER (relevant for Canada) \n\u2022\
            \ BRANCH CODE (relevant for Sri Lanka, Vietnam, Brazil, Uruguay, Kenya\
            \ and some more)"
          example: ACH CODE
          type: string
        supportingDocuments:
          description: This field provides information on any supporting documents
            required for payout for e.g. Invoice etc
          example: Beneficiary banks may ask for additional information / supporting
            documents from  Beneficiary e.g., Relationship between the remitter and
            Beneficiary; Nature of  business; Duration of contract; Commercial agreement;
            Current invoice; etc.
          items:
            type: string
          type: array
        wallets:
          description: This field provides information on wallets partners.
          example: 62654
          items:
            type: string
          type: array
      title: SupportedCorridorsResponseDTO2
      type: object
    CustomerTaxDetails:
      properties:
        country:
          type: string
        taxNumber:
          type: string
      title: TaxDetails
      type: object
    TaxDetailsResponseDTO:
      properties:
        country:
          description: >-
            This field accepts the country of residence of the customer, for example,
            "France".

            Note: This field is mandatory for EU and UK.
          example: France
          type: string
        taxNumber:
          description: >-
            This field accepts the tax ID number of the customer, for example, "FR123456".

            Note: This field is mandatory for EU and UK.
          example: FR123456
          type: string
      required:
      - country
      - taxNumber
      title: Tax details response
      type: object
    TermsAndConditionsAcceptResponseDTO:
      properties:
        message:
          type: string
        success:
          type: string
      title: Terms and conditions accept response
      type: object
    TermsAndConditionsRequestDTO:
      properties:
        accept:
          description: This flag specifies if the customer has accepted or rejected
            the Terms and Conditions.
          example: true
          type: boolean
        name:
          description: This is the name of the TnC for which the accept flag is being
            sent.
          example: GENERALTNC
          type: string
        versionId:
          description: This is the version of the TnC for which the accept flag is
            being sent.
          example: '1.0'
          type: string
      required:
      - accept
      - name
      - versionId
      title: Terms and conditions request
      type: object
    TermsAndConditionsResponseDTO:
      properties:
        createdAt:
          description: This field contains the date and time of the TnC version creation.
          example: '2020-07-03 15:14:57'
          type: string
        description:
          description: This field contains the HTML format of the TnC.
          example: <HTML with Terms and Conditions>
          type: string
        name:
          description: This field contains the name of the TnC to be presented to
            the customer.
          example: GENERALTNC
          type: string
        versionId:
          description: This field contains the version number of the TnC.
          example: '1.0'
          type: string
      title: Terms and conditions response
      type: object
    URI:
      properties:
        host:
          type: string
        absolute:
          type: boolean
        authority:
          type: string
        fragment:
          type: string
        opaque:
          type: boolean
        path:
          type: string
        port:
          format: int32
          type: integer
        query:
          type: string
        rawAuthority:
          type: string
        rawFragment:
          type: string
        rawPath:
          type: string
        rawQuery:
          type: string
        rawSchemeSpecificPart:
          type: string
        rawUserInfo:
          type: string
        scheme:
          type: string
        schemeSpecificPart:
          type: string
        userInfo:
          type: string
      title: URI
      type: object
    URL:
      properties:
        host:
          type: string
        authority:
          type: string
        content:
          type: object
        defaultPort:
          format: int32
          type: integer
        file:
          type: string
        path:
          type: string
        port:
          format: int32
          type: integer
        protocol:
          type: string
        query:
          type: string
        ref:
          type: string
        userInfo:
          type: string
      title: URL
      type: object
    UpdateBeneficiaryRequestDTO:
      properties:
        authenticationCode:
          description: >-
            This fields accepts the authenticationCode generated as part of SCA(Strong
            Customer Authentication).

            Note: Authentication code must be passed if regulatory region of the program
            is UK or EU and License Entity NIUM. For other region, this field is non-mandatory.
          type: string
        autosweepPayoutAccount:
          type: boolean
        beneficiaryAccountNumber:
          description: This field accepts an account number as a beneficiary detail.
          type: string
        beneficiaryAccountType:
          description: This field accepts the bank account type of the beneficiary.
            The account_type can be either Individual or Company.
          type: string
        beneficiaryAddress:
          description: This field accepts an address of the beneficiary.
          type: string
        beneficiaryAlias:
          description: This field accepts the beneficiary alias
          type: string
        beneficiaryBankAccountType:
          description: "The type of account. This field is conditional in case of\
            \ WALLET payout and the possible values are:\n\u2022 Current\n\u2022 Saving\n\
            \u2022 Maestra\n\u2022 Checking"
          type: string
        beneficiaryBankCode:
          description: This field accepts the bank code of the beneficiary.
          type: string
        beneficiaryBankName:
          description: This field accepts the bank name of the beneficiary.
          type: string
        beneficiaryCardExpiryDate:
          description: "This field contains the beneficiary\u2019s card expiry date."
          type: string
        beneficiaryCardIssuerName:
          description: "This field contains the beneficiary\u2019s card issuer name."
          type: string
        beneficiaryCity:
          description: This field accepts the city of the beneficiary.
          type: string
        beneficiaryContactCountryCode:
          description: This field accepts the mobile number country code of the beneficiary.
          type: string
        beneficiaryContactName:
          type: string
        beneficiaryContactNumber:
          description: This field accepts the mobile number of the beneficiary.
          type: string
        beneficiaryCountryCode:
          description: This field accepts the 2-letter [ISO-2 country code](/docs/currency-and-country-codes)
            of the beneficiary/bank.
          type: string
        beneficiaryDob:
          type: string
        beneficiaryEmail:
          description: This field accepts an email of the beneficiary.
          type: string
        beneficiaryEntityType:
          type: string
        beneficiaryEstablishmentDate:
          type: string
        beneficiaryIdentificationType:
          description: This field accepts the type of identification document name
            for a beneficiary.
          type: string
        beneficiaryIdentificationValue:
          description: This is an identification document number for the beneficiary.
          type: string
        beneficiaryName:
          description: This field accepts the name of the beneficiary.
          type: string
        beneficiaryName_local:
          description: This field accepts the name of beneficiary in local language
          type: string
        beneficiaryPostcode:
          description: This field accepts the postal code of the beneficiary.
          type: string
        beneficiaryState:
          description: This field accepts the state of the beneficiary.
          type: string
        destinationCountry:
          description: This field accepts the [ISO-2 country code](https://nium-documents.s3-eu-west-1.amazonaws.com/spend-documents/Country+Code.pdf)
            for the payout bank.
          type: string
        destinationCurrency:
          description: This field accepts the 3-letter [ISO-4217 destination currency
            code](https://www.iso.org/iso-4217-currency-codes.html) of the payout
            as per the destination country from supported corridors.
          type: string
        encryptedBeneficiaryCardToken:
          description: >-
            This field accepts the system generated token number to identify the card
            stored at NIUM's platform.

            Note: This field is mandatory if the client is non-PCI DSS compliant.
          type: string
        payoutMethod:
          description: This field accepts the payout method for the remittance payout.
          enum:
          - LOCAL
          - SWIFT
          - WALLET
          - CASH
          - CARD
          - PROXY
          - CHECK
          type: string
        proxyType:
          description: "This field indicates the proxy type sent in the payment request.\n\
            \u2022 For SGD-PayNow: The proxy type can be MOBILE, UEN, NRIC, or VPA.\n\
            \u2022 For INR-UPI: The proxy type should be VPA.\n\u2022 For BRL-PIX:\
            \ The proxy type can be MOBILE, ID, EMAIL, or RANDOM_KEY.\n\u2022 For\
            \ AUD-PayID: The proxy type can be MOBILE, EMAIL, ABN, or ORGANISATION_ID\
            \ (only domestic payouts are allowed).\n\u2022 For MYR-DuitNow: The proxy\
            \ type can be NRIC, PASSPORT, CORPORATE_REGISTRATION_NUMBER, MOBILE, or\
            \ ARMY_ID.\nNote: This field is mandatory when the payoutMethod type is\
            \ PROXY."
          type: string
        proxyValue:
          description: >-
            This field indicates the proxy value such as VPA, UEN, or mobile number
            etc.

            Note: This field is mandatory when the payoutMethod type is PROXY.

            The mobile number should include country code.
          type: string
        remitterBeneficiaryRelationship:
          description: This field accepts the relationship of the beneficiary with
            the remitter.
          type: string
        routingCodeType1:
          description: This field accepts the routing code type 1, for example, SWIFT
            for all countries, IFSC for India, SORT CODE for UK, ACH CODE for USA,
            BRANCH CODE for Brazil and Bangladesh, BSB CODE for Australia, BANK CODE
            for HongKong.
          type: string
        routingCodeType2:
          description: This field accepts the routing code type 2, for example, SWIFT
            for all countries, IFSC for India, SORT CODE for UK, ACH CODE for USA,
            BRANCH CODE for Brazil and Bangladesh, BSB CODE for Australia, BANK CODE
            for HongKong.
          type: string
        routingCodeValue1:
          description: This field accepts the routing code value 1, for example, ADCBINBB
            or ADCBINBB123 for SWIFT, SBIN0000058 for IFSC, 100000 for SORT CODE,
            111000025 for ACH CODE, 012515 for BSB CODE, 151 for BANK CODE.
          type: string
        routingCodeValue2:
          description: This field accepts the routing code value 2, for example, ADCBINBB
            or ADCBINBB123 for SWIFT, SBIN0000058 for IFSC, 100000 for SORT CODE,
            111000025 for ACH CODE, 012515 for BSB CODE, 151 for BANK CODE.
          type: string
      required:
      - beneficiaryCountryCode
      - beneficiaryName
      - destinationCurrency
      - payoutMethod
      title: Update beneficiary request
      type: object
    UpdateCustomerDTO:
      properties:
        additionalInfo:
          additionalProperties:
            type: string
          type: object
        authenticationCode:
          description: >-
            This field accepts the authentication code generated as part of SCA (Strong
            Customer Authentication).

            Note: : Authentication code must be passed if regulatory region of the
            program is UK or EU. This field does not accept a value for any other
            region.
          example: authCode
          type: string
        billingAddress1:
          description: Billing address line one of a customer.
          example: '#20-05, Hong Leong Building'
          type: string
        billingAddress2:
          description: Billing address line two of a customer.
          example: 16 Raffles Quay
          type: string
        billingAddressId:
          type: string
        billingCity:
          description: Billing address city name.
          example: Singapore
          type: string
        billingCountry:
          description: "This field accepts the 2-letter [ISO Alpha-2 country code](/docs/currency-and-country-codes)\
            \ denoting the country of customer\u2019s billing address. It is important\
            \ to pass this field if the card to be issued is to be used for GooglePay\
            \ or ApplePay provisioning."
          example: SG
          type: string
        billingLandmark:
          description: Billing landmark address field.
          example: Near Marina Blvd
          type: string
        billingState:
          description: Billing address state name.
          example: Singapore
          type: string
        billingZipCode:
          description: Billing address ZIP code.
          example: 048581
          type: string
        blockType:
          type: string
        correspondenceAddress1:
          description: Line one of the customer's correspondence address.
          example: '#20-05, Hong Leong Building'
          type: string
        correspondenceAddress2:
          description: Line two of the customer's correspondence address.
          example: 16 Raffles Quay
          type: string
        correspondenceAddressId:
          type: string
        correspondenceCity:
          description: Correspondence address city name.
          example: Singapore
          type: string
        correspondenceCountry:
          description: "This field accepts the 2-letter [ISO Alpha-2 country code](/docs/currency-and-country-codes)\
            \ denoting the country of customer\u2019s correspondence address."
          example: SG
          type: string
        correspondenceLandmark:
          description: Correspondence landmark address field.
          example: Near Marina blvd
          type: string
        correspondenceState:
          description: Correspondence address state name.
          example: Singapore
          type: string
        correspondenceZipCode:
          description: Correspondence postal/ZIP code of a customer.
          example: 048581
          type: string
        countryCode:
          description: This field contains the 2-letter [ISO Alpha-2 country code](/docs/currency-and-country-codes)
            for identifying the country prefix to a mobile number.
          example: SG
          type: string
        countryIP:
          description: The country IP for the device by the customer for initiating
            the request.
          example: 2.2.2.2
          type: string
        customerHashId:
          description: Unique customer identifier generated on customer creation.
          type: string
        deliveryAddress1:
          description: Line one of the address where the customer would like to receive
            a card.
          example: '#20-05, Hong Leong Building'
          type: string
        deliveryAddress2:
          description: Line two of the customer's delivery address.
          example: 16 Raffles Quay
          type: string
        deliveryAddressId:
          type: string
        deliveryCity:
          description: Customer's city name.
          example: Singapore
          type: string
        deliveryCountry:
          description: This field accepts the 2-letter [ISO Alpha-2 country code](/docs/currency-and-country-codes)
            denoting the country of customer's delivery address.
          example: SG
          type: string
        deliveryLandmark:
          description: delivery landmark address field.
          example: Near Marina Blvd
          type: string
        deliveryState:
          description: Customer's state name.
          example: Singapore
          type: string
        deliveryZipCode:
          description: Customer's ZIP code.
          example: 048581
          type: string
        deviceInfo:
          description: The OS of the device used by the customer for initiating the
            request.
          example: android
          type: string
        email:
          description: Customer's email address
          example: john@xyzmail.com
          type: string
        employeeId:
          description: This field accepts the employee Id for the customer, in case
            of a corporate program.
          type: string
        ipAddress:
          description: The IP address of the device used by the customer for initiating
            the request.
          example: 1.1.1.1
          type: string
        mobile:
          description: Mobile number to be updated.
          example: '81334300'
          type: string
        nativeLanguageName:
          description: >-
            This field contains the customer's name in native language.

            Maximum character limit: 40
          example: "\u754C\u9650"
          type: string
        occupation:
          description: "This field accepts the customer\u2019s occupation. Refer to\
            \ [Enum values](https://docs.nium.com/apis/docs/unified-add-customer-api)\
            \ for the description."
          enum:
          - OC0001
          - OC1001
          - OC1002
          - OC1003
          - OC1110
          - OC1120
          - OC1201
          - OC1210
          - OC1211
          - OC1220
          - OC1310
          - OC1311
          - OC1320
          - OC1410
          - OC1411
          - OC1420
          - OC1430
          - OC1440
          - OC2001
          - OC2110
          - OC2111
          - OC2112
          - OC2120
          - OC2121
          - OC2122
          - OC2123
          - OC2130
          - OC2131
          - OC2132
          - OC2133
          - OC2139
          - OC2210
          - OC2211
          - OC2221
          - OC2222
          - OC2223
          - OC2230
          - OC2231
          - OC3001
          - OC3110
          - OC3111
          - OC3112
          - OC3120
          - OC3130
          - OC3210
          - OC3211
          - OC3212
          - OC3220
          - OC3310
          - OC4001
          - OC4002
          - OC4003
          - OC4004
          - OC4110
          - OC4120
          - OC4121
          - OC4122
          - OC4130
          - OC4131
          - OC4132
          - OC4140
          - OC4210
          - OC4220
          - OC4310
          - OC4320
          - OC4410
          - OC4420
          - OC4510
          - OC5001
          - OC5110
          - OC5111
          - OC5112
          - OC5210
          - OC5211
          - OC5212
          - OC5310
          - OC5311
          - OC5312
          - OC5320
          - OC5410
          - OC5510
          - OC6001
          - OC6002
          - OC6003
          - OC6004
          - OC6201
          - OC6202
          - OC6210
          - OC6220
          - OC6310
          - OC6320
          - OC6321
          - OC6322
          - OC6410
          - OC6420
          - OC6430
          - OC6431
          - OC6432
          - OC6440
          - OC6441
          - OC6510
          - OC6520
          - OC6521
          - OC6522
          - OC6531
          - OC6532
          - OC7001
          - OC7002
          - OC7201
          - OC7202
          - OC7210
          - OC7220
          - OC7230
          - OC7231
          - OC7232
          - OC7240
          - OC7241
          - OC7242
          - OC7250
          - OC7260
          - OC7299
          - OC7310
          - OC7311
          - OC7320
          - OC7330
          - OC7331
          - OC7340
          - OC7410
          - OC7420
          - OC7510
          - OC7511
          - OC7520
          - OC7521
          - OC8001
          - OC8002
          - OC8201
          - OC8202
          - OC8203
          - OC8310
          - OC8311
          - OC8312
          - OC8410
          - OC8411
          - OC8412
          - OC8510
          - OC8511
          - OC8512
          - OC9001
          - OC9201
          - OC9202
          - OC9210
          - OC9310
          - OC9320
          - OC9410
          - OC9411
          - OC9412
          - OC9413
          - OC9414
          - OC9415
          - OC9420
          - OC9421
          - OC9510
          example: OC0001
          type: string
        segment:
          description: >-
            This is the fee segment associated with a client.

            Maximum character limit: 64
          example: gold
          type: string
        sessionId:
          description: The session Id for the session of the customer for initiating
            the request.
          example: '1234'
          type: string
      title: Update customer
      type: object
    UpdateCustomerResponseDTO:
      properties:
        message:
          description: This field will contain the message whether the update was
            successful or not.
          example: Customer Updated Successfull
          type: string
      title: Update customer response
      type: object
    UploadRfiDetailsResponseDto:
      properties:
        complianceId:
          description: This field contains the unique compliance ID for the customer.
          format: uuid
          type: string
        rfiId:
          description: >-
            This field contains the unique RFI ID. This is for future use.

            Currently, the value shall be null.
          format: uuid
          type: string
        status:
          description: "This field contains the status and following are the valid\
            \ values for compliance status:\n\u2022 IN_PROGRESS\n\u2022 ACTION_REQUIRED\n\
            \u2022 RFI_REQUESTED\n\u2022 RFI_RESPONDED\n\u2022 COMPLETED\n\u2022 REJECT\n\
            \u2022 ERROR\nIn case of successful response to RFI, expected status is\
            \ RFI_RESPONDED."
          type: string
      title: Upload Rfi details response
      type: object
    UploadRfiDocumentRequestDto:
      properties:
        rfiResponseRequest:
          description: This field accepts the additional requests for information,
            depending upon documents required to raise RFI
          items:
            $ref: '#/components/schemas/CustomerRfiResponseRequest'
          type: array
      required:
      - rfiResponseRequest
      title: Upload Rfi document request
      type: object
    PayinAccountStatusResponse:
      properties:
        bankName:
          description: ' This field contains the name of the bank which has issued
            the account linked to this funding instrument.'
          type: string
        clientHashId:
          description: This field contains the unique 36-character client identifier
            generated and shared before API handshake.
          type: string
        country:
          description: This field contains the [ 2-letter ISO-2 country code](https://docs.nium.com/apis/docs/currency-and-country-codes)
            where the bank account resides.
          type: string
        createdAt:
          description: This field contains the timestamp when the funding instrument
            was added.
          format: date-time
          type: string
        currency:
          description: This field contains the 3-letter [ISO-4217 currency code](https://docs.nium.com/apis/docs/currency-and-country-codes)
            for the account to be linked.
          example: USD
          type: string
        customerHashId:
          description: This field contains the unique 36-character customer identifier
            generated and shared before API handshake.
          type: string
        fundingChannel:
          description: The field shows the mode of funding the wallet.
          enum:
          - DIRECT_DEBIT
          example: DIRECT_DEBIT
          type: string
        fundingInstrumentId:
          description: This field contains the unique 36-character funding instrument
            identifier.
          type: string
        maskedAccountNumber:
          description: This field contains the masked bank account number in the format
            XXXXXXXXXXXX1111.
          type: string
        redirectURL:
          description: This field contains the URL where the customer is redirected.
          type: string
        routingType:
          description: This field contains the routing code type, for example, 'ACH
            CODE' for US.
          type: string
        routingValue:
          description: This field contains the routing code value.
          type: string
        saved:
          description: This flag returns true when the funding instrument is saved.
            This can return false when funding instrument status is not yet approved.
          type: boolean
        status:
          description: This field contains the current status of the funding instrument.
          enum:
          - ACTIVE
          - INACTIVE
          - BLOCKED
          - SUSPENDED
          - UPLOADED
          - APPROVED
          - REJECTED
          - FAILED
          - SUCCESS
          - FAILURE
          - PARTIALLY SUCCESS
          - SYNC
          - NOT SYNC
          - PENDING
          - REQUIRES_ACTION
          - CLEAR
          - DECLINED
          - ACCOUNT_BLOCKED
          - AMOUNT_BLOCKED
          - DE_LINKED
          - CANCELLED
          - LINKED
          - INITIATED
          type: string
        statusDescription:
          description: This field contains the additional information of the status
            response.
          type: string
        updatedAt:
          description: This field contains the timestamp when the funding instrument
            was last updated.
          format: date-time
          type: string
        walletHashId:
          description: This field contains the unique 36-character wallet identifier
            generated and shared before API handshake.
          type: string
      title: AccountStatusResponse
      type: object
    AddFundingInstrumentV2ErrorResponse:
      properties:
        errors:
          items:
            $ref: '#/components/schemas/TypedErrorOfstring'
          type: array
      title: Add Funding Instrument error responses
      type: object
    AllLimitsDTO:
      properties:
        dailyAggregateLimit:
          format: double
          type: number
        monthlyAggregateLimit:
          format: double
          type: number
        perTransactionLimit:
          format: double
          type: number
        rollingLimit:
          format: double
          type: number
        rollingLimitPeriod:
          format: int32
          type: integer
      title: AllLimitsDTO
      type: object
    PayinApiError:
      properties:
        errors:
          description: List of errors occurred.
          example:
          - field1 is not valid
          - field2 is not valid
          items:
            type: string
          type: array
        message:
          description: Error message descriptor.
          example: Error message descriptor.
          type: string
        status:
          description: 'HttpStatus of the request : BAD_REQUEST, INTERNAL_SERVER_ERROR.'
          enum:
          - 100 CONTINUE
          - 101 SWITCHING_PROTOCOLS
          - 102 PROCESSING
          - 103 CHECKPOINT
          - 200 OK
          - 201 CREATED
          - 202 ACCEPTED
          - 203 NON_AUTHORITATIVE_INFORMATION
          - 204 NO_CONTENT
          - 205 RESET_CONTENT
          - 206 PARTIAL_CONTENT
          - 207 MULTI_STATUS
          - 208 ALREADY_REPORTED
          - 226 IM_USED
          - 300 MULTIPLE_CHOICES
          - 301 MOVED_PERMANENTLY
          - 302 FOUND
          - 302 MOVED_TEMPORARILY
          - 303 SEE_OTHER
          - 304 NOT_MODIFIED
          - 305 USE_PROXY
          - 307 TEMPORARY_REDIRECT
          - 308 PERMANENT_REDIRECT
          - 400 BAD_REQUEST
          - 401 UNAUTHORIZED
          - 402 PAYMENT_REQUIRED
          - 403 FORBIDDEN
          - 404 NOT_FOUND
          - 405 METHOD_NOT_ALLOWED
          - 406 NOT_ACCEPTABLE
          - 407 PROXY_AUTHENTICATION_REQUIRED
          - 408 REQUEST_TIMEOUT
          - 409 CONFLICT
          - 410 GONE
          - 411 LENGTH_REQUIRED
          - 412 PRECONDITION_FAILED
          - 413 PAYLOAD_TOO_LARGE
          - 413 REQUEST_ENTITY_TOO_LARGE
          - 414 URI_TOO_LONG
          - 414 REQUEST_URI_TOO_LONG
          - 415 UNSUPPORTED_MEDIA_TYPE
          - 416 REQUESTED_RANGE_NOT_SATISFIABLE
          - 417 EXPECTATION_FAILED
          - 418 I_AM_A_TEAPOT
          - 419 INSUFFICIENT_SPACE_ON_RESOURCE
          - 420 METHOD_FAILURE
          - 421 DESTINATION_LOCKED
          - 422 UNPROCESSABLE_ENTITY
          - 423 LOCKED
          - 424 FAILED_DEPENDENCY
          - 425 TOO_EARLY
          - 426 UPGRADE_REQUIRED
          - 428 PRECONDITION_REQUIRED
          - 429 TOO_MANY_REQUESTS
          - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
          - 451 UNAVAILABLE_FOR_LEGAL_REASONS
          - 500 INTERNAL_SERVER_ERROR
          - 501 NOT_IMPLEMENTED
          - 502 BAD_GATEWAY
          - 503 SERVICE_UNAVAILABLE
          - 504 GATEWAY_TIMEOUT
          - 505 HTTP_VERSION_NOT_SUPPORTED
          - 506 VARIANT_ALSO_NEGOTIATES
          - 507 INSUFFICIENT_STORAGE
          - 508 LOOP_DETECTED
          - 509 BANDWIDTH_LIMIT_EXCEEDED
          - 510 NOT_EXTENDED
          - 511 NETWORK_AUTHENTICATION_REQUIRED
          example: BAD_REQUEST
          type: string
      title: ApiError
      type: object
    PayinApiResponse2:
      properties:
        message:
          description: This field returns `true` if the request was successful.
          example: ICC request has been processed and published successfully
          type: string
        success:
          description: This flag indicates the success of the request.
          example: true
          type: boolean
      title: ApiResponse2
      type: object
    ApiResponseOfstring:
      properties:
        body:
          description: The response message from our server.
          example: Success
          type: string
        code:
          description: The `HTTP` status code and additional details about what the
            code means.
          example: 200 OK
          type: string
        errors:
          description: Returns a description of the error if any ocurred.
          items:
            type: string
          type: array
        message:
          description: Returns the response message.
          example: Success
          type: string
        status:
          description: Details if the request was successful or if an error has ocurred.
          enum:
          - 100 CONTINUE
          - 101 SWITCHING_PROTOCOLS
          - 102 PROCESSING
          - 103 CHECKPOINT
          - 200 OK
          - 201 CREATED
          - 202 ACCEPTED
          - 203 NON_AUTHORITATIVE_INFORMATION
          - 204 NO_CONTENT
          - 205 RESET_CONTENT
          - 206 PARTIAL_CONTENT
          - 207 MULTI_STATUS
          - 208 ALREADY_REPORTED
          - 226 IM_USED
          - 300 MULTIPLE_CHOICES
          - 301 MOVED_PERMANENTLY
          - 302 FOUND
          - 302 MOVED_TEMPORARILY
          - 303 SEE_OTHER
          - 304 NOT_MODIFIED
          - 305 USE_PROXY
          - 307 TEMPORARY_REDIRECT
          - 308 PERMANENT_REDIRECT
          - 400 BAD_REQUEST
          - 401 UNAUTHORIZED
          - 402 PAYMENT_REQUIRED
          - 403 FORBIDDEN
          - 404 NOT_FOUND
          - 405 METHOD_NOT_ALLOWED
          - 406 NOT_ACCEPTABLE
          - 407 PROXY_AUTHENTICATION_REQUIRED
          - 408 REQUEST_TIMEOUT
          - 409 CONFLICT
          - 410 GONE
          - 411 LENGTH_REQUIRED
          - 412 PRECONDITION_FAILED
          - 413 PAYLOAD_TOO_LARGE
          - 413 REQUEST_ENTITY_TOO_LARGE
          - 414 URI_TOO_LONG
          - 414 REQUEST_URI_TOO_LONG
          - 415 UNSUPPORTED_MEDIA_TYPE
          - 416 REQUESTED_RANGE_NOT_SATISFIABLE
          - 417 EXPECTATION_FAILED
          - 418 I_AM_A_TEAPOT
          - 419 INSUFFICIENT_SPACE_ON_RESOURCE
          - 420 METHOD_FAILURE
          - 421 DESTINATION_LOCKED
          - 422 UNPROCESSABLE_ENTITY
          - 423 LOCKED
          - 424 FAILED_DEPENDENCY
          - 425 TOO_EARLY
          - 426 UPGRADE_REQUIRED
          - 428 PRECONDITION_REQUIRED
          - 429 TOO_MANY_REQUESTS
          - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
          - 451 UNAVAILABLE_FOR_LEGAL_REASONS
          - 500 INTERNAL_SERVER_ERROR
          - 501 NOT_IMPLEMENTED
          - 502 BAD_GATEWAY
          - 503 SERVICE_UNAVAILABLE
          - 504 GATEWAY_TIMEOUT
          - 505 HTTP_VERSION_NOT_SUPPORTED
          - 506 VARIANT_ALSO_NEGOTIATES
          - 507 INSUFFICIENT_STORAGE
          - 508 LOOP_DETECTED
          - 509 BANDWIDTH_LIMIT_EXCEEDED
          - 510 NOT_EXTENDED
          - 511 NETWORK_AUTHENTICATION_REQUIRED
          example: OK
          type: string
      title: API response
      type: object
    ClientPrefundListResponse:
      properties:
        pagination:
          $ref: '#/components/schemas/PayinPagination'
        prefundList:
          items:
            $ref: '#/components/schemas/ClientPrefundListResponseDTO'
          type: array
      title: ClientPrefundListResponse
      type: object
    ClientPrefundListResponseDTO:
      properties:
        amount:
          format: double
          type: number
        bankReferenceNumber:
          type: string
        clientAccountNumber:
          type: string
        clientCode:
          type: string
        clientName:
          type: string
        comments:
          type: string
        createdAt:
          format: date-time
          type: string
        createdBy:
          type: string
        currencyCode:
          type: string
        dateOfCreation:
          format: date-time
          type: string
        dateOfTransfer:
          type: string
        imageUrl:
          type: string
        niumAccountNumber:
          type: string
        status:
          type: string
        systemReferenceNumber:
          type: string
        uniquePayerId:
          type: string
        uniquePaymentId:
          type: string
        updatedAt:
          format: date-time
          type: string
        updatedBy:
          type: string
      title: ClientPrefundListResponseDTO
      type: object
    ClientPrefundResponseDTO:
      properties:
        amount:
          description: This field contains the amount transferred to account.
          example: 1000
          format: double
          type: number
        message:
          description: This field will return a success message if the prefund request
            added successfully
          example: Prefund request added successfully
          type: string
        status:
          description: This field contains the status.
          enum:
          - Pending
          - Approved
          - Rejected
          example: Pending
          type: string
        systemReferenceNumber:
          description: This field contains the transaction reference number or identifier
            generated by card issuance platform for the client prefund request.
          example: CP8790469553
          type: string
        uniquePayerId:
          description: This field contains the unique email ID provided to the customer
            in addition to uniquePaymentId for supported regions and configuration,
            or else it will be null, for example, abc12_ca@nium.com.
          example: 'null'
          type: string
        uniquePaymentId:
          description: This field contains the virtual account number per currency
            provided to customers for supported regions and configuration, for example,
            IBAN in EU, virtual account number from Moonova in AU, or else, it will
            be null.
          example: 'null'
          type: string
      title: Client prefund response
      type: object
    ConfirmFundingInstrumentRequestDTO:
      properties:
        otpReceived:
          description: The one-time password (OTP) you received from Nium when calling
            the Add Funding Instrument API. This is a required field for EU and UK
            direct deposits.
          type: string
      title: Confirm Funding Instrument request
      type: object
    CustomerLinkAccountRequest:
      properties:
        accountNumber:
          description: The customer account number or IBAN.
          example: '55779911'
          type: string
        country:
          description: The [2-letter ISO-2 country code](/docs/currency-and-country-codes)
            where the bank account resides.
          example: US
          type: string
        currency:
          description: The 3-letter [ISO-4217 currency code](/docs/currency-and-country-codes)
            for the linked account.
          example: USD
          type: string
        fundingChannel:
          description: The mode to use to fund a wallet. Adding a new funding instrument
            is only supported for direct debit.
          enum:
          - DIRECT_DEBIT
          example: DIRECT_DEBIT
          type: string
        rails:
          description: The payment rails which funds will be sent through.
          enum:
          - becs
          - payto
          example: payto
          type: string
        routingCodes:
          description: Accepts the List of routing code type and value.
          items:
            $ref: '#/components/schemas/RoutingInfo'
          type: array
      required:
      - country
      - currency
      - fundingChannel
      title: Customer link account request
      type: object
    CustomerLinkAccountRequestV2:
      properties:
        bankAccountId:
          format: uuid
          type: string
      title: Customer link Account request V2
      type: object
    DeviceDetailsV2DTO:
      properties:
        deviceInfo:
          description: A name or description of the device.
          example: iPhone
          type: string
        ipAddress:
          description: The device's IP address.
          type: string
        sessionId:
          description: An identifier for the customer's session.
          type: string
      title: DeviceDetailsV2DTO
      type: object
    DirectDebitAvailableLimitsDTO:
      properties:
        fasterDirectDebitLimits:
          $ref: '#/components/schemas/LimitsDTO'
        standardDirectDebitLimits:
          $ref: '#/components/schemas/LimitsDTO'
      title: DirectDebitAvailableLimitsDTO
      type: object
    DirectDebitClientCurrencyLimitsDTO:
      properties:
        availableLimits:
          $ref: '#/components/schemas/DirectDebitAvailableLimitsDTO'
        currency:
          type: string
        maximumLimits:
          $ref: '#/components/schemas/DirectDebitMaximumLimitsDTO'
      title: DirectDebitClientCurrencyLimitsDTO
      type: object
    DirectDebitMaximumLimitsDTO:
      properties:
        fasterDirectDebitLimits:
          $ref: '#/components/schemas/AllLimitsDTO'
        standardDirectDebitLimits:
          $ref: '#/components/schemas/AllLimitsDTO'
      title: DirectDebitMaximumLimitsDTO
      type: object
    DocumentDetails:
      properties:
        amountPayable:
          description: The total amount payable specified by the document.
          format: double
          type: number
        document:
          description: This field contains the invoice as uploaded in Base64 encoded
            format.
          example: iVBORw0KGgoAAAANSUhEU...<Base64 Encoded Image or Document>
          type: string
        identifier:
          description: This field contains an alphanumeric value containing the document's
            identification number
          example: 45667090
          type: string
        mimeType:
          description: This field contains the file type of the uploaded invoice.
          enum:
          - image/png
          - image/jpg
          - image/jpeg
          - application/pdf
          example: image/png
          type: string
        type:
          description: This field contains the type of the uploaded document.
          enum:
          - invoice
          - contract
          - purchase_order
          example: invoice
          type: string
      title: DocumentDetails
      type: object
    FundingInstrumentStatusUpdateRequestDTO:
      properties:
        action:
          description: The action value to simulate the status of the funding instrument.
          enum:
          - MICRODEPOSIT_REVERSED
          - MICRODEPOSIT_SUCCESSFUL
          example: MICRODEPOSIT_REVERSED
          type: string
      required:
      - action
      title: FundingInstrumentStatusUpdateRequestDTO
      type: object
    InvoiceDetails:
      properties:
        date:
          description: Date of the trade.
          example: '2022-09-21'
          type: string
        description:
          description: A brief description of the wallet.
          example: Card payment
          type: string
        items:
          description: Ender details about the quantity and price.
          example: Trade Details
          items:
            $ref: '#/components/schemas/ItemDetails'
          type: array
        name:
          description: The name of the account holder.
          example: Jack Stan
          type: string
        number:
          description: A unique alphanumeric value containing an invoice number for
            your reference at a later time.
          example: 45667090
          type: string
      title: Invoice details
      type: object
    InwardPaymentManualRequestDTO:
      properties:
        additionalInfo:
          additionalProperties:
            type: string
          description: This object accepts additional information about the corridor
            being used.
          type: object
        amount:
          description: The amount of the transaction to simulate.
          example: 10
          format: double
          type: number
        bankReferenceNumber:
          description: This field contains the bank reference number.
          example: '712347512376'
          type: string
        bankSource:
          description: This field details the source of the funds.
          enum:
          - DBS_HK
          - DBS_SG
          - DBS_ID
          - JPM_SG
          - JPM_AU
          - JPM_UK
          - JPM_CA
          - MONOOVA_AU
          - BOL_LT
          - CB_GB
          - CFSB_US
          - BARCLAYS_UK
          - BARCLAYS_EU
          - CITI_SG
          - CITI_MX
          - CFSB_USINTL
          - GMO_JP
          - NETBANK_PH
          - GOCARDLESS
          - DIRECTFAST_SG
          - BANKINGCIRCLE_PL
          - SCB
          - COLUMN
          example: DBS_SG
          type: string
        branchCode:
          description: This field contains bank's branch code.
          example: 535
          type: string
        country:
          description: This field contains the country.
          example: SG
          type: string
        currency:
          description: This field contains the 3-letter currency code.
          enum:
          - SGD
          - AUD
          - EUR
          - HKD
          - USD
          - GBP
          - AED
          - CAD
          - CHF
          - CZK
          - DKK
          - HUF
          - ILS
          - MXN
          - NOK
          - NZD
          - PLN
          - RON
          - RUB
          - SEK
          - ZAR
          - CNY
          - JPY
          - THB
          - TRY
          - PHP
          - IDR
          example: SGD
          type: string
        iccExpiry:
          description: This field contains the expiry time for ICC.
          example: '2023-07-05 07:26:38.026'
          type: string
        instructionType:
          description: This field contains the payment instruction type
          enum:
          - INQUIRY
          - PROCESS
          example: PROCESS
          type: string
        narrative:
          description: This field contains the narrative.
          example: FROM NIUM
          type: string
        payMode:
          description: This field details the payment mode.
          example: ACH
          type: string
        remitterAccountNumber:
          description: This field contains the remitter account number.
          example: HLFX11029100808072
          type: string
        remitterBankCode:
          description: This field contains the remitter bank code.
          example: BYLADEM1KUB
          type: string
        remitterBankName:
          description: This field contains the remitter bank name.
          example: DBS_SG
          type: string
        remitterName:
          description: This field contains the remitter name.
          example: John K
          type: string
        remitterNameLocalLanguage:
          description: This field contains the remitter name local language.
          example: "\u30A8\u30E0\u30FB\u30A8\u30B9\u30FB\u30B7\u30E3\u30FC\u30DE\u30FC"
          type: string
        transactionId:
          description: This field contains the transaction reference number/ID.
          example: FW242141
          type: string
        transactionSource:
          description: This field contains the ICC transaction source.
          example: ACH
          type: string
        type:
          description: This field contains the ICC entry type.
          example: CREDIT or DEBIT
          type: string
        virtualAccountNumber:
          description: This field contains the virtual account number.
          example: '907654315445678'
          type: string
      title: InwardPaymentManualRequestDTO
      type: object
    ItemDetails:
      properties:
        unitPrice:
          description: The price of an indivdual unit. Only accepts whole numbers;
            decimals and partial integers are not allowed.
          example: 1
          type: string
        unitQuantity:
          description: This quantity of units. Only accepts whole numbers; decimals
            and partial integers are not allowed. whole number
          example: 1
          type: string
      title: Item details
      type: object
    LimitsDTO:
      properties:
        dailyAggregateLimit:
          format: double
          type: number
        monthlyAggregateLimit:
          format: double
          type: number
        rollingLimit:
          format: double
          type: number
      title: LimitsDTO
      type: object
    LimitsResponseDTO:
      properties:
        directDebit:
          items:
            $ref: '#/components/schemas/DirectDebitClientCurrencyLimitsDTO'
          type: array
      title: LimitsResponseDTO
      type: object
    LinkAccountResponse:
      properties:
        country:
          description: The [2-letter ISO-2 country code](/docs/currency-and-country-codes)
            where the bank account resides.
          example: US
          type: string
        createdAt:
          description: The timestamp of when the funding instrument was added.
          format: date-time
          type: string
        currency:
          description: The 3-letter [ISO-4217 currency code](/docs/currency-and-country-codes)
            for the account to be linked.
          example: USD
          type: string
        fundingChannel:
          description: The mode of funding the wallet. Direct debit is supported when
            adding a new funding instrument.
          enum:
          - DIRECT_DEBIT
          type: string
        fundingInstrumentId:
          description: The unique 36-character alphanumeric identifier of a funding
            instrument. The ID is a bank account identifier when the funding channel
            is direct debit.
          type: string
        returnUrl:
          description: The URL to redirect the customer when they're done.
          type: string
        status:
          description: This field contains the status of the request. Available values
            include:<ul><li><strong>PENDING</strong></li><li><strong>FAILED</strong></li></ul>
          type: string
      title: Link Account response
      type: object
    LinkAccountResponseV2:
      properties:
        bankAccountId:
          format: uuid
          type: string
        country:
          type: string
        createdAt:
          format: date-time
          type: string
        currency:
          type: string
        fundingInstrumentId:
          format: uuid
          type: string
        maskedAccountNumber:
          type: string
        routingCodes:
          items:
            $ref: '#/components/schemas/RoutingInfo'
          type: array
        status:
          type: string
      title: Link Account response V2
      type: object
    MapOfstringAndobject:
      additionalProperties:
        type: object
      title: MapOfstringAndobject
      type: object
    PayinPagination:
      properties:
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
      title: Pagination
      type: object
    PrefundRequestDTO:
      properties:
        amount:
          description: This field accepts the amount transferred to account
          example: 1000
          format: double
          type: number
        bankReferenceNumber:
          description: This field accepts the reference number provided by the bank
            during fund transfer
          example: '712347512376'
          type: string
        beneAccountNumber:
          description: This field accepts the virtual account number
          example: 800207849
          type: string
        clientAccountNumber:
          description: This field accepts the client's bank account number for reference
            from which the client has transferred money.
          example: '615234671328'
          type: string
        comments:
          description: This field accepts the comments which need to be passed, if
            any.
          example: Client Prefund
          type: string
        currencyCode:
          description: This field accepts the 3-letter [ISO-4217 currency code](/docs/currency-and-country-codes).
          example: SGD
          type: string
        dateOfTransfer:
          description: This field accepts the date of the client's prefund transfer
            to the NIUM bank account. This request can be raised for a transfer within
            30 days.
          example: '2019-11-24'
          type: string
        niumAccountNumber:
          description: This field accepts the NIUM account number to which the client
            has transferred the money.
          example: '133876812367'
          type: string
        requesterId:
          description: This field accepts the client's unique requester ID.
          example: '8123768123'
          type: string
      required:
      - amount
      - currencyCode
      title: Prefund request
      type: object
    RoutingInfo:
      properties:
        type:
          description: This field accepts the routing code type.
          enum:
          - SWIFT
          - TRANSIT_NUMBER
          - BSB_CODE
          - SORT_CODE
          - ACH_CODE
          - BANK_CODE
          - BRANCH_CODE
          example: SORT_CODE
          type: string
        value:
          description: This field accepts the routing code value.
          example: 200000
          type: string
      title: Routing info
      type: object
    PayinStandard401Error:
      properties:
        code:
          enum:
          - unauthorized
          type: string
        description:
          enum:
          - Access Denied
          type: string
      title: Standard 401 error
      type: object
    PayinStandard403Error:
      properties:
        code:
          enum:
          - access_forbidden
          type: string
        description:
          enum:
          - Access to resource not allowed
          type: string
      title: Standard 403 error
      type: object
    Standard404Error:
      properties:
        code:
          enum:
          - resource_not_found
          type: string
        description:
          type: string
      title: Standard 404 error
      type: object
    PayinStandard500Error:
      properties:
        code:
          enum:
          - internal_error
          - external_dependent_system_failed
          type: string
        description:
          enum:
          - An internal error occurred
          type: string
      title: Standard 500 error
      type: object
    TransactionDetails:
      properties:
        clientTransactionId:
          description: The client's unique transaction identifier maintained within
            their systems.
          type: string
        date:
          description: The date on which the transaction is expected to have been
            made. This must be provided in YYYY-MM-DD format.
          type: string
        description:
          description: Additional description of the incoming transaction
          type: string
        purposes:
          description: A list of objects representing the purposes of the transaction.
            Optionally, the user may provide purpose-specific fields inside the purpose
            object. At least one purpose must be provided.
          items:
            $ref: '#/components/schemas/TransactionPurposeDTO'
          type: array
        senderName:
          description: Name of sender/remitter from whom funds are to be collected
          type: string
      title: TransactionDetails
      type: object
    TransactionPurposeDTO:
      properties:
        type:
          description: The type of transaction purpose.
          enum:
          - goods
          - services
          - commissions
          type: string
      title: TransactionPurposeDTO
      type: object
    TypedErrorOfstring:
      properties:
        code:
          enum:
          - validation_error
          - direct_debit_disabled
          - invalid_bank_account
          - invalid_input
          type: string
        description:
          type: string
        field:
          type: string
      title: Typo error
      type: object
    WalletFundDTO:
      properties:
        amount:
          description: The amount in the destination currency to transfer. If `amount`
            is provided, it will take precedence over the `sourceAmount` field.
          example: 500
          format: double
          type: number
        countryIpAddress:
          description: The country IP address of the device the customer is using
            to initate the request.
          example: 2.2.2.2
          type: string
        currencyMap:
          additionalProperties:
            format: double
            type: number
          type: object
        destinationCurrencyCode:
          description: The 3-letter [ISO-4217 currency code](/docs/currency-and-country-codes)
            for the destination amount.
          example: SGD
          type: string
        deviceKey:
          description: Device key
          example: 1234567890
          type: string
        fundingChannel:
          description: <ul><li>Funding wallets using <strong>PREFUND</strong> is available
            via cross-currency.</li><li>Funding wallets using <strong>BANK_TRANSFER</strong>
            mode is only available for SGD to SGD. <strong>BANK_TRANSFER</strong>
            is not available for cross-currency funding.</li><li>Funding wallets using
            <strong>DIRECT_DEBIT</strong> is only available for the USA.</li></ul>
          enum:
          - PREFUND
          - BANK_TRANSFER
          - CARD
          - DIRECT_DEBIT
          - FASTER_DIRECT_DEBIT
          example: BANK_TRANSFER
          type: string
        fundingInstrumentExpiry:
          description: The expiry date of the funding insturment in MMYY format. Required
            when adding new cards.
          type: string
        fundingInstrumentHolderName:
          description: Name of the card holder as printed on the card. Maximum length
            of this field is 26 characters. This is required in case of new card.
          example: John Smith
          type: string
        fundingInstrumentId:
          description: The ID of the funding instrument that's returned when Adding
            a `fundingInstrument` `. The `fundingInstrumentId` is a card hash when
            `fundingChannel` is **CARD** and required only for existing cards. The
            id is a bank account identifier when the funding channel is direct debit.
          type: string
        fundingInstrumentNumber:
          description: The 16-digit card number. Required when adding new cards.
          type: string
        fundingInstrumentSecurityNumber:
          description: The 3-digit CVV number. Required for both new and existing
            cards.
          type: string
        invoiceDetails:
          $ref: '#/components/schemas/InvoiceDetails'
          description: Used only for JPY collection fund requests.
        ipAddress:
          description: The IP address of the device the customer is using to initate
            the request.
          example: 192.168.1.1
          type: string
        pocketName:
          description: The name of the pocket as defined under base currency.
          example: DEFAULT
          type: string
        save:
          description: Set to **TRUE** to save the funding instrument for future transfers.
          example: true
          type: boolean
        sessionId:
          description: The session ID of the instance the customer is initiating.
            the request.
          example: '1234'
          type: string
        sourceAmount:
          description: The amount in the source currency to convert and transfer.
            Note the `amount` field takes precedence over `sourceAmount`.
          example: 15.34
          format: double
          type: number
        sourceCurrencyCode:
          description: The 3-letter [ISO-4217 currency code](/docs/currency-and-country-codes)
            for the source amount.
          example: SGD
          type: string
        statementNarrative:
          description: Set what to display on bank account statements when they are
            pulling funds using Direct Debit. The value entered will be truncated
            to 10 characters for the UK and US, and 140 chars for the EU.
          type: string
      required:
      - destinationCurrencyCode
      - fundingChannel
      - sourceCurrencyCode
      title: Wallet fund
      type: object
    WalletFundResponseDTO:
      properties:
        chargeDate:
          description: Charge date of the payment
          type: string
        destinationAmount:
          description: The credited amount.
          example: 500
          format: double
          type: number
        destinationCurrencyCode:
          description: The 3-letter [ISO-4217 currency code](/docs/currency-and-country-codes)
            for the destination amount.
          example: USD
          type: string
        paymentMethods:
          description: An array with three types of objects:<ul><li>Bank transfer
            data</li><li>Dynamic pay now code</li><li>Static pay now code</li></ul>
          items:
            $ref: '#/components/schemas/MapOfstringAndobject'
          type: array
        returnUrl:
          description: A 3DS Stripe URL generated to enter a One-Time Password (OTP).
          type: string
        sourceAmount:
          description: The amount in the source currency that's being converted and
            transfered. Note the `amount` field takes precedence over `sourceAmount`.
          example: 500
          format: double
          type: number
        sourceCurrencyCode:
          description: The 3-letter [ISO-4217 currency code](/docs/currency-and-country-codes)
            for the source amount.
          example: SGD
          type: string
        status:
          description: Returns the following values:<ul> <li><strong>Pending:</strong>
            Authorization of the transaction is awaiting approval.</li> <li><strong>Approved:</strong>
            The transaction has been approved and successfully authorized.</li> <li><strong>Rejected:</strong>
            The transaction was rejected due to NIUM's risk and compliance policy.</li>
            <li><strong>Declined:</strong> The transaction was declined. Follow up
            with the account owner to confirm funds are available, and the details
            provided are correct.</li> <li><strong>Reversal:</strong> The transaction
            was reversed and refunded.</li> <li><strong>Disputed:</strong> The account
            owner has disputed the transaction and filed a dispute with their bank.</li>
            <li><strong>DisputeClosed:</strong> The dispute filed against the transaction
            has been resolved.</li> </ul>
          example: Pending
          type: string
        systemReferenceNumber:
          description: The transaction reference number generated by the card issuance
            platform.
          example: FW5289214401
          type: string
      title: Wallet fund response
      type: object
    WalletFundingInstrumentsResponseDTO:
      properties:
        bankName:
          description: The name of the bank that issued the account associated with
            the funding instrument.
          type: string
        cardBankName:
          description: The name of the bank that issued the card associated with the
            funding instrument.
          example: CHASE MANHATTAN BANK
          type: string
        cardNetwork:
          description: The payment network the provided card uses. At this time we
            support Visa and MasterCard.
          example: visa
          type: string
        cardType:
          description: The type of card being used. Available values include **credit**
            and **debit**.
          example: credit
          type: string
        clientHashId:
          description: The unique 36-character client identifier generated and shared
            before the API handshake.
          example: c9364508-bd8e-4f6c-a481-8b0cd9a0a7b3
          type: string
        country:
          description: The country the card or account was originally opened in.
          example: US
          type: string
        createdAt:
          description: A timestamp detailing when the funding instrument got added.
            returned in a YYYY-MM-DD hh:mm:ss format.
          example: '2021-01-13 11:13:53'
          format: date-time
          type: string
        currency:
          description: This currency the submitted the card or account uses.
          example: USD
          type: string
        customerHashId:
          description: The unique 36-character customer identifier generated and shared
            before the API handshake.
          example: 39396524-6f07-4abf-a957-9cc4f7f927cd
          type: string
        fundingChannel:
          description: The funding channel of the funding instrument.
          enum:
          - DIRECT_DEBIT
          example: DIRECT_DEBIT
          type: string
        fundingInstrumentId:
          description: The unique 36-character funding instrument identifier.
          example: e5bc0d30-6455-4942-b65e-3a195fc5fbd8
          type: string
        maskCardNumber:
          description: 'The 16-digit card number in a masked format: 1234-56xx-xxxx-3456.'
          example: 4000-00xx-xxxx-0446
          type: string
        maskedAccountNumber:
          description: The account number in a masked format where only the blast
            4 digits are visible.
          example: XXXXXXXXXXXX1111
          type: string
        routingType:
          description: The routing type.
          example: ACH CODE
          type: string
        routingValue:
          description: The routing value.
          example: '011401533'
          type: string
        saved:
          description: Details if the the funding instrument is saved for future funding
            transfers. or not.
          example: true
          type: boolean
        status:
          description: The status of the funding instrument.
          enum:
          - ACTIVE
          - INACTIVE
          - BLOCKED
          - SUSPENDED
          - UPLOADED
          - APPROVED
          - REJECTED
          - FAILED
          - SUCCESS
          - FAILURE
          - PARTIALLY SUCCESS
          - SYNC
          - NOT SYNC
          - PENDING
          - REQUIRES_ACTION
          - CLEAR
          - DECLINED
          - ACCOUNT_BLOCKED
          - AMOUNT_BLOCKED
          - DE_LINKED
          - CANCELLED
          - LINKED
          - INITIATED
          example: APPROVED
          type: string
        threeDSecureUsage:
          description: Details if the funding instrument supports 3DS verification.
          example: true
          type: boolean
        updatedAt:
          description: A timestamp detailing when the funding instrument was last
            updated. returned in a YYYY-MM-DD hh:mm:ss format.
          example: '2021-01-13 11:13:53'
          format: date-time
          type: string
        walletHashId:
          description: This field contains the unique 36-character wallet identifier
            generated and shared before API handshake.
          example: f898c437-21b6-4050-8457-c70cc035644c
          type: string
      title: Wallet Funding Instruments response
      type: object
    ProductAccountWhiteList:
      properties:
        bankAccountName:
          type: string
        bankAccountNumber:
          type: string
        bankBranch:
          type: string
        bankName:
          type: string
        currency:
          type: string
      title: AccountWhiteList
      type: object
    AddCategoryResponseDTO:
      properties:
        data:
          description: This object contains the list of Category Constants
          items:
            $ref: '#/components/schemas/CategoryData'
          type: array
      title: AddCategoryResponseDTO
      type: object
    ProductAddress:
      properties:
        addressLine1:
          description: "This field accepts the address line 1 of the stakeholder\u2019\
            s residential address.\n\nAU: Required\nEU: Required\nUK: Required\nSG:\
            \ Optional"
          type: string
        addressLine2:
          description: "This field accepts the address line 2 of the stakeholder\u2019\
            s residential address.\n\nAU: Required\nEU: Optional\nUK: Optional\nSG:\
            \ Optional"
          type: string
        city:
          description: "This field accepts the stakeholder\u2019s residential city.\n\
            \nAU: Required\nEU: Required\nUK: Required\nSG: Optional"
          type: string
        country:
          description: >-
            This field accepts the [2-letter ISO Alpha-2 country code](https://nium-documents.s3-eu-west-1.amazonaws.com/spend-documents/Country+Code.pdf)
            for the residential country of the stakeholder.


            AU: Optional

            EU: Required

            UK: Required

            SG: Required
          type: string
        postcode:
          description: "This field accepts the zip code or postal code of the stakeholder\u2019\
            s residential address.\n\nAU: Optional\nEU: Required\nUK: Required\nSG:\
            \ Required"
          type: string
        state:
          description: "This field accepts the state of the stakeholder\u2019s residential\
            \ address.\n\nAU: Optional\nEU: Required\nUK: Required\nSG: Required"
          type: string
      title: Address
      type: object
    ProductAddresses:
      properties:
        businessAddress:
          $ref: '#/components/schemas/ProductBusinessAddress'
          description: >-
            This object accepts the business address details for the new corporate
            entity to be onboarded.

            This field is required in case the principal place of business is different
            than the registered address that is when the isSameBusinessAddress is
            No.


            AU: Conditional

            EU: Conditional

            UK: Conditional

            SG: Conditional
        registeredAddress:
          $ref: '#/components/schemas/ProductRegisteredAddress'
          description: >-
            This field accepts the registered address details for the new corporate
            entity to be onboarded.


            AU: Required

            EU: Required

            UK: Required

            SG: Required
      title: Addresses
      type: object
    ProductApiError:
      properties:
        errors:
          description: List of errors occurred.
          example:
          - field1 is not valid
          - field2 is not valid
          items:
            type: string
          type: array
        message:
          description: Error message descriptor.
          example: Error message descriptor.
          type: string
        status:
          description: 'HttpStatus of the request : BAD_REQUEST, INTERNAL_SERVER_ERROR.'
          enum:
          - 200 OK
          - 400 BAD_REQUEST
          - 403 FORBIDDEN
          - 404 NOT_FOUND
          - 500 INTERNAL_SERVER_ERROR
          - 502 BAD_GATEWAY
          - 503 SERVICE_UNAVAILABLE
          example: BAD_REQUEST
          type: string
      title: ApiError
      type: object
    ProductApplicantDetails:
      properties:
        additionalInfo:
          additionalProperties:
            type: string
          description: >-
            This object accepts the applicant's additional information.


            AU: NA

            EU: Required

            UK: NA

            SG: NA
          type: object
        address:
          $ref: '#/components/schemas/ProductAddress'
          description: "This object accepts the applicant\u2019s residential address.\n\
            \nAU: Required\nEU: Required\nUK: Required\nSG: Required"
        birthCountry:
          description: >-
            This field accepts the 2-letter [ISO Alpha-2 country code](https://nium-documents.s3-eu-west-1.amazonaws.com/spend-documents/Country+Code.pdf)
            as an applicant's birth country.


            AU: NA

            EU: Required

            UK: NA

            SG: NA
          type: string
        contactDetails:
          $ref: '#/components/schemas/ProductContactDetails'
          description: >-
            This field accepts the contact details of the applicant.


            AU: Required

            EU: Required

            UK: Required

            SG: Required
        dateOfBirth:
          description: >-
            This field accepts the date of birth of the applicant in yyyy-MM-dd format.


            AU: Required

            EU: Required

            UK: Required

            SG: Optional
          type: string
        documentDetails:
          description: >-
            This array accepts the applicant document details.

            This field is required only if the documents are being uploaded.


            AU: Optional

            EU: Required

            UK: Optional

            SG: Optional
          items:
            $ref: '#/components/schemas/ProductDocumentDetail'
          type: array
        firstName:
          description: >-
            This field accepts the first name of the applicant.

            Maximum character limit: 40


            AU: Required

            EU: Required

            UK: Required

            SG: Optional
          type: string
        firstName_local:
          description: >-
            This field accepts the first name of the applicant in local language


            Maximum character limit: 40


            AU: Required

            EU: Required

            UK: Required

            SG: Optional
          type: string
        gender:
          description: >-
            This field accepts the gender of the applicant. The acceptable values
            are:

            Male

            Female


            AU: Required

            EU: NA

            UK: NA

            SG: NA
          type: string
        kycMode:
          description: >-
            This object accepts the desired mode to do the KYC of the individual applicant.


            AU: Optional

            EU: Optional

            UK: Optional

            SG: Optional
          type: string
        lastName:
          description: >-
            This field accepts the last name of the applicant.

            Maximum character limit: 40


            AU: Required

            EU: Required

            UK: Required

            SG: Optional
          type: string
        lastName_local:
          description: >-
            This field accepts the last name of the applicant in local language


            Maximum character limit: 40


            AU: Required

            EU: Required

            UK: Required

            SG: Optional
          type: string
        middleName:
          description: >-
            This field accepts the middle name of the applicant.

            Maximum character limit: 40


            AU: Optional

            EU: Optional

            UK: Optional

            SG: Optional
          type: string
        nationality:
          description: >-
            This field accepts the 2-letter [ISO Alpha-2 country code](https://nium-documents.s3-eu-west-1.amazonaws.com/spend-documents/Country+Code.pdf)
            for the nationality of the applicant.


            AU: Required

            EU: Required

            UK: Required

            SG: Required
          type: string
        occupation:
          description: "This field accepts the customer's occupation. Refer to [Enum\
            \ values](https://docs.nium.com/apis/docs/unified-add-customer-api) for\
            \ the description. \n Note: This field is mandatory for CA."
          enum:
          - OC0001
          - OC1001
          - OC1002
          - OC1003
          - OC1110
          - OC1120
          - OC1201
          - OC1210
          - OC1211
          - OC1220
          - OC1310
          - OC1311
          - OC1320
          - OC1410
          - OC1411
          - OC1420
          - OC1430
          - OC1440
          - OC2001
          - OC2110
          - OC2111
          - OC2112
          - OC2120
          - OC2121
          - OC2122
          - OC2123
          - OC2130
          - OC2131
          - OC2132
          - OC2133
          - OC2139
          - OC2210
          - OC2211
          - OC2221
          - OC2222
          - OC2223
          - OC2230
          - OC2231
          - OC3001
          - OC3110
          - OC3111
          - OC3112
          - OC3120
          - OC3130
          - OC3210
          - OC3211
          - OC3212
          - OC3220
          - OC3310
          - OC4001
          - OC4002
          - OC4003
          - OC4004
          - OC4110
          - OC4120
          - OC4121
          - OC4122
          - OC4130
          - OC4131
          - OC4132
          - OC4140
          - OC4210
          - OC4220
          - OC4310
          - OC4320
          - OC4410
          - OC4420
          - OC4510
          - OC5001
          - OC5110
          - OC5111
          - OC5112
          - OC5210
          - OC5211
          - OC5212
          - OC5310
          - OC5311
          - OC5312
          - OC5320
          - OC5410
          - OC5510
          - OC6001
          - OC6002
          - OC6003
          - OC6004
          - OC6201
          - OC6202
          - OC6210
          - OC6220
          - OC6310
          - OC6320
          - OC6321
          - OC6322
          - OC6410
          - OC6420
          - OC6430
          - OC6431
          - OC6432
          - OC6440
          - OC6441
          - OC6510
          - OC6520
          - OC6521
          - OC6522
          - OC6531
          - OC6532
          - OC7001
          - OC7002
          - OC7201
          - OC7202
          - OC7210
          - OC7220
          - OC7230
          - OC7231
          - OC7232
          - OC7240
          - OC7241
          - OC7242
          - OC7250
          - OC7260
          - OC7299
          - OC7310
          - OC7311
          - OC7320
          - OC7330
          - OC7331
          - OC7340
          - OC7410
          - OC7420
          - OC7510
          - OC7511
          - OC7520
          - OC7521
          - OC8001
          - OC8002
          - OC8201
          - OC8202
          - OC8203
          - OC8310
          - OC8311
          - OC8312
          - OC8410
          - OC8411
          - OC8412
          - OC8510
          - OC8511
          - OC8512
          - OC9001
          - OC9201
          - OC9202
          - OC9210
          - OC9310
          - OC9320
          - OC9410
          - OC9411
          - OC9412
          - OC9413
          - OC9414
          - OC9415
          - OC9420
          - OC9421
          - OC9510
          example: OC0001
          type: string
        professionalDetails:
          description: >-
            This array accepts the professional details of the applicant.


            AU: Required

            EU: Required

            UK: Required

            SG: Required
          items:
            $ref: '#/components/schemas/ProductProfessionalDetails'
          type: array
        referenceId:
          description: >-
            This field accepts the unique reference ID for the Applicant provided
            by client.


            AU: Optional

            EU: Optional

            UK: Optional

            SG: Optional
          type: string
        taxDetails:
          description: >-
            This array accepts the applicant's tax details.


            AU: NA

            EU: Optional

            UK: NA

            SG: NA
          items:
            $ref: '#/components/schemas/ProductTaxDetails'
          type: array
      title: ApplicantDetails
      type: object
    ApplicantDetails2:
      properties:
        additionalInfo:
          additionalProperties:
            type: string
          type: object
        address:
          $ref: '#/components/schemas/ProductAddress'
          description: This object accepts the residential address of the stakeholder
            for the corporate entity.
        birthCountry:
          type: string
        contactDetails:
          $ref: '#/components/schemas/ProductContactDetails'
          description: This object accepts the contact details of the applicant.
        dateOfBirth:
          type: string
        documentDetails:
          $ref: '#/components/schemas/ProductDocumentDetail'
          description: >-
            This is an object which accepts the document details for KYB.

            This field is required only if the documents are being uploaded
        firstName:
          description: This field accepts the first name of the applicant.
          type: string
        firstName_local:
          description: This field accepts the first name of the applicant in local
            language.
          type: string
        gender:
          description: This field accepts the gender of the applicant.
          type: string
        isResident:
          type: string
        kycMode:
          description: This field accepts the registered business name of the business
            partner.
          type: string
        lastName:
          description: This field accepts the last name of the applicant.
          type: string
        lastName_local:
          description: This field accepts the last name of the applicant in local
            language.
          type: string
        middleName:
          description: This field accepts the middle name of the applicant.
          type: string
        nationality:
          description: This field accepts the [2-letter ISO Alpha-2 country code](/docs/currency-and-country-codes)
            for the nationality of the applicant.
          type: string
        occupation:
          description: "This field accepts the customer's occupation. Refer to [Enum\
            \ values](https://docs.nium.com/apis/docs/unified-add-customer-api) for\
            \ the description. \n Note: This field is mandatory for CA."
          enum:
          - OC0001
          - OC1001
          - OC1002
          - OC1003
          - OC1110
          - OC1120
          - OC1201
          - OC1210
          - OC1211
          - OC1220
          - OC1310
          - OC1311
          - OC1320
          - OC1410
          - OC1411
          - OC1420
          - OC1430
          - OC1440
          - OC2001
          - OC2110
          - OC2111
          - OC2112
          - OC2120
          - OC2121
          - OC2122
          - OC2123
          - OC2130
          - OC2131
          - OC2132
          - OC2133
          - OC2139
          - OC2210
          - OC2211
          - OC2221
          - OC2222
          - OC2223
          - OC2230
          - OC2231
          - OC3001
          - OC3110
          - OC3111
          - OC3112
          - OC3120
          - OC3130
          - OC3210
          - OC3211
          - OC3212
          - OC3220
          - OC3310
          - OC4001
          - OC4002
          - OC4003
          - OC4004
          - OC4110
          - OC4120
          - OC4121
          - OC4122
          - OC4130
          - OC4131
          - OC4132
          - OC4140
          - OC4210
          - OC4220
          - OC4310
          - OC4320
          - OC4410
          - OC4420
          - OC4510
          - OC5001
          - OC5110
          - OC5111
          - OC5112
          - OC5210
          - OC5211
          - OC5212
          - OC5310
          - OC5311
          - OC5312
          - OC5320
          - OC5410
          - OC5510
          - OC6001
          - OC6002
          - OC6003
          - OC6004
          - OC6201
          - OC6202
          - OC6210
          - OC6220
          - OC6310
          - OC6320
          - OC6321
          - OC6322
          - OC6410
          - OC6420
          - OC6430
          - OC6431
          - OC6432
          - OC6440
          - OC6441
          - OC6510
          - OC6520
          - OC6521
          - OC6522
          - OC6531
          - OC6532
          - OC7001
          - OC7002
          - OC7201
          - OC7202
          - OC7210
          - OC7220
          - OC7230
          - OC7231
          - OC7232
          - OC7240
          - OC7241
          - OC7242
          - OC7250
          - OC7260
          - OC7299
          - OC7310
          - OC7311
          - OC7320
          - OC7330
          - OC7331
          - OC7340
          - OC7410
          - OC7420
          - OC7510
          - OC7511
          - OC7520
          - OC7521
          - OC8001
          - OC8002
          - OC8201
          - OC8202
          - OC8203
          - OC8310
          - OC8311
          - OC8312
          - OC8410
          - OC8411
          - OC8412
          - OC8510
          - OC8511
          - OC8512
          - OC9001
          - OC9201
          - OC9202
          - OC9210
          - OC9310
          - OC9320
          - OC9410
          - OC9411
          - OC9412
          - OC9413
          - OC9414
          - OC9415
          - OC9420
          - OC9421
          - OC9510
          example: OC0001
          type: string
        professionalDetails:
          description: This array accepts the professional details of the applicant.
          items:
            $ref: '#/components/schemas/ProductProfessionalDetails'
          type: array
        referenceId:
          description: This field accepts the reference ID of the applicant for which
            the RFI is raised.
          type: string
        taxDetails:
          items:
            $ref: '#/components/schemas/ProductTaxDetails'
          type: array
      title: Applicant details
      type: object
    ProductApplicantKycUrl:
      properties:
        redirectUrl:
          description: Returned only if stakeholder redirectURL is available based
            on the stakeholder kycMode.
          example: https://integrations.partners.instarem.com/preprod/compliance/callback/load?kycUrlId=181ae550-b016-46bf-af6a-a8c49f01cdff&referenceId=561a3450-6016-46bf-af6a-a8c49f0erw334
          type: string
        referenceId:
          description: ReferenceId of the stakeholder, sent in the request of Onboard
            Corp Customer API.
          example: 561a3450-6016-46bf-af6a-a8c49f0erw334
          type: string
      title: ApplicantKycUrl
      type: object
    ProductAssociationDetails:
      properties:
        associationChairPerson:
          description: >-
            This field accepts the full name of the association chair, secretary,
            treasurer.


            AU: Optional

            EU: NA

            UK: NA

            SG: Optional
          type: string
        associationName:
          description: >-
            This field accepts the full name of the association.


            AU: Optional

            EU: NA

            UK: NA

            SG: Optional
          type: string
        associationNumber:
          description: >-
            This field accepts an association number as issued by the applicable state/territory.


            AU: Optional

            EU: NA

            UK: NA

            SG: Optional
          type: string
      title: AssociationDetails
      type: object
    AutoSweepBankDetails:
      properties:
        bankAccountDetails:
          $ref: '#/components/schemas/ProductBankAccountDetails'
        clientRegisteredAddress:
          $ref: '#/components/schemas/ProductRegisteredAddress'
      title: AutoSweep bank details
      type: object
    ProductBankAccountDetails:
      properties:
        accountName:
          description: 'The name of the beneficiary for the bank account. This field
            can contain alphanumeric characters and the following special characters:
            & . , ( ) _ '' / -. The maximum length is 140 characters.'
          type: string
        accountNumber:
          description: Account number. This field can contain alphanumeric characters
            for a maximum length of 35 characters.
          type: string
        bankAccountType:
          description: Type of Bank account.
          type: string
        bankName:
          description: The name of the bank. The maximum length is 255 characters.
          type: string
        currency:
          description: The primary currency of the bank account.
          type: string
        routingType:
          description: Routing type of the bank account. Eg. SWIFT, BANK CODE.
          type: string
        routingType2:
          description: The routing type of the bank account.
          type: string
        routingValue:
          description: Routing value of the bank account for the provided routingType.
            This field can contain alphanumeric characters.
          type: string
        routingValue2:
          description: The routing value of the bank account.
          type: string
      title: BankAccountDetails
      type: object
    ProductBusinessAddress:
      properties:
        addressLine1:
          description: >-
            This field accepts the address line1 of the business address for the new
            corporate entity to be onboarded.

            This field is required in case business address is being sent.


            AU: Conditional

            EU: Conditional

            UK: Conditional

            SG: Conditional
          type: string
        addressLine2:
          description: >-
            This field accepts the address line 2 of the business address for the
            corporate entity.


            AU: Conditional

            EU: Conditional

            UK: Conditional

            SG: Conditional
          type: string
        city:
          description: >-
            This field accepts the city of the business address for the new corporate
            entity to be onboarded.

            This field is required in case business address is being sent.


            AU: Conditional

            EU: Conditional

            UK: Conditional

            SG: Conditional
          type: string
        country:
          description: >-
            This field accepts the the [2-letter ISO Alpha-2 country code](https://nium-documents.s3-eu-west-1.amazonaws.com/spend-documents/Country+Code.pdf)
            of the business address for the new corporate entity to be onboarded.

            This field is required in case business address is being sent.


            AU: Conditional

            EU: Conditional

            UK: Conditional

            SG: Conditional
          type: string
        postcode:
          description: >-
            This field accepts the zip code or postal code of the business address
            for the new corporate entity to be onboarded.

            This field is required in case business address is being sent.


            AU: Conditional

            EU: Conditional

            UK: Conditional

            SG: Conditional
          type: string
        state:
          description: >-
            This field accepts the state of the business address for the new corporate
            entity to be onboarded.

            This field is required in case business address is being sent.


            AU: Conditional

            EU: Conditional

            UK: Conditional

            SG: Conditional
          type: string
      title: BusinessAddress
      type: object
    ProductBusinessDetails:
      properties:
        additionalInfo:
          additionalProperties:
            type: string
          description: >-
            This object accepts additional information about the business.


            AU: Optional

            EU: Optional

            UK: Optional

            SG: Optional
          type: object
        addresses:
          $ref: '#/components/schemas/ProductAddresses'
          description: >-
            This is an object which accepts the registered and/or business address
            details for the new corporate entity to be onboarded.


            AU: Required

            EU: Required

            UK: Required

            SG: Required
        applicantDetails:
          $ref: '#/components/schemas/ProductApplicantDetails'
          description: >-
            This object accepts applicant details for the business.


            AU: Required

            EU: Required

            UK: Required

            SG: Required
        associationDetails:
          $ref: '#/components/schemas/ProductAssociationDetails'
          description: >-
            This object accepts the association details.


            AU: Optional

            EU: NA

            UK: NA

            SG: Optional
        bankAccountDetails:
          $ref: '#/components/schemas/ProductBankAccountDetails'
          description: Bank account details of the corporate customer required to
            perform auto sweep for refunds.
        businessName:
          description: >-
            This field contains the name of a business.


            AU: Required

            EU: Required

            UK: Required

            SG: Required
          type: string
        businessName_local:
          description: >-
            This field contains the name of a business in local language


            AU: Required

            EU: Required

            UK: Required

            SG: Required
          type: string
        businessRegistrationNumber:
          description: >-
            This field accepts the business registration number of the new corporate
            entity to be onboarded.


            AU: Required

            EU: Required

            UK: Required

            SG: Required
          type: string
        businessType:
          description: >-
            This field accepts the legal entity type of the business. The supported
            entity types are:

            Sole Trader
             Private Limited Company
            Public Company

            Partnership

            Limited Liability Partnership Firm

            Government Body

            Associations

            Trust

            Regulated Trust

            Unregulated Trust


            AU: Required

            EU: Required

            UK: Required

            SG: Required
          type: string
        description:
          type: string
        documentDetails:
          description: >-
            This is an array which accepts the document details for KYB.

            This field is required only if the documents are being uploaded


            AU: Optional

            EU: Optional

            UK: Optional

            SG: Optional
          items:
            $ref: '#/components/schemas/ProductDocumentDetail'
          type: array
        formerName:
          description: >-
            This field accepts the former name of the new corporate entity to be onboarded.


            AU: NA

            EU: NA

            UK: NA

            SG: Optional
          type: string
        hasNominee:
          description: >-
            This field accepts if the entity has a nominee stakeholder


            AU: NA

            EU: NA

            UK: NA

            SG: Optional
          type: boolean
        isCashIntensiveBusiness:
          description: >-
            This field accepts if the business is a cash intensive business

            AU: NA

            EU: NA

            UK: NA

            SG: Optional
          type: boolean
        legalDetails:
          $ref: '#/components/schemas/ProductLegalDetails'
          description: >-
            This object accepts the legal details of the corporate entity being onboarded.


            AU: Required

            EU: Required

            UK: Required

            SG: Required
        partnershipDetails:
          $ref: '#/components/schemas/ProductPartnershipDetails'
          description: >-
            This object accepts the partnership details.


            AU: Optional

            EU: NA

            UK: NA

            SG: Optional
        referenceId:
          description: >-
            This field accepts the unique reference ID for the Business Entity provided
            by client.


            AU: Optional

            EU: Optional

            UK: Optional

            SG: Optional
          type: string
        regulatoryDetails:
          $ref: '#/components/schemas/ProductRegulatoryDetails'
          description: >-
            This object accepts the regulatory status.


            AU: Optional

            EU: NA

            UK: NA

            SG: Optional
        settlorName:
          description: >-
            This field accepts the settlor name.


            AU: Optional

            EU: NA

            UK: NA

            SG: NA
          type: string
        stakeholders:
          description: >-
            This array accepts the stakeholder details for the new corporate entity
            to be onboarded.

            This field is required in case the region is AU and entity type [refer
            businessDetails.businessType] is one of the following:

            Sole Trader

            Unregulated Trust

            Partnerships

            Government Body

            Association


            AU: Required

            EU: Required

            UK: Required

            SG: Required
          items:
            $ref: '#/components/schemas/ProductStakeholders'
          type: array
        stockSymbol:
          description: The publicly traded stock or ticker symbol of the business.
          type: string
        taxDetails:
          description: >-
            This array accepts the tax details for the new corporate entity to be
            onboarded.


            AU: NA

            EU: Required

            UK: NA

            SG: NA
          items:
            $ref: '#/components/schemas/ProductTaxDetails'
          type: array
        tradeName:
          description: >-
            This field accepts the Trading Name also known as Doing Business As(DBA)
            name. This field is needed in case the new corporate entity to be onboarded.
            is doing business with a name other than the registered business name.


            AU: Optional

            EU: Optional

            UK: Optional

            SG: Optional
          type: string
        trusteeName:
          description: >-
            This field accepts the full business name of the trustee in case the entity
            type is a trust.

            This field is required in case the region is AU and entity type [refer
            businessDetails.businessType] is a Regulated Trust or an Unregulated Trust.


            AU: Optional

            EU: NA

            UK: NA

            SG: Optional
          type: string
        website:
          description: >-
            This field accepts the business website link of the new corporate entity
            to be onboarded.


            AU: Optional

            EU: Optional

            UK: Optional

            SG: Optional
          type: string
      title: BusinessDetails
      type: object
    ProductBusinessDetails2:
      properties:
        additionalInfo:
          additionalProperties:
            type: string
          description: This object accepts additional information about the business.
          type: object
        addresses:
          $ref: '#/components/schemas/ProductAddresses'
          description: This is an object which accepts the registered and/or business
            address details for the corporate entity.
        applicantDetails:
          $ref: '#/components/schemas/ApplicantDetails2'
          description: This object accepts applicant details.
        associationDetails:
          $ref: '#/components/schemas/ProductAssociationDetails'
          description: This is an object which accepts the association details.
        businessInOtherCountries:
          items:
            type: object
          type: array
        businessName:
          description: This field accepts the registered business name of the corporate
            entity.
          example: updated business name
          type: string
        businessName_local:
          description: This field accepts the registered business name of the corporate
            entity in local language.
          example: updated business name
          type: string
        businessRegistrationNumber:
          description: This field accepts the business registration number of the
            corporate entity.
          type: string
        businessType:
          type: string
        description:
          type: string
        documentDetails:
          $ref: '#/components/schemas/ProductDocumentDetail'
          description: >-
            This is an object which accepts the document details for KYB.

            This field is required only if the documents are being uploaded
        hasNominee:
          description: This field accepts if the entity has a nominee stakeholder
          type: boolean
        isCashIntensiveBusiness:
          description: This field accepts if the business is a cash intensive business
          type: boolean
        legalDetails:
          $ref: '#/components/schemas/ProductLegalDetails'
          description: This is an object which accepts the legal details of the corporate
            entity.
        onboardingDetails:
          $ref: '#/components/schemas/ProductOnboardingDetails'
        partnershipDetails:
          $ref: '#/components/schemas/ProductPartnershipDetails'
          description: This is an object which accepts the partnership details.
        purposeCode:
          type: string
        referenceId:
          description: This field accepts the reference Id of the business information
            for which the RFI is raised.
          example: 11e93365-d383-4eee-9686-7f06bcb8671e
          type: string
        regulatoryDetails:
          $ref: '#/components/schemas/ProductRegulatoryDetails'
          description: This object accepts the regulatory status for the business
            partner.
        revenueInfo:
          $ref: '#/components/schemas/ProductRevenueInfo'
        settlorName:
          description: This field accepts the settlor name.
          type: string
        stakeholders:
          description: This array accepts the stakeholder details for the corporate
            entity.
          items:
            $ref: '#/components/schemas/Stakeholders2'
          type: array
        taxDetails:
          items:
            $ref: '#/components/schemas/ProductTaxDetails'
          type: array
        ticker:
          type: string
        tradeName:
          description: This field accepts the Trading Name also known as Doing Business
            As(DBA) name.
          type: string
        trusteeName:
          description: This field accepts the full business name of the trustee in
            case the entity type is a trust.
          type: string
        website:
          type: string
      title: BusinessDetails2
      type: object
    ProductBusinessPartner:
      properties:
        businessEntityType:
          description: >-
            This field accepts the entity type of the business partner. The acceptable
            values are:

            Director

            Ultimate Beneficial Owner

            Shareholder

            Authorized Signatory

            Authorized Representative

            Protector

            Partner

            Trustee

            Settlor

            Members

            Executor


            AU: Optional

            EU: Optional

            UK: Optional

            SG: Optional
          type: string
        businessName:
          description: >-
            This field accepts the registered business name of the business partner.

            This is required when the stakeholder(s) is a business entity


            AU: Optional

            EU: Conditional

            UK: Optional

            SG: Optional
          type: string
        businessRegistrationNumber:
          description: >-
            This field accepts the registered business registration number of the
            business partner.

            This is required when the stakeholder(s) is a business entity


            AU: Optional

            EU: Conditional

            UK: Optional

            SG: Optional
          type: string
        businessType:
          description: >-
            This field accepts the legal entity type of the business. The supported
            entity types are:

            Sole Trader

            Private Limited Company

            Public Company

            Partnership

            Limited Liability Partnership Firm

            Government Body

            Associations

            Trust

            Regulated Trust

            Unregulated Trust

            Unincorporated Partnership

            This is required when the stakeholder(s) is a business entity.


            AU: Optional

            EU: Conditional

            UK: Optional

            SG: Optional
          type: string
        capitalContribution:
          description: This field accepts the capital contribution of the stakeholder.
            Use the [Fetch Corporate Constants API](ref:fetchcorporateconstants) to
            get the list of valid enum values.
          type: string
        description:
          type: string
        legalDetails:
          $ref: '#/components/schemas/ProductLegalDetails'
          description: >-
            This object accepts the legal details of business of the business partner.

            This is required when the stakeholder(s) is a business entity


            AU: Optional

            EU: Conditional

            UK: Optional

            SG: Optional
        sharePercentage:
          description: >-
            This field accepts the share percentage that the business partner or the
            stakeholder holds in the company.


            AU: NA

            EU: Optional

            UK: NA

            SG: Optional
          type: string
      title: BusinessPartner
      type: object
    BusinessPartner2:
      properties:
        addresses:
          $ref: '#/components/schemas/ProductAddresses'
          description: This object accepts the registered and/or business address
            of the business partner.
        businessEntityType:
          type: string
        businessInOtherCountries:
          items:
            type: object
          type: array
        businessName:
          description: This field accepts the registered business name of the business
            partner.
          type: string
        businessRegistrationNumber:
          description: This field accepts the registered business registration number
            of the business partner.
          type: string
        businessType:
          type: string
        capitalContribution:
          description: This field accepts the capital contribution of the stakeholder.
            Use the [Fetch Corporate Constants API](ref:fetchcorporateconstants) to
            get the list of valid enum values.
          type: string
        description:
          type: string
        documentDetails:
          $ref: '#/components/schemas/ProductDocumentDetail'
          description: >-
            This is an object which accepts the document details for KYB.

            This field is required only if the documents are being uploaded.
        legalDetails:
          $ref: '#/components/schemas/ProductLegalDetails'
          description: This object accepts the legal details of business of the business
            partner.
        purposeCode:
          type: string
        regulatoryDetails:
          $ref: '#/components/schemas/ProductRegulatoryDetails'
          description: This object accepts the regulatory status for the business
            partner.
        sharePercentage:
          description: This field accepts the percentage of shares held by stakeholder.
          type: string
        ticker:
          type: string
        tradeName:
          type: string
        trusteeName:
          type: string
        website:
          type: string
      title: Business partner
      type: object
    BusinessPartnerAddresses:
      properties:
        businessAddress:
          $ref: '#/components/schemas/ProductBusinessAddress'
          description: >-
            This object accepts the business address details for the new corporate
            entity to be onboarded.

            This field is required in case the principal place of business is different
            than the registered address that is when the isSameBusinessAddress is
            No.


            AU: Conditional

            EU: Conditional

            UK: Conditional

            SG: Conditional
        registeredAddress:
          $ref: '#/components/schemas/CorporateRegisteredAddress'
          description: >-
            This field accepts the registered address details for the new corporate
            entity to be onboarded.


            AU: Required

            EU: Required

            UK: Required

            SG: Required
      title: Business partner addresses
      type: object
    CategoryData:
      properties:
        code:
          description: This object contains the valid value that can be used in the
            [Onboard Corporate Customer](ref:onboardcorporatecustomer) API for the
            selected `category` in the input query param.
          type: string
        description:
          description: This object contains description of category code
          type: string
      title: CategoryData
      type: object
    ClientCurrencyResponseDTO:
      properties:
        authorizationOrder:
          description: This is the authorization order based on priority for available
            currencies. The order starts from 0 as a highest priority.
          example: false
          format: int32
          type: integer
        currencyCode:
          description: This field contains the 3-letter [ISO-4217 currency code](/docs/currency-and-country-codes).
          example: SGD
          type: string
        decimalUnit:
          description: This field contains the decimal unit which will be used for
            rounding off, for example 0
          example: 0
          format: int32
          type: integer
        fxSellAllowed:
          description: This field indicates if forex sell is allowed or not for the
            currency.
          example: false
          type: boolean
        remittanceAllowed:
          description: This field specifies if the remittance is allowed with the
            respective currency or not.
          example: false
          type: boolean
      title: Client currency response
      type: object
    ClientDetailResponseDTO2:
      properties:
        accountValidation:
          description: This is applicable to RHA clients. This field will ensure whether
            the account-validation transactions are forwarded to client or not
          example: false
          type: boolean
        allowInterClientWalletTransfer:
          description: This field indicates if inter client wallet transfer is enabled.
          example: false
          type: boolean
        allowThirdPartyFunding:
          description: This field specifies if third party funding is allowed or not.
          example: false
          type: boolean
        applePaySupport:
          description: This field contains the flag for apple pay support.
          example: false
          type: boolean
        autoSweepBankDetails:
          $ref: '#/components/schemas/AutoSweepBankDetails'
        billingAddressAsCorporate:
          description: This field indicates whether an individual customer at the
            child level should have the same billing address as the business address
            of the corporate customer at the parent level.
          example: false
          type: boolean
        cardTxnNarrative:
          description: This field specifies the default transaction narrative.
          example: 'null'
          type: string
        cardTxnProductCode:
          description: This field specifies the internal card transaction product
            code.
          example: 'null'
          type: string
        cardTxnRedirectUrl:
          description: This field contains the card transaction redirected URL.
          example: 'null'
          type: string
        childMustHaveParent:
          description: This field indicates whether an individual customer must be
            treated as a child card and be associated with a corporate customer at
            the parent level.
          example: false
          type: boolean
        clientHashId:
          description: This field contains the unique client identifier generated
            and shared before API handshake.
          example: 82c68bab-3c04-3451-8d7b-cb38ad713d97
          format: uuid
          type: string
        clientIdNumber:
          description: This field shall be deprecated in future.
          type: string
        complianceCallbackUrl:
          description: This field specifies the compliance callback URL.
          example: 'null'
          type: string
        complianceStatusCallbackUrl:
          description: This field contains the redirection URL for compliance callback.
          example: https://acme-notification.com/callback/compliance?customerHashId=%s
          type: string
        confirmationOfPayee:
          description: This field indicates whether Confirmation of Payee is allowed
            or not.
          example: false
          type: boolean
        contactNo:
          description: This field contains the client's contact number.
          example: '6588008100'
          type: string
        countryCode:
          description: This field contains the 3-letter ISO-4217 currency code.
          example: SG
          type: string
        currencies:
          description: This is an array objects which holds currency details.
          items:
            $ref: '#/components/schemas/ClientCurrencyResponseDTO'
          type: array
        currencyAuthorizationType:
          description: This field denotes the authorization type of a client. The
            valid values are SINGLE, DUAL, MULTI, and AUTO_SWEEP.
          enum:
          - SINGLE
          - DUAL
          - MULTI
          - AUTO_SWEEP
          example: MULTI
          type: string
        customFeeEnabled:
          description: This field contains the client preference to levy custom fee.
          example: false
          type: boolean
        customerAuthUrl:
          description: This field contains the customer authorization URL.
          example: 'null'
          type: string
        deduplicationFlag:
          description: This field contains the mobile/email uniqueness flag.
          example: false
          type: boolean
        ekycRedirectUrl:
          type: string
        email:
          description: This field contains the client's email Id.
          example: admin@acme.com
          type: string
        fundingInstrumentType:
          description: >
            <p>Details if a customer can fund their own wallet.</p> <ul>
              <li><strong>RESTRICTED</strong>: The customer can't fund their own wallet.</li>
              <li><strong>ONLY_DEBIT</strong>: The customer can only fund their wallet
            using a debit card.</li>
              <li><strong>CREDIT_AND_DEBIT</strong>: The customer can fund their wallet
            with a debit or credit card.</li> </ul>
          enum:
          - RESTRICTED
          - ONLY_DEBIT
          - CREDIT_AND_DEBIT
          example: RESTRICTED
          type: string
        googlePaySupport:
          description: This field contains the flag for google pay support.
          example: false
          type: boolean
        licenseEntity:
          description: 'This field contains the license ownership for a client.The
            possible values are:'
          enum:
          - NIUM
          - THIRD_PARTY
          example: THIRD_PARTY
          type: string
        logoUrl:
          description: This field contains the client's logo URL.
          example: 'null'
          type: string
        markup:
          description: This field contains the cross currency transaction markup value.
          example: 0.5
          format: double
          type: number
        minimumCustomerAge:
          description: This field contains the minimum customer age which should be
            18 years. Discuss with your NIUM account manager for any special use-cases.
          example: 18
          format: int32
          type: integer
        name:
          description: This field contains the name of a client.
          example: Acme In
          type: string
        notificationWebhook:
          description: This field contains the Webhook notification redirection URL.
          example: https://acme-notification.com/webhook
          type: string
        paymentIds:
          description: This is an array object which holds the client payment Id response
            details.
          items:
            $ref: '#/components/schemas/PaymentIdsDTO'
          type: array
        postFundedPayout:
          description: This field contains the Post Funded Payout of the client.
          example: false
          type: boolean
        prefundName:
          description: This field contains the name defined for ICC transactions
          example: Acme Inc
          type: string
        regulatoryRegion:
          description: This field contains the regulatory region of the client.
          enum:
          - SG
          - EU
          - AU
          - HK
          - UK
          - US
          - CA
          example: SG
          type: string
        samsungPaySupport:
          description: This field contains the flag for samsung pay support.
          example: false
          type: boolean
        whitelistedRemitterAccounts:
          description: This is an array object which holds the remitter accounts which
            are whitelisted for the client.
          items:
            $ref: '#/components/schemas/RemitterAccountWhiteList'
          type: array
      title: Client detail response
      type: object
    ProductComplianceRFITemplateMetadataResponseDTO:
      properties:
        rfiTemplates:
          description: This is an array object which contains the list of RFI template
            details.
          items:
            $ref: '#/components/schemas/ProductRfiTemplate'
          type: array
      title: ComplianceRFITemplateMetadataResponseDTO
      type: object
    ProductContactDetails:
      properties:
        contactNo:
          description: >-
            This field accepts the mobile number of the stakeholder for the new corporate
            entity to be onboarded.


            AU: Required

            EU: Required

            UK: Required

            SG: Required
          type: string
        countryCode:
          description: The country code of the contact number. Use Fetch corporate
            constants API for valid values.
          type: string
        email:
          description: >-
            This field accepts the email address of the stakeholder for the new corporate
            entity to be onboarded.


            AU: Required

            EU: Required

            UK: Required

            SG: Required
          type: string
      title: ContactDetails
      type: object
    CorporateAddress:
      properties:
        addressLine1:
          description: "This field accepts the address line 1 of the stakeholder\u2019\
            s residential address.\n\nAU: Required\nEU: Required\nUK: Required\nSG:\
            \ Optional"
          type: string
        addressLine2:
          description: "This field accepts the address line 2 of the stakeholder\u2019\
            s residential address.\n\nAU: Required\nEU: Optional\nUK: Optional\nSG:\
            \ Optional"
          type: string
        city:
          description: "This field accepts the stakeholder\u2019s residential city.\n\
            \nAU: Required\nEU: Required\nUK: Required\nSG: Optional"
          type: string
        country:
          description: >-
            This field accepts the [2-letter ISO Alpha-2 country code](/docs/currency-and-country-codes)
            for the residential country of the stakeholder.


            AU: Optional

            EU: Required

            UK: Required

            SG: Required
          type: string
        postcode:
          description: "This field accepts the zip code or postal code of the stakeholder\u2019\
            s residential address.\n\nAU: Optional\nEU: Required\nUK: Required\nSG:\
            \ Required"
          type: string
        state:
          description: "This field accepts the state of the stakeholder\u2019s residential\
            \ address.\n\nAU: Optional\nEU: Required\nUK: Required\nSG: Required"
          type: string
      title: Corporate address
      type: object
    CorporateAddresses:
      properties:
        registeredAddress:
          $ref: '#/components/schemas/CorporateRegisteredAddress'
          description: >-
            This field accepts the registered address details for the new corporate
            entity to be onboarded.


            AU: Required

            EU: Required

            UK: Required

            SG: Required
      title: Corporate addresses
      type: object
    CorporateBusinessDetails:
      properties:
        additionalInfo:
          additionalProperties:
            type: string
          description: This object accepts additional information about the business.
            Acceptable fields are `isSameBusinessAddress` (for all regions), `searchId`
            (for EU, SG, UK), and `businessExtractCoveredStakeholder` (for EU). Acceptable
            values for all the above fields are `Yes` and `No`.
          type: object
        addresses:
          $ref: '#/components/schemas/CorporateAddresses'
          description: >-
            This is an object which accepts the registered and/or business address
            details for the new corporate entity to be onboarded.


            AU: Required

            EU: Required

            UK: Required

            SG: Required
        businessName:
          description: This field contains the name of a business.
          type: string
        businessRegistrationNumber:
          description: This field accepts the business registration number of the
            new corporate entity to be onboarded.
          type: string
        legalDetails:
          $ref: '#/components/schemas/CorporateLegalDetails'
          description: >-
            This object accepts the legal details of the corporate entity being onboarded.


            AU: Required

            EU: Required

            UK: Required

            SG: Required
        stakeholders:
          description: This array accepts the stakeholder details for the new corporate
            entity to be onboarded.
          items:
            $ref: '#/components/schemas/CorporateStakeholders'
          type: array
        website:
          description: This field accepts the business website link of the new corporate
            entity to be onboarded.
          type: string
      title: Corporate business details
      type: object
    CorporateBusinessPartner:
      properties:
        addresses:
          $ref: '#/components/schemas/BusinessPartnerAddresses'
        businessEntityType:
          description: >-
            This field accepts the entity type of the business partner. The acceptable
            values are:

            Director

            Ultimate Beneficial Owner

            Shareholder

            Authorized Signatory

            Authorized Representative

            Protector

            Partner

            Trustee

            Settlor

            Members

            Executor


            AU: Optional

            EU: Optional

            UK: Optional

            SG: Optional
          type: string
        businessName:
          description: >-
            This field accepts the registered business name of the business partner.

            This is required when the stakeholder(s) is a business entity


            AU: Optional

            EU: Conditional

            UK: Optional

            SG: Optional
          type: string
        businessRegistrationNumber:
          description: >-
            This field accepts the registered business registration number of the
            business partner.

            This is required when the stakeholder(s) is a business entity


            AU: Optional

            EU: Conditional

            UK: Optional

            SG: Optional
          type: string
        legalDetails:
          $ref: '#/components/schemas/CorporateBusinessPartnerLegalDetails'
      title: Corporate business partner
      type: object
    CorporateBusinessPartnerLegalDetails:
      properties:
        registeredCountry:
          description: >-
            This field accepts the 2-letter [ISO Alpha-2 country code](/docs/currency-and-country-codes)
            for the country.


            AU: Required

            EU: Required

            UK: Required

            SG: Required
          type: string
      title: Corporate business partner legal details
      type: object
    CorporateContactDetails:
      properties:
        contactNo:
          description: >-
            This field accepts the mobile number of the stakeholder--digits only--without
            the country code for the new corporate entity to be onboarded.


            AU: Required

            EU: Required

            UK: Required

            SG: Required
          type: string
        countryCode:
          type: string
        email:
          description: >-
            This field accepts the email address of the stakeholder for the new corporate
            entity to be onboarded.


            AU: Required

            EU: Required

            UK: Required

            SG: Required
          type: string
      title: Corporate contact details
      type: object
    ProductCorporateCustomerResponseDTO:
      properties:
        caseId:
          description: This field contains the compliance case Id of the customer.
          type: string
        clientId:
          description: This field contains the NIUM client Id of the customer.
          type: string
        customerHashId:
          description: This field contains the unique customer identifier generated
            at the time of customer creation.
          format: uuid
          type: string
        errors:
          description: This field contains the list of error code and description
            from compliance service.
          items:
            type: object
          type: array
        expiry:
          description: This field contains the expiry time for redirect URL to be
            used for applicant KYC verification.
          type: string
        kycURLs:
          $ref: '#/components/schemas/KycUrls'
          description: This object contains the KYC redirectURLs of applicant and
            individual stakeholders. Alternately you can call Customer Details API
            to get the referenceId or redirectURL.
        redirectUrl:
          description: This field contains the redirect URL to be used for applicant
            KYC verification.
          format: uuid
          type: string
        remarks:
          description: This field contains the remarks auto-generated during the compliance
            process.
          type: string
        status:
          description: This field contains the compliance status. As a response of
            this API, the only possible value of status is IN_PROGRESS.
          type: string
        walletHashId:
          description: This field contains the unique wallet identifier generated
            simultaneously with customer creation.
          format: uuid
          type: string
      title: CorporateCustomerResponseDTO
      type: object
    CorporateDetailResponseDTO:
      properties:
        results:
          $ref: '#/components/schemas/ProductResult'
          description: This is an object which contains the results.
      title: Corporate detail response
      type: object
    CorporateDocumentDetail:
      properties:
        documentNumber:
          description: >-
            This field accepts the document number for the uploaded document.

            This field is required only if the documents are being uploaded


            AU: Optional

            EU: Required

            UK: Optional

            SG: Optional
          example: '6565666'
          type: string
        documentType:
          description: >-
            This field accepts the type of the document. The acceptable types of the
            documents are:
             Business Registration Document
            Trust Deed

            Partnership Deed

            Association Deed

            Register of Directors

            Register of Shareholders


            AU: Optional

            EU: Required

            UK: Optional

            SG: Optional
          type: string
      title: Corporate document detail
      type: object
    ProductCorporateEnrichedDetailResponseDTO:
      properties:
        businessDetails:
          $ref: '#/components/schemas/CorporateBusinessDetails'
          description: This is an object which contains the business details.
        riskAssessmentInfo:
          $ref: '#/components/schemas/CorporateRiskAssessmentInfo'
          description: This is an object which contains the risk assessment information.
      title: CorporateEnrichedDetailResponseDTO
      type: object
    CorporateLegalDetails:
      properties:
        registeredCountry:
          description: >-
            This field accepts the 2-letter [ISO Alpha-2 country code](/docs/currency-and-country-codes)
            for the country.


            AU: Required

            EU: Required

            UK: Required

            SG: Required
          type: string
        registeredDate:
          description: >-
            This field accepts the business registration date for the new corporate
            entity to be onboarded.


            AU: Required

            EU: Required

            UK: Required

            SG: Required
          type: string
      title: Corporate legal details
      type: object
    CorporateProfessionalDetails:
      properties:
        position:
          description: This field accepts the position of the stakeholder.
          type: string
        sharePercentage:
          description: This field accepts the percentage of shares held by stakeholder.
          type: string
      title: Corporate professional details
      type: object
    CorporateRegisteredAddress:
      properties:
        addressLine1:
          description: This field accepts the address line1 of the registered address
            for the new corporate entity to be onboarded.
          type: string
        addressLine2:
          description: This field accepts the address line2 of the registered address
            for the new corporate entity to be onboarded.
          type: string
        city:
          description: This field accepts the city name of the registered address
            for the new corporate entity to be onboarded.
          type: string
        country:
          description: This field accepts the [2-letter ISO Alpha-2](/docs/currency-and-country-codes)
            country code of the registered address for the corporate entity to be
            onboarded.
          type: string
        postcode:
          description: This field accepts the zip code or postal code of the registered
            address for the corporate entity to be onboarded.
          type: string
        state:
          description: This field accepts the state for the new corporate entity to
            be onboarded.
          type: string
      title: Corporate registered address
      type: object
    CorporateRiskAssessmentInfo:
      properties:
        annualTurnover:
          description: This field accepts the annual turnover for the corporate entity
            to be onboarded. See [Corporate Customer Onboarding](https://docs.nium.com/apis/docs/overview-corporate-customer)
            for the applicable values.
          type: string
        totalEmployees:
          description: This field accepts the total number of employees for the corporate
            entity to be onboarded.
          type: string
      title: Corporate risk assessment info
      type: object
    CorporateStakeholderDetails:
      properties:
        address:
          $ref: '#/components/schemas/CorporateAddress'
          description: >-
            This object accepts the residential address of the stakeholder for the
            new corporate entity to be onboarded.


            AU: Optional

            EU: Required

            UK: Required

            SG: Required
        contactDetails:
          $ref: '#/components/schemas/CorporateContactDetails'
          description: >-
            This object accepts the contact details of the stakeholder for the new
            corporate entity to be onboarded.


            AU: Optional

            EU: Optional

            UK: Optional

            SG: Optional
        dateOfBirth:
          description: This field accepts the date of birth of the stakeholder in
            yyyy-MM-dd format.
          type: string
        documentDetails:
          description: >-
            This array accepts the document details for the stakeholder.

            This field is required only if the documents are being uploaded.
          items:
            $ref: '#/components/schemas/CorporateDocumentDetail'
          type: array
        firstName:
          description: This field contains the first name of the stakeholder.
          type: string
        lastName:
          description: This field contains the last name of the stakeholder.
          type: string
        middleName:
          description: This field contains the middle name of the stakeholder.
          type: string
        nationality:
          description: This field accepts the 2-letter [ISO Alpha-2 country code](/docs/currency-and-country-codes)
            for the nationality of the stakeholder.
          type: string
        professionalDetails:
          description: This array accepts the professional details of the stakeholder.
          items:
            $ref: '#/components/schemas/CorporateProfessionalDetails'
          type: array
      title: Corporate stakeholder details
      type: object
    CorporateStakeholders:
      properties:
        businessPartner:
          $ref: '#/components/schemas/CorporateBusinessPartner'
        entityType:
          type: string
        stakeholderDetails:
          $ref: '#/components/schemas/CorporateStakeholderDetails'
          description: >-
            This object accepts further details for the stakeholder of the new corporate
            entity to be onboarded.

            This object and the items inside are required in case entity type of stakeholder
            is INDIVIDUAL


            AU: Optional

            EU: Required

            UK: Required

            SG: Required
      title: Corporate stakeholders
      type: object
    ProductCustomerTagDTO:
      properties:
        key:
          description: >-
            This object contains the user defined key-value pairs provided by the
            client.

            The maximum number of tags allowed is 15.


            AU: Optional

            EU: Optional

            UK: Optional

            SG: Optional
          type: string
        value:
          description: >-
            This field accepts the value of the tag.

            The maximum value length limit is 256 characters.


            AU: Optional

            EU: Optional

            UK: Optional

            SG: Optional
          type: string
      title: CustomerTagDTO
      type: object
    DeviceDetails:
      properties:
        countryIP:
          description: Country of the IP address e.g. US. Use Fetch corporate constants
            API for valid values.
          type: string
        deviceInfo:
          description: Information of the device e.g. Mac OS.
          type: string
        ipAddress:
          description: IP address of the device e.g. 45.48.241.198
          type: string
        sessionId:
          description: A unique identifier for the session, generated by your application.
          type: string
      title: DeviceDetails
      type: object
    ProductDocument:
      properties:
        document:
          description: >-
            This field accepts the Base64 encoded document to be uploaded.


            AU: Optional

            EU: Optional

            UK: Optional

            SG: Optional
          type: string
        fileName:
          description: >-
            This field accepts the file name of the document to be uploaded.


            AU: Optional

            EU: Optional

            UK: Optional

            SG: Optional
          type: string
        fileType:
          description: >-
            This field accepts the file type of the document to be uploaded. The valid
            values are:

            jpg

            jpeg

            png

            pdf

            image/jpg

            image/jpeg

            image/png

            application/pdf


            AU: Optional

            EU: Optional

            UK: Optional

            SG: Optional
          type: string
      title: Document
      type: object
    ProductDocumentDetail:
      properties:
        document:
          description: >-
            This array accepts the document to be uploaded.


            AU: Optional

            EU: Optional

            UK: Optional

            SG: Optional
          items:
            $ref: '#/components/schemas/ProductDocument'
          type: array
        documentExpiryDate:
          description: >-
            This field accepts the date of the document expiry

            This field is required only if the documents are being uploaded


            AU: Optional

            EU: Conditional

            UK: Optional

            SG: Optional
          type: string
        documentHolderName:
          description: >-
            This field accepts the name of the document holder for the uploaded document.


            AU: Optional

            EU: Required

            UK: Optional

            SG: Optional
          type: string
        documentIssuanceCountry:
          description: >-
            This field accepts the name of the document issuing country.


            AU: Optional

            EU: Conditional

            UK: Optional

            SG: Optional
          type: string
        documentIssuanceState:
          description: The state that issued the document. Applicable for documents
            that differ in different states.
          type: string
        documentNumber:
          description: >-
            This field accepts the document number for the uploaded document.

            This field is required only if the documents are being uploaded


            AU: Optional

            EU: Required

            UK: Optional

            SG: Optional
          type: string
        documentReferenceNumber:
          description: >-
            This field accepts the document reference number for the uploaded document.


            AU: Conditional

            EU: Optional

            UK: Optional

            SG: Optional
          type: string
        documentType:
          description: >-
            This field accepts the type of the document. The acceptable types of the
            documents are:
             Business Registration Document
            Trust Deed

            Partnership Deed

            Association Deed

            Register of Directors

            Register of Shareholders


            AU: Optional

            EU: Required

            UK: Optional

            SG: Optional
          type: string
      title: DocumentDetail
      type: object
    ExpectedAccountCredit:
      properties:
        averageTransactionValue:
          description: This field accepts the expected average transaction value for
            Pay In of the corporate entity to be onboarded.
          type: string
        monthlyTransactionVolume:
          description: This field accepts the expected monthly Volume for Pay In of
            the corporate entity to be onboarded.
          type: string
        monthlyTransactions:
          description: This field accepts the expected average transaction count for
            Pay In transactions of the corporate entity to be onboarded.
          type: string
        topRemitters:
          description: This field accepts the Primary Remitters of the corporate entity
            to be onboarded.
          items:
            type: string
          type: array
        topTransactionCountries:
          description: This field accepts the expected top Pay In countries of the
            corporate entity to be onboarded.
          items:
            type: string
          type: array
      title: ExpectedAccountCredit
      type: object
    ExpectedAccountDebit:
      properties:
        averageTransactionValue:
          description: This field accepts the expected average transaction value for
            Pay Out of the corporate entity to be onboarded.
          type: string
        monthlyTransactionVolume:
          description: This field accepts the expected monthly Volume for Pay Out
            of the corporate entity to be onboarded.
          type: string
        monthlyTransactions:
          description: This field accepts the expected average transaction count for
            Pay Out transactions of the corporate entity to be onboarded.
          type: string
        topBeneficiaries:
          description: This field accepts the Primary Beneficiaries of the corporate
            entity to be onboarded.
          items:
            type: string
          type: array
        topTransactionCountries:
          description: This field accepts the expected top Pay Out countries of the
            corporate entity to be onboarded.
          items:
            type: string
          type: array
      title: ExpectedAccountDebit
      type: object
    ExpectedAccountUsage:
      properties:
        credit:
          $ref: '#/components/schemas/ExpectedAccountCredit'
          description: The expected account usage of all 3rd party inward transactions
            or collections.
        debit:
          $ref: '#/components/schemas/ExpectedAccountDebit'
          description: The expected account usage of all outward transactions.
        intendedUses:
          description: How the customer inteds to use the account.
          items:
            type: string
          type: array
        intendedUsesDescription:
          description: This field accepts description of the purpose of account in
            2-3 lines of text. Maximum 300 characters.
          type: string
      title: ExpectedAccountUsage
      type: object
    KycUrls:
      properties:
        applicantKycUrl:
          $ref: '#/components/schemas/ProductApplicantKycUrl'
          description: Object to contain the KYC redirect URL of the applicant. Returned
            only if applicant redirectURL is available based on the applicant kycMode.
        stakeholderKycUrls:
          description: 'Returned only if any of the applicant redirectURL is available
            based on the kycMode. This object contains redirectURL and referenceId
            of the stakeholder for whom the  redirectURL is issued. In case referenceId
            not provided in the request of Onboard Corporate Customer, firstName,
            middleName, lastName provided in this response can be used for identifying
            the stakeholder. '
          items:
            $ref: '#/components/schemas/ProductStakeholderKycUrls'
          type: array
      title: KycUrls
      type: object
    ProductLegalDetails:
      properties:
        isRegistered:
          description: This field captured if an entity such as co-operative or trust
            is registered or not.
          type: boolean
        legislationName:
          description: >-
            This field accepts the name of the legislation under which the corporate
            entity being onboarded was formed.

            This field is required in case the region is AU when the entity type [refer
            businessDetails.businessType] is Government Body.


            AU: Optional

            EU: NA

            UK: NA

            SG: NA
          type: string
        legislationType:
          description: >-
            This field accepts the type of the legislation under which the corporate
            entity being onboarded was formed.

            The acceptable values are:

            Established under commonwealth legislation

            Established under State

            Territory legislation

            Other


            AU: Optional

            EU: NA

            UK: NA

            SG: NA
          type: string
        listedExchange:
          description: >-
            This field accepts the exchange where the business is listed. Refer to
            the Glossary of Listed Exchange:

            This field is required in case the entity type is "Public Company" (please
            refer to businessDetails.businessType).


            AU: Optional

            EU: NA

            UK: NA

            SG: Optional
          type: string
        registeredCountry:
          description: >-
            This field accepts the 2-letter [ISO Alpha-2 country code](https://nium-documents.s3-eu-west-1.amazonaws.com/spend-documents/Country+Code.pdf)
            for the country.


            AU: Required

            EU: Required

            UK: Required

            SG: Required
          type: string
        registeredDate:
          description: >-
            This field accepts the business registration date for the new corporate
            entity to be onboarded.


            AU: Required

            EU: Required

            UK: Required

            SG: Required
          type: string
      title: LegalDetails
      type: object
    NatureOfBusiness:
      properties:
        industryCodes:
          description: List of industry sector codes relevant to the business of the
            customer. Use [Fetch Corporate Constants API](ref:fetchcorporateconstants)
            for valid values.
          items:
            type: string
          type: array
        industryDescription:
          description: A 2-3 line summary explaining the nature and operations of
            the business of the customer. Maximum 300 characters.
          type: string
      title: NatureOfBusiness
      type: object
    OnboardCorporateCustomerRequestDTO:
      properties:
        tags:
          description: >-
            This object contains the user defined key-value pairs provided by the
            client.

            The maximum number of tags allowed is 15.


            AU: Optional

            EU: Optional

            UK: Optional

            SG: Optional
          items:
            $ref: '#/components/schemas/ProductCustomerTagDTO'
          type: array
        businessDetails:
          $ref: '#/components/schemas/ProductBusinessDetails'
          description: >-
            This object accepts the business details of the new corporate entity to
            be onboarded.


            AU: Required

            EU: Required

            UK: Required

            SG: Required
        clientId:
          description: >-
            This field accepts the NIUM client Id of the customer. This field should
            be provided only while performing the re-initiate KYB process.


            AU: Optional

            EU: Optional

            UK: Optional

            SG: Optional
          type: string
        customerHashId:
          description: >-
            This field accepts the unique customer identifier generated at the time
            of customer creation. It is received in the response of the previously
            executed Onboard Customer API. This field should be provided only while
            performing the re-initiate KYB process.


            AU: Optional

            EU: Optional

            UK: Optional

            SG: Optional
          format: uuid
          type: string
        deviceDetails:
          $ref: '#/components/schemas/DeviceDetails'
          description: >-
            This object accepts the device details for onboarding the new corporate
            entity to be onboarded.


            AU: Required

            EU: Required

            UK: Required

            SG: Required
        expectedAccountUsage:
          $ref: '#/components/schemas/ExpectedAccountUsage'
          description: This object accepts information about the expected nature of
            account usage by the customer.
        natureOfBusiness:
          $ref: '#/components/schemas/NatureOfBusiness'
          description: Nature of Business of the corporate customer. Object required
            in the EU region.
        productDetails:
          $ref: '#/components/schemas/ProductProductDetails'
          description: >-
            This object accepts the product details for onboarding the new corporate
            entity to be onboarded.


            AU: Required

            EU: Required

            UK: Required

            SG: Required
        region:
          description: >-
            This field accepts the region code for which onboarding has been triggered.
            The acceptable value are:

            AU

            EU

            UK

            SG


            AU: Required

            EU: Required

            UK: Required

            SG: Required
          type: string
        riskAssessmentInfo:
          $ref: '#/components/schemas/ProductRiskAssessmentInfo'
          description: >-
            This object accepts additional information required for risk profile determination.


            AU: Required

            EU: Required

            UK: Required

            SG: Required
      title: OnboardCorporateCustomerRequestDTO
      type: object
    ProductOnboardingDetails:
      properties:
        onboardingByPartner:
          type: string
        onboardingPartnerName:
          type: string
      title: OnboardingDetails
      type: object
    ProductPartnershipDetails:
      properties:
        partnerCountry:
          description: >-
            This field accepts the country where partnership was established.


            AU: Optional

            EU: NA

            UK: NA

            SG: Optional
          type: string
        partnerName:
          description: >-
            This field accepts the partner name.


            AU: Optional

            EU: NA

            UK: NA

            SG: Optional
          type: string
        partnerState:
          description: >-
            This field accepts the state where partnership was established.


            AU: Optional

            EU: NA

            UK: NA

            SG: Optional
          type: string
      title: PartnershipDetails
      type: object
    PaymentIdsDTO:
      properties:
        accountName:
          description: This field contains the name of the account.
          example: John
          type: string
        accountType:
          description: This field contains the type of an account.
          enum:
          - LOCAL
          - GLOBAL
          - LOCAL+GLOBAL
          example: LOCAL
          type: string
        bankAddress:
          description: This field contains the full address of the bank.
          example: 108,MG Road
          type: string
        bankName:
          description: 'This field contains the bank name.The possible values are:'
          enum:
          - BOL_LT
          - MONOOVA_AU
          - DBS_HK
          - DBS_SG
          - JPM_AU
          - JPM_SG
          - CB_GB
          - CFSB_US
          example: DBS_SG
          type: string
        bankNameFull:
          description: This field contains the full name of the bank.
          example: DBS
          type: string
        currencyCode:
          description: This field contains the 3-letter [ISO-4217 currency code](/docs/currency-and-country-codes).
          example: SGD
          type: string
        routingCodeType1:
          description: This field contains the routing code type 1.
          type: string
        routingCodeType2:
          description: This field contains the routing code type 2.
          type: string
        routingCodeValue1:
          description: This field contains the routing code type 1 value.
          type: string
        routingCodeValue2:
          description: This field contains the routing code type 2 value.
          type: string
        uniquePayerId:
          description: This is a unique email Id provided to the customer in addition
            to uniquePaymentId for supported regions and configuration, or else it
            will be null, for example, abc12_ca@nium.com.
          example: 'null'
          type: string
        uniquePaymentId:
          description: This field is the virtual account number per currency provided
            to customers for supported regions and configuration, for example, IBAN
            in EU, virtual account number from Moonova in AU, or else, it will be
            null.
          example: '8850932057194'
          type: string
      title: PaymentIds
      type: object
    ProductProductDetails:
      properties:
        accountDetails:
          $ref: '#/components/schemas/ProductAccountWhiteList'
        parentClientHashId:
          type: string
        preFundName:
          type: string
        products:
          items:
            type: object
          type: array
        segment:
          description: >-
            This field accepts the fee segment associated with a client.

            Maximum character limit: 64.


            AU: Optional

            EU: Optional

            UK: Optional

            SG: Optional
          type: string
      title: ProductDetails
      type: object
    ProductProfessionalDetails:
      properties:
        capitalContribution:
          description: This field accepts the capital Contribution of the Stakeholder.
            Use the [Fetch Corporate Constants API](https://docs.nium.com/apis/reference/fetchcorporateconstantsusingget)
            to get the list of valid enum values.
          type: string
        hasDistributionRight:
          description: This field accepts if the stakeholder has distribution rights.
          type: boolean
        interestPercentage:
          description: This field accepts the percentage of interest held by a trustee
            or partner. Enter a number between 0 to 100.
          type: string
        position:
          description: This field accepts the position. Use the [Fetch Corporate Constants
            API](ref:fetchcorporateconstantsusingget) to get the list of valid enum
            values.
          type: string
        positionStartDate:
          description: This field accepts the start date of the position.
          type: string
        sharePercentage:
          description: This field accepts the percentage of shares held. Enter a number
            between 0 to 100.
          type: string
        trustBeneficiaryClass:
          description: This field accepts the class of trustee.
          type: string
        votingRights:
          description: This field accepts the voting rights. Use the [Fetch Corporate
            Constants API](https://docs.nium.com/apis/reference/fetchcorporateconstantsusingget)
            to get the list of valid enum values.
          items:
            type: string
          type: array
      title: Professional details
      type: object
    PublicCorporateBusinessDetails:
      properties:
        addresses:
          $ref: '#/components/schemas/CorporateAddresses'
          description: >-
            This is an object which accepts the registered and/or business address
            details for the new corporate entity to be onboarded.


            AU: Required

            EU: Required

            UK: Required

            SG: Required
        businessName:
          description: This field contains the name of a business.
          type: string
        businessRegistrationNumber:
          description: This field accepts the business registration number of the
            new corporate entity to be onboarded.
          type: string
        businessType:
          description: >-
            This field accepts the legal entity type of the business. The supported
            entity types are:

            Sole Trader
             Private Limited Company
            Public Company

            Partnership

            Limited Liability Partnership Firm

            Government Body

            Associations

            Trust

            Regulated Trust

            Unregulated Trust


            AU: Required

            EU: Required

            UK: Required

            SG: Required
          type: string
        searchReferenceId:
          type: string
        website:
          description: This field accepts the business website link of the new corporate
            entity to be onboarded.
          type: string
      title: Public corporate business details
      type: object
    ProductRegisteredAddress:
      properties:
        addressLine1:
          description: >-
            This field accepts the address line1 of the registered address for the
            new corporate entity to be onboarded.


            AU: Required

            EU: Required

            UK: Required

            SG: Required
          type: string
        addressLine2:
          description: >-
            This field accepts the address line2 of the registered address for the
            new corporate entity to be onboarded.


            AU: Required

            EU: Optional

            UK: Optional

            SG: Optional
          type: string
        city:
          description: >-
            This field accepts the city name of the registered address for the new
            corporate entity to be onboarded.


            AU: Required

            EU: Required

            UK: Required

            SG: Required
          type: string
        country:
          description: >-
            This field accepts the [2-letter ISO Alpha-2](https://nium-documents.s3-eu-west-1.amazonaws.com/spend-documents/Country+Code.pdf)
            country code of the registered address for the corporate entity to be
            onboarded.


            AU: Required

            EU: Required

            UK: Required

            SG: Required
          type: string
        postcode:
          description: >-
            This field accepts the zip code or postal code of the registered address
            for the corporate entity to be onboarded.


            AU: Required

            EU: Required

            UK: Required

            SG: Required
          type: string
        state:
          description: >-
            This field accepts the state for the new corporate entity to be onboarded.


            AU: Required

            EU: Required

            UK: Required

            SG: Required
          type: string
      title: RegisteredAddress
      type: object
    ProductRegulatoryDetails:
      properties:
        regulatedTrustType:
          description: >-
            This array accepts regulated trust type details. The possible values are
            as follows:

            ASIC - Registered Managed Investment Scheme

            MIS - Unregistered Managed Investment Scheme

            Regulated under a Commonwealth statutory regulator

            Government Superannuation Fund

            This field is required in case the region is AU and entity type [refer
            businessDetails.businessType] is a Regulated Trust.


            AU: Optional

            EU: NA

            UK: NA

            SG: Optional
          items:
            type: string
          type: array
        unregulatedTrustType:
          description: >-
            This array accepts unregulated trust type details. The possible values
            are as follows:

            Family Trust

            Charitable Trust

            Testamentary Trust

            Unit Trust

            Other Type

            This field is required in case the region is AU and entity type [refer
            businessDetails.businessType] is an Unregulated Trust


            AU: Optional

            EU: NA

            UK: NA

            SG: NA
          items:
            type: string
          type: array
      title: RegulatoryDetails
      type: object
    RemitterAccountWhiteList:
      properties:
        active:
          description: This field will return true if the remittance account is active
            else this will return false
          example: false
          type: boolean
        remitterAccountNumber:
          description: This field contains the remitter account number, for example,
            9890098900
          example: '9890098900'
          type: string
        remitterAllowedCurrency:
          description: This field contains the 3-letter [ISO-4217 currency code](/docs/currency-and-country-codes)
            for the allowed remittance currencies.
          type: string
      title: Remitter account allowlist
      type: object
    ProductRequiredFields:
      properties:
        fieldLabel:
          description: This field contains the label of the field for which the RFI
            is raised.
          example: Identity Document Type
          type: string
        fieldValue:
          description: This field contains the field value for which the RFI is raised.
          example: documentType
          type: string
        type:
          description: >-
            This field contains the type for which the RFI is raised. The possible
            values are:

            data

            document
          example: data
          type: string
      title: RequiredFields
      type: object
    RespondRfiRequestDTO:
      properties:
        caseId:
          description: This field accepts the compliance case Id of the customer.
          example: 02ffd56a-1eff-400f-bd43-16c575412c07
          type: string
        clientId:
          description: This field accepts the NIUM client Id of the customer.
          example: NIM1655797457637
          type: string
        customerHashId:
          description: This field contains the unique customer identifier generated
            at the time of customer creation.
          format: uuid
          type: string
        region:
          type: string
        rfiResponseRequest:
          description: This is an array which accepts the requests for information,
            depending upon documents required to raise RFI.
          items:
            $ref: '#/components/schemas/ProductRfiResponseRequest'
          type: array
      title: Respond Rfi Request
      type: object
    RespondRfiResponseDTO:
      properties:
        caseId:
          description: This field contains the compliance case Id of the customer.
          example: d838d937-9bf6-4948-a328-fc55188ddde4
          type: string
        clientId:
          description: This field contains the NIUM client Id of the customer.
          example: NIM1630928573504
          type: string
        status:
          description: This field contains the compliance status of the corporate
            customer after the RFI is responded. On successful response to RFI, possible
            value is RFI_RESPONDED.
          example: RFI_RESPONDED
          type: string
      title: Respond Rfi Response
      type: object
    ProductResult:
      properties:
        businessDetails:
          description: This is an array object which contains the business details.
          items:
            $ref: '#/components/schemas/PublicCorporateBusinessDetails'
          type: array
      title: Result
      type: object
    ProductRevenueInfo:
      properties:
        annualTurnOver:
          type: string
        monthlyVolume:
          type: string
      title: RevenueInfo
      type: object
    ProductRfiResponseRequest:
      properties:
        businessInfo:
          $ref: '#/components/schemas/ProductBusinessDetails2'
          description: This object accepts the business information of the corporate
            entity.
        expectedAccountUsage:
          $ref: '#/components/schemas/ExpectedAccountUsage'
          description: Accepts details about how the account will be used by the customer.
        natureOfBusiness:
          $ref: '#/components/schemas/NatureOfBusiness'
          description: Nature of Business of the corporate customer. Object required
            in the EU region.
        rfiHashId:
          description: This field contains the Unique identifier for the individual
            RFI.
          example: 6e93eed7-61ed-46d7-9d55-3db174305987
          type: string
        rfiTemplateId:
          description: This field accepts the RFI template ID as received in [Fetch
            Corporate Customer RFI Details](ref:fetchcorporatecustomerrfidetails)
            API.
          example: e47fbae2-aee2-43d4-9524-c8fcf6513616
          format: uuid
          type: string
        riskAssessmentInfo:
          $ref: '#/components/schemas/ProductRiskAssessmentInfo'
          description: This object accepts additional information required for risk
            profile determination.
      title: Rfi response request
      type: object
    ProductRfiTemplate:
      properties:
        referenceId:
          description: This field contains the reference ID of the the entity for
            which the RFI is raised.
          example: 5fe45995-b529-44fd-8af9-0042fd020942
          type: string
        remarks:
          description: This field contains the remarks entered by compliance while
            raising RFI.
          example: test
          type: string
        rfiHashId:
          description: This field contains the Unique identifier for the individual
            RFI.
          example: 6e93eed7-61ed-46d7-9d55-3db174305987
          type: string
        status:
          description: >-
            This field contains the status of the RFI. The possible values are:

            RFI_REQUESTED

            RFI_RESPONDED
          example: RFI_RESPONDED
          type: string
        template:
          $ref: '#/components/schemas/ProductTemplate'
          description: This is an object which contains the template details.
        templateId:
          description: This field contains the ID of the RFI template.
          example: ccb58d50-5dad-4bff-a418-3c2d5426e4c2
          type: string
      title: RfiTemplate
      type: object
    ProductRiskAssessmentInfo:
      properties:
        annualTurnover:
          description: >-
            This field accepts the annual turnover for the corporate entity to be
            onboarded. Please refer to the [Glossary of Annual Turnover](https://docs.nium.com/baas/onboard-corporate-customer#glossary-of-annual-turnover):
            for the applicable values


            AU: Required

            EU: Required

            UK: Required

            SG: Required
          type: string
        countryOfOperation:
          description: >-
            This array accepts the list of countries where business operations exist
            apart from the registered country for the corporate entity to be onboarded.


            AU: Required

            EU: Required

            UK: Required

            SG: Required
          items:
            type: string
          type: array
        industrySector:
          description: >-
            This field accepts the industry sector for the corporate entity to be
            onboarded. Please refer to the [Glossary of Industry Sector](https://docs.nium.com/baas/onboard-corporate-customer#glossary-of-industry-sector):
            for the applicable values.


            AU: Required

            EU: Required

            UK: Required

            SG: Required
          type: string
        intendedUseOfAccount:
          description: The customer's intended use of the account. Use Fetch Corporate
            Constants API for a valid set of values.
          type: string
        ofacLicencePresent:
          description: >-
            This field accepts Yes or No to ensure if the OFAC licence is present
            or not for the new corporate entity to be onboarded.


            AU: Optional

            EU: Optional

            UK: Optional

            SG: Optional
          type: string
        restrictedCountries:
          description: >-
            This array accepts the restricted country names.


            AU: Optional

            EU: Optional

            UK: Optional

            SG: Optional
          items:
            type: string
          type: array
        riskScore:
          description: "This field accepts the risk score assigned to the corporate.\n\
            Note: This field will be used for capturing risk score assigned by clients\
            \ to the corporate entity being onboarded. These fields will only be applicable\
            \ for clients who have been pre-approved to manage the KYB process on\
            \ their own and hence will be used for sending the risk score that was\
            \ assigned to the corporate entity as part of the KYB process at client\u2019\
            s end.\n\nAU: Optional\nEU: Optional\nUK: Optional\nSG: Optional"
          type: string
        riskSeverity:
          description: "This field accepts the risk severity assigned to the corporate.\
            \ The possible value are:\nHIGH\nMEDIUM\nLOW\nRESTRICTED\nNote: This field\
            \ will be used for capturing risk severity assigned by clients to the\
            \ corporate entity being onboarded. These fields will only be applicable\
            \ for clients who have been pre-approved to manage the KYB process on\
            \ their own and hence will be used for sending the risk severity that\
            \ was assigned to the corporate entity as part of the KYB process at client\u2019\
            s end.\n\nAU: Optional\nEU: Optional\nUK: Optional\nSG: Optional"
          type: string
        totalEmployees:
          description: >-
            This field accepts the total number of employees for the corporate entity
            to be onboarded.


            AU: Required

            EU: Required

            UK: Required

            SG: Required
          type: string
        transactionCountries:
          description: An array of countries where the customers sends to or recieves
            money from using this account. See Fetch Corporate Constants API for the
            list of restricted countries.
          items:
            type: string
          type: array
        travelRestrictedCountry:
          description: >-
            This field accepts Yes or No to ensure if the country is travel restricted
            country or not for the new corporate entity to be onboarded.


            AU: Optional

            EU: Optional

            UK: Optional

            SG: Optional
          type: string
      title: RiskAssessmentInfo
      type: object
    ProductStakeholderDetails:
      properties:
        additionalInfo:
          additionalProperties:
            type: string
          description: An object that contains additional information about the stakeholder.
            Details such as isPEP can be sent as Key value pair. Refer to region wise
            guides for more details.
          type: object
        address:
          $ref: '#/components/schemas/ProductAddress'
          description: >-
            This object accepts the residential address of the stakeholder for the
            new corporate entity to be onboarded.


            AU: Optional

            EU: Required

            UK: Required

            SG: Required
        birthCountry:
          description: >-
            This field accepts the birth country name of the stakeholder.


            AU: NA

            EU: Required

            UK: NA

            SG: NA
          type: string
        contactDetails:
          $ref: '#/components/schemas/ProductContactDetails'
          description: >-
            This object accepts the contact details of the stakeholder for the new
            corporate entity to be onboarded.


            AU: Optional

            EU: Optional

            UK: Optional

            SG: Optional
        dateOfBirth:
          description: >-
            This field accepts the date of birth of the stakeholder in yyyy-MM-dd
            format.


            AU: Optional

            EU: Required

            UK: Required

            SG: Required
          type: string
        documentDetails:
          description: >-
            This array accepts the document details for the stakeholder.

            This field is required only if the documents are being uploaded.


            AU: Optional

            EU: Conditional

            UK: Optional

            SG: Optional
          items:
            $ref: '#/components/schemas/ProductDocumentDetail'
          type: array
        firstName:
          description: >-
            This field contains the first name of the stakeholder.


            AU: Optional

            EU: Required

            UK: Required

            SG: Required
          type: string
        firstName_local:
          description: >-
            This field contains the first name of the stakeholder in local language.


            AU: Optional

            EU: Required

            UK: Required

            SG: Required
          type: string
        gender:
          description: >-
            This field accepts the gender of the stakeholder. The acceptable values
            are:

            Male

            Female


            AU: Optional

            EU: NA

            UK: NA

            SG: NA
          type: string
        kycMode:
          description: >-
            This object accepts the desired mode to do the KYC of the individual stakeholder.


            AU: Optional

            EU: Required

            UK: Required

            SG: Required
          type: string
        lastName:
          description: >-
            This field contains the last name of the stakeholder.


            AU: Optional

            EU: Required

            UK: Required

            SG: Required
          type: string
        lastName_local:
          description: >-
            This field contains the last name of the stakeholder in local language.


            AU: Optional

            EU: Required

            UK: Required

            SG: Required
          type: string
        middleName:
          description: >-
            This field contains the middle name of the stakeholder.


            AU: Optional

            EU: Optional

            UK: Optional

            SG: Optional
          type: string
        nationality:
          description: >-
            This field accepts the 2-letter [ISO Alpha-2 country code](https://nium-documents.s3-eu-west-1.amazonaws.com/spend-documents/Country+Code.pdf)
            for the nationality of the stakeholder.


            AU: Optional

            EU: Required

            UK: Required

            SG: Required
          type: string
        occupation:
          description: >-
            This field contains the occupation of the stakeholder.Use the [Fetch Corporate
            Constants API](https://docs.nium.com/apis/reference/fetchcorporateconstantsusingget)
            to get the list of valid values.


            AU: Optional

            EU: Required

            UK: Required

            SG: Required
          type: string
        professionalDetails:
          description: >-
            This array accepts the professional details of the stakeholder.


            AU: Optional

            EU: Required

            UK: Required

            SG: Required
          items:
            $ref: '#/components/schemas/ProductProfessionalDetails'
          type: array
        taxDetails:
          description: >-
            This array accepts the tax details.


            AU: NA

            EU: Required

            UK: NA

            SG: NA
          items:
            $ref: '#/components/schemas/ProductTaxDetails'
          type: array
      title: StakeholderDetails
      type: object
    StakeholderDetails2:
      properties:
        additionalInfo:
          additionalProperties:
            type: string
          type: object
        address:
          $ref: '#/components/schemas/ProductAddress'
          description: This object accepts the residential address of the stakeholder
            for the corporate entity.
        birthCountry:
          type: string
        contactDetails:
          $ref: '#/components/schemas/ProductContactDetails'
          description: This object accepts the contact details of the stakeholder
            for the corporate entity.
        dateOfBirth:
          description: This field accepts the date of birth of the stakeholder.
          type: string
        documentDetails:
          $ref: '#/components/schemas/ProductDocumentDetail'
          description: >-
            This is an object which accepts the document details for the stakeholder.

            This field is required only if the documents are being uploaded.
        firstName:
          description: This field accepts the first name of the stakeholder.
          type: string
        firstName_local:
          description: This field accepts the first name of the stakeholder in local
            language.
          type: string
        gender:
          description: >-
            This field accepts the gender of the stakeholder. The acceptable values
            are:

            Male

            Female
          type: string
        isPrimaryApplicant:
          type: string
        lastName:
          description: This field accepts the last name of the stakeholder.
          type: string
        lastName_local:
          description: This field accepts the last name of the stakeholder in local
            language.
          type: string
        middleName:
          description: This field accepts the middle name of the stakeholder.
          type: string
        nationality:
          description: This field accepts the [2-letter ISO Alpha-2 country code](/docs/currency-and-country-codes)
            for the nationality of the stakeholder.
          type: string
        occupation:
          description: This field contains the occupation of the stakeholder.Use the
            [Fetch Corporate Constants API](ref:fetchcorporateconstants) to get the
            list of valid values.
          type: string
        professionalDetails:
          description: This array accepts the professional details of the stakeholder.
          items:
            $ref: '#/components/schemas/ProductProfessionalDetails'
          type: array
        sourceOfFunds:
          type: string
        taxDetails:
          description: This an array which accepts the tax details.
          items:
            $ref: '#/components/schemas/ProductTaxDetails'
          type: array
        title:
          type: string
      title: Stakeholder details
      type: object
    ProductStakeholderKycUrls:
      properties:
        dateOfBirth:
          description: Date of birth of the stakeholder as provided in the request
            of the Onboard Corporate Customer API.
          example: '1992-10-01'
          type: string
        firstName:
          description: First name of the stakeholder as provided in the request of
            the Onboard Corporate Customer API.
          example: John
          type: string
        lastName:
          description: Last name of the stakeholder as provided in the request of
            the Onboard Corporate Customer API.
          example: Doe
          type: string
        middleName:
          description: Middle name of the stakeholder as provided in the request of
            the Onboard Corporate Customer API.
          example: Unana
          type: string
        nationality:
          description: Nationality of the stakeholder as provided in the request of
            the Onboard Corporate Customer API.
          example: IN
          type: string
        redirectUrl:
          description: Returned only if stakeholder redirectURL is available based
            on the stakeholder kycMode.
          example: https://integrations.partners.instarem.com/preprod/compliance/callback/load?kycUrlId=181ae550-b016-46bf-af6a-a8c49f01cdff&referenceId=672b3450-6016-46bf-af6a-a8c49f0erac54
          type: string
        referenceId:
          description: ReferenceId of the stakeholder, sent in the request of Onboard
            Corp Customer API.
          example: 672b3450-6016-46bf-af6a-a8c49f0erac54
          type: string
      title: StakeholderKycUrls
      type: object
    ProductStakeholders:
      properties:
        businessPartner:
          $ref: '#/components/schemas/ProductBusinessPartner'
          description: >-
            This object accepts the details of the business partner.

            This object is required when the stakeholder(s) is a business entity.


            AU: Optional

            EU: Conditional

            UK: Optional

            SG: Optional
        referenceId:
          description: >-
            This field accepts the unique reference ID for the Individual or Business
            Stakeholder provided by client.


            AU: Optional

            EU: Optional

            UK: Optional

            SG: Optional
          type: string
        stakeholderDetails:
          $ref: '#/components/schemas/ProductStakeholderDetails'
          description: >-
            This object accepts further details for the stakeholder of the new corporate
            entity to be onboarded.

            This object and the items inside are required in case entity type of stakeholder
            is INDIVIDUAL


            AU: Optional

            EU: Required

            UK: Required

            SG: Required
      title: Stakeholders
      type: object
    Stakeholders2:
      properties:
        businessPartner:
          $ref: '#/components/schemas/BusinessPartner2'
          description: This object accepts the details of the business partner.
        entityType:
          type: string
        referenceId:
          description: This is the reference Id of the stakeholder for which the RFI
            is raised.
          example: 137889fb-8569-4e34-b50b-1a71c787dc61
          type: string
        stakeholderDetails:
          $ref: '#/components/schemas/StakeholderDetails2'
          description: This object accepts further details for the stakeholder of
            the corporate entity.
      title: Stakeholders
      type: object
    ProductTaxDetails:
      properties:
        country:
          description: >-
            This field accepts the 2-letter [ISO Alpha-2 country code](https://nium-documents.s3-eu-west-1.amazonaws.com/spend-documents/Country+Code.pdf)
            for the country of residence for tax purpose.


            AU: NA

            EU: Required

            UK: NA

            SG: NA
          type: string
        taxNumber:
          description: >-
            This field accepts the tax ID number for each country of tax residence.


            AU: NA

            EU: Required

            UK: NA

            SG: NA
          type: string
      title: TaxDetails
      type: object
    ProductTemplate:
      properties:
        documentType:
          description: >-
            This field contains the RFI document type. The possible values are:

            POA

            POI
          example: POI
          type: string
        name:
          description: This field contains name of the RFI template.
          example: businessName
          type: string
        requiredFields:
          description: This is an array which contains the list of fields for the
            RFI template.
          items:
            $ref: '#/components/schemas/ProductRequiredFields'
          type: array
        rfiType:
          description: >-
            This field contains the entity type for which the RFI is raised. The possible
            values are:

            corporate

            applicant

            stakeholder
          example: applicant
          type: string
        type:
          description: >-
            This field contains the RFI template type. It can be either Data RFI or
            Document RFI. The possible values are:

            data

            document
          example: document
          type: string
      title: Template
      type: object
    UpdateCorporateCustomerRequestDTO:
      properties:
        tags:
          description: >-
            This object contains the user defined key-value pairs provided by the
            client.

            The maximum number of tags allowed is 15.


            AU: Optional

            EU: Optional

            UK: Optional

            SG: Optional
          items:
            $ref: '#/components/schemas/ProductCustomerTagDTO'
          type: array
        authenticationCode:
          description: >-
            This field accepts the authentication code generated as part of SCA (Strong
            Customer Authentication).

            Note: : Authentication code must be passed if regulatory region of the
            program is UK or EU. Otherwise, please do not use this field and do not
            pass any value.
          example: authCode
          type: string
        businessDetails:
          $ref: '#/components/schemas/ProductBusinessDetails'
          description: >-
            This object accepts the business details of the new corporate entity to
            be onboarded.


            AU: Required

            EU: Required

            UK: Required

            SG: Required
        clientId:
          description: >-
            This field accepts the NIUM client Id of the customer. This field should
            be provided only while performing the re-initiate KYB process.


            AU: Optional

            EU: Optional

            UK: Optional

            SG: Optional
          type: string
        customerHashId:
          description: >-
            This field accepts the unique customer identifier generated at the time
            of customer creation. It is received in the response of the previously
            executed Onboard Customer API. This field should be provided only while
            performing the re-initiate KYB process.


            AU: Optional

            EU: Optional

            UK: Optional

            SG: Optional
          format: uuid
          type: string
        expectedAccountUsage:
          $ref: '#/components/schemas/ExpectedAccountUsage'
          description: Accepts details about how the account will be used by the customer.
        natureOfBusiness:
          $ref: '#/components/schemas/NatureOfBusiness'
          description: Nature of Business of the corporate customer. Object required
            in the EU region.
        productDetails:
          $ref: '#/components/schemas/ProductProductDetails'
          description: >-
            This object accepts the product details for onboarding the new corporate
            entity to be onboarded.


            AU: Required

            EU: Required

            UK: Required

            SG: Required
        region:
          description: >-
            This field accepts the region code for which onboarding has been triggered.
            The acceptable value are:

            AU

            EU

            UK

            SG


            AU: Required

            EU: Required

            UK: Required

            SG: Required
          type: string
        riskAssessmentInfo:
          $ref: '#/components/schemas/ProductRiskAssessmentInfo'
          description: >-
            This object accepts additional information required for risk profile determination.


            AU: Required

            EU: Required

            UK: Required

            SG: Required
      title: UpdateCorporateCustomerRequestDTO
      type: object
    UpdateCorporateKybResponseDTO:
      properties:
        message:
          type: string
      title: Update corporate KYB response
      type: object
    Labels:
      properties:
        acquirerExemptionReason:
          type: string
        acsOutcome:
          type: string
        ecommerceIndicator:
          type: string
        multiClearingSequenceInd:
          type: string
        recurringTransactionIndicator:
          type: string
        scaIndicator:
          type: string
        scaReasonIndicator:
          type: string
      title: Labels
      type: object
    SettlementRequestDTO:
      properties:
        authorizationCode:
          description: This field contains the 6 digit authorization code
          example: NUF5L7
          type: string
        billingAmount:
          description: This field contains the billing amount
          example: 10
          format: double
          type: number
        billingCurrency:
          description: This field contains the 3-letter ISO3 billing currency code
          example: SGD
          type: string
        cardHashId:
          description: This field contains the unique card identifier
          example: 4b500a79-9386-4b50-a1e1-7299f6bfa131
          type: string
        cardNumber:
          description: This field contains the complete 16 digit card number
          example: '4611350100002726'
          type: string
        clientHashId:
          description: This field contains the unique client identifier
          example: dcfe0a79-9bj6-f6bf-78e1-7ab9f89fa1fl
          type: string
        clientId:
          description: This field contains the unique client ID
          example: 1234
          format: int64
          type: integer
        customerHashId:
          description: 'This field contains the unique customer identifier '
          example: d9386a79-7n86-6750-b1c1-0299h4bfa196
          type: string
        exchangeRate:
          description: This field contains the exchange rate from the source currency
            to the destination currency
          example: '1.32'
          type: string
        labels:
          $ref: '#/components/schemas/Labels'
        logoId:
          description: This field accepts the pre-defined logo Id
          example: '001'
          type: string
        logoIdentifier:
          description: This field accepts the pre-defined logo Identifier
          example: '100'
          type: string
        maskCardNumber:
          description: This field contains the 16-digit masked card number
          example: 4573-75xx-xxxx-0149
          type: string
        merchantCategoryCode:
          description: This field contains the 4-digit mcc code
          example: '3799'
          type: string
        merchantCountryCode:
          description: This field contains the merchant country code
          example: AUS
          type: string
        merchantId:
          description: This field contains the unique merchant identifier
          example: '23995053'
          type: string
        merchantNameLocation:
          description: This field contains the full merchant name and location data
          example: COCA-COLA AMATIL         BRISBANE AIRPSG
          type: string
        originalAuthorizationCode:
          description: This field contains the authorization code of the original
            transaction
          example: NUF5L7
          type: string
        posEntryMode:
          description: This field contains the pos entry code that identifies the
            actual method used to capture the account number, expiration date, and
            the PIN
          example: '1020'
          type: string
        settlementDate:
          description: This field contains the settlement date
          example: '20210419'
          type: string
        settlementId:
          description: This field contains the settlement id
          example: 1234
          format: int64
          type: integer
        subBin:
          description: This field is optional & accepts the sub-bin
          example: NUC01020
          type: string
        tokenNumber:
          description: This field contains the token number
          example: 0004611350190078050
          type: string
        tokenRequesterId:
          description: This field contains the token requester id
          example: '40010030273'
          type: string
        transactionAmount:
          description: This field contains the transaction amount.
          example: 10
          format: double
          type: number
        transactionCurrency:
          description: This field contains the 3-letter ISO3 transaction currency
            code.
          example: SGD
          type: string
        transactionType:
          description: This field contains the type of transaction, it can be C or
            D
          example: C
          type: string
        visaTransactionId:
          description: This field contains the Unique ID provided for transaction
            by VISA
          example: 019164261950302
          type: string
      title: Settlement request
      type: object
    ApiError2:
      type: object
      properties:
        message:
          type: string
          description: Provides more details about the returned error, if any.
          example: Error message descriptor.
        errors:
          type: string
          description: Returns the errors that occurred if any.
          example:
          - field1 is not valid
          - field2 is not valid
    WalletApiError:
      type: object
      properties:
        status:
          type: string
          description: 'HttpStatus of the request : BAD_REQUEST, INTERNAL_SERVER_ERROR.'
          example: BAD_REQUEST
          enum:
          - 200 OK
          - 400 BAD_REQUEST
          - 403 FORBIDDEN
          - 404 NOT_FOUND
          - 500 INTERNAL_SERVER_ERROR
          - 502 BAD_GATEWAY
          - 503 SERVICE_UNAVAILABLE
        message:
          type: string
          description: Error message descriptor.
          example: Error message descriptor.
        errors:
          type: string
          description: List of errors occurred.
          example:
          - field1 is not valid
          - field2 is not valid
    ApiResponseString:
      type: object
      properties:
        status:
          type: string
          description: This field signifies if the request was successful or has an
            error.
          example: OK
          enum:
          - 200 OK
          - 400 BAD_REQUEST
          - 403 FORBIDDEN
          - 404 NOT_FOUND
          - 500 INTERNAL_SERVER_ERROR
          - 502 BAD_GATEWAY
          - 503 SERVICE_UNAVAILABLE
        message:
          type: string
          description: This field will return the response message.
          example: Success
        code:
          type: string
          description: This field will return the HTTP status code with its interpretation.
          example: 200 OK
        body:
          type: string
          description: This field will return the response message from the server.
          example: Success
    WalletStandard404Error:
      type: object
      properties:
        code:
          type: string
          enum:
          - resource_not_found
        description:
          type: string
    WalletApiResponse2:
      type: object
      properties:
        success:
          type: boolean
          description: This flag indicates the success of the request.
          example: true
        message:
          type: string
          description: This field will return the success message if the limit updated
            successfully.
          example: Limits updated successfully
    UpdateWalletRequestDTO:
      type: object
      properties:
        currencies:
          type: array
          description: The list of currencies that the wallet will use. Currencies
            should be submitted as the [3-letter ISO-4217 currency code](https://www.currency-iso.org/en/home/tables/table-a1.html).
          example:
          - SGD
          - GBP
          items:
            type: string
            description: The list of currencies that will be used to hold balances
              in the wallet. Currency should be accepted as the [3-letter ISO-4217
              currency code](https://www.currency-iso.org/en/home/tables/table-a1.html).
            example: '["SGD","GBP"]'
        name:
          maxLength: 255
          minLength: 0
          type: string
          description: A description to identify the balance held in the wallet.
          example: Regional wallet
        tags:
          type: array
          description: This object contains the user defined key-value pairs provided
            by the client. The maximum number of tags allowed is 15.
          example:
          - key: Department
            value: Sales
          - key: Corporate Entity business
            value: Payroll
          items:
            $ref: '#/components/schemas/WalletTag'
    WalletTag:
      required:
      - key
      - value
      type: object
      properties:
        key:
          maxLength: 128
          minLength: 0
          type: string
          description: >-
            The name of the tag.

            The maximum character length for `keys` is 128 characters.
        value:
          maxLength: 256
          minLength: 0
          type: string
          description: >-
            The value of the tag.

            The maximum character length for values is 256 characters.
      description: This object contains the user defined key-value pairs provided
        by the client. The maximum number of tags allowed is 15.
      example:
      - key: Department
        value: Sales
      - key: Corporate Entity business
        value: Payroll
    CurrencyDetail:
      type: object
      properties:
        balance:
          type: number
          description: Current balance in the currency.
          format: double
          example: 10
        code:
          type: string
          description: The 3-letter [ISO-4217 currency code](/docs/currency-and-country-codes)
            for the currency.
          example: SGD
        default:
          type: boolean
          description: This field describes if the currency is a base currency or
            not.
          example: true
      description: The currencies array contains multiple objects, each representing
        the balance information for a specific currency in a wallet.
    WalletResponseDTO2:
      type: object
      properties:
        walletHashId:
          type: string
          description: Unique identifier of the wallet.
          example: c69f684f-a306-4c4a-8daa-1e91ce7c85f8
        currencies:
          type: array
          description: The currencies is an array that contains multiple objects.
            This object contains the below data elements. Please refer the example
            for exact structure.
          items:
            $ref: '#/components/schemas/CurrencyDetail'
        intendedUseOfAccount:
          type: string
          description: This field contains customer's intention to use the account.
          example: For Sales department
        tags:
          type: object
          additionalProperties:
            type: string
            description: This is a map object containing user defined key-value pairs
              provided by the client
          description: The tags is an map that contains multiple objects. This object
            contains the below data elements. Please refer the example for exact structure.
        status:
          type: string
          description: Current status of the wallet.
          example: Active
          enum:
          - Active
        createdAt:
          type: string
          description: This field contains the timestamp of wallet creation in the
            format yyyy-MM-ddTHH:mm:ssZ.
          example: 2024-01-14T08:06:49+0000
        updatedAt:
          type: string
          description: This field contains the timestamp of wallet updation in the
            format yyyy-MM-ddTHH:mm:ssZ.
          example: 2024-01-14T08:06:49+0000
        name:
          type: string
          description: A description to identify the balance held in the wallet.
          example: Regional wallet
        type:
          type: string
          description: A field to identify the type of the wallet.
          example: virtual
          enum:
          - receivable
          - payable
          - fees
          - top_up
          - virtual
          - base
    ApiErrorResponse:
      type: object
      properties:
        code:
          type: string
          enum:
          - invalid_client_hash_id
          - invalid_customer_hash_id
          - invalid_wallet_hash_id
          - invalid_card_hash_id
          - customer_status_not_clear
          - invalid_currency
          - currency_not_configured
          - wallet_creation_limit_exceeds
          - tags_maximum_limit_exceeded
          - tag_key_contains_special_chars
          - unique_tag_key_required
          - duplicate_client_transaction_config
          - invalid_client_transaction_config
          - invalid_transaction_category
          - invalid_transaction_type
          - wallet_currency_already_exists
          - invalid_permission_to_override_customer_fee
          - invalid_customer_fee_for_individual
          - invalid_fee_type_for_customer_level
          - invalid_FX_markup_flat_fee
          - invalid_customer_fee_currency
          - invalid_customer_fee_status
          - fee_already_defined_for_auth_currency
          - invalid_transaction_currency
          - invalid_fee_currency
          - customer_fee_above_threshold
          - fee_currency_should_not_be_any
          - customer_fee_does_not_exists
          - customer_fee_update_not_allowed_for_region
          - customer_fee_already_exists
          - wallet_currency_removal_not_allowed
          - invalid_system_reference_number
          - invalid_status_for_remittance_cancel
          - wallet_creation_not_allowed
          - invalid_input
          - resource_not_found
          - invalid_date_range
          - customer_exists_with_external_id
          - payout_cancellation_failed
          - wallet_creation_failed
          - invalid_customer_age
          - duplicate_externalId
          - client_customer_not_found
          - client_customer_compliance_not_completed
          - invalid_customer_creation_combination
          - invalid_input_provided
          - missing_required_fields
          - customer_exists
          - incomplete_client_setup
        description:
          type: string
        field:
          type: string
    TransactionsLocationDTO:
      required:
      - merchantLatitude
      - merchantLongitude
      - merchantTaggedName
      - merchantZoomIndex
      type: object
      properties:
        merchantLatitude:
          type: string
          description: Accepts the latitude of the merchant's location.
          example: '28.532094'
        merchantLongitude:
          type: string
          description: Accepts the longitude of the merchant's location.
          example: '77.01632'
        merchantTaggedName:
          type: string
          description: Accepts the merchant's tagged name.
          example: STARBUCKS
        merchantZoomIndex:
          type: string
          description: Accepts the merchant's map zoom index.
          example: '4'
    TransactionsBusinessDTO:
      required:
      - businessTransaction
      type: object
      properties:
        businessTransaction:
          type: boolean
          description: Mark or unmark a transactions as a business transactions.
          example: true
    UpdateMandateRequestDTO:
      type: object
      properties:
        remarks:
          type: string
          description: This field accepts the remarks to cancel or return mandate
    AccountReference:
      type: object
      properties:
        iban:
          type: string
          description: "This field contains the International Bank Account Number\
            \ (IBAN) for the debtor\u2019s account, for example, \"FR7612345987650123456789014\"\
            ."
        bban:
          type: string
          description: This field contains the Basic Bank Account Number (BBAN) Identifier.
            This data elements is used for payment accounts which have no IBAN, for
            example, "BARC12345612345678"
        pan:
          type: string
          description: "This field contains the Primary Account Number (PAN) of the\
            \ debtor\u2019s card, can be tokenized by the ASPSP due to PCI DSS requirements."
        maskedPan:
          type: string
          description: "This field contains the masked Primary Account Number (PAN)\
            \ of the debtor\u2019s card. Masked data is represented by *."
        msisdn:
          type: string
          description: This field contains an alias to access a payment account via
            a registered mobile phone number.
        currency:
          type: string
          description: "This field contains the debtor\u2019s 3-letter [ISO-4217 currency\
            \ code](/docs/currency-and-country-codes)."
      description: This object contains the account details for the creditor in this
        transaction.
    Amount:
      type: object
      properties:
        amount:
          type: number
          description: This field contains the amount of the transaction
          format: double
        currency:
          type: string
          description: This field contains the [3-letterISO-4217 currency code](/docs/currency-and-country-codes)
            of the transaction
      description: This object contains the amount and currency of the transaction.
    ScaStatus:
      type: object
      properties:
        otp:
          type: string
          description: The PSU can authorize the consent using the OTP code received
            as part of SCA process.
        scaApproach:
          type: string
          description: >-
            This data element must be contained, if the SCA approach is already fixed.
            The possible values are:

            EMBEDDED

            DECOUPLED

            REDIRECT

            The OAuth SCA approach will be subsumed by REDIRECT.
        scaRequred:
          type: boolean
          description: This field will ensure if the SCA is required for consent or
            not.
        status:
          type: string
          description: The consent authorization status.
        tppNokRedirectUrl:
          type: string
          description: Redirect URL for the failure response.
        tppRedirectUrl:
          type: string
          description: Redirect URL for the success response.
      description: Multiple level SCA approach in a corporate PSU context.
    ClientCustomTagDTO:
      required:
      - key
      type: object
      properties:
        key:
          maxLength: 128
          minLength: 0
          type: string
          description: >-
            This field accepts the Client's custom key of the tag.

            The maximum key length limit is 128 characters.
        value:
          maxLength: 256
          minLength: 0
          type: string
          description: >-
            This field accepts the Client's custom value of the tag.

            The maximum value length limit is 256 characters.
    BankRoutingInfo:
      type: object
      properties:
        type:
          type: string
          description: The routing code type.
          enum:
          - IFSC
          - SWIFT
          - ACH_CODE
          - BSB_CODE
          - SORT_CODE
          - BANK_CODE
          - LOCATION_ID
          - BRANCH_CODE
          - TRANSIT_NUMBER
          - BRANCH_NAME
          - CNAPS
          - WALLET
        value:
          type: string
          description: >
            <p>Accepts the routing code value 1. Examples include:</p>

            <ul>
              <li><code>ADCBINBB</code> or <code>ADCBINBB123</code> for SWIFT</li>
              <li><code>SBIN0000058</code> for IFSC</li>
              <li><code>100000</code> for SORT CODE</li>
              <li><code>111000025</code> for ACH CODE</li>
              <li><code>012515</code> for BSB CODE</li>
              <li><code>151</code> for BANK CODE</li>
            </ul>

            <p>If you have any questions, please reach out to your Nium account manager
            or <a href="mailto:support@nium.
    BeneficiaryAccountDetailsDTO:
      type: object
      properties:
        name:
          type: string
          description: This field accepts the name of a beneficiary.
        alias:
          type: string
        address:
          type: string
          description: This field accepts an address of the beneficiary.
        city:
          type: string
          description: This field accepts the city of the beneficiary.
        email:
          type: string
          description: This field accepts an email of the beneficiary.
        accountType:
          type: string
          description: This field accepts the bank account type of the beneficiary.
        contactNumber:
          type: string
          description: This field accepts the mobile number of the beneficiary.
        state:
          type: string
          description: This field accepts the state of the beneficiary.
        postcode:
          type: string
          description: This field accepts an postcode of the beneficiary.
        countryCode:
          type: string
          description: This field accepts the [ISO-2 country code](https://docs.nium.com/apis/docs/currency-and-country-codes)
            for the mobile number of beneficiary.
        remitterBeneficiaryRelationship:
          type: string
          description: This field accepts the relationship of the beneficiary with
            the remitter.
        beneficiaryIdentificationType:
          type: string
          description: This field accepts the type of identification document name
            for a beneficiary.
        beneficiaryIdentificationValue:
          type: string
          description: This field contains an identification document number for the
            beneficiary.
    RemittanceResponseDTO:
      type: object
      properties:
        message:
          type: string
          description: This field will return a success message if the money transferred
            successfully.
          example: Transfer accepted
        payment_id:
          type: string
          description: This field contains the unique payment ID.
          example: 'null'
        system_reference_number:
          type: string
          description: This is a unique system reference number assigned to the transaction.
          example: RT6431795378
        estimatedDeliveryTime:
          type: string
          description: This field is estimated delivery time of transaction.
          example: "2023\u201008\u201024T06:39:51Z"
        systemReferenceNumber:
          type: string
          description: This is a unique system reference number assigned to the transaction.
          example: RT6431795378
    AddWalletRequestDTO:
      required:
      - intendedUseOfAccount
      type: object
      properties:
        currencies:
          type: array
          description: The list of currencies that the wallet will use. Currencies
            should be submitted as the [3-letter ISO-4217 currency code](https://www.currency-iso.org/en/home/tables/table-a1.html).
          example:
          - SGD
          - GBP
          items:
            type: string
            description: The list of currencies that will be used to hold balances
              in the wallet. Currency should be accepted as the [3-letter ISO-4217
              currency code](https://www.currency-iso.org/en/home/tables/table-a1.html).
            example: '["SGD","GBP"]'
        intendedUseOfAccount:
          type: string
          description: The customer's intended use of the wallet.
          example: For Sales department
          enum:
          - payroll
          - operational_expenses
          - budget_control
          - segmentation_of_business_units
          - receivable_management
          - payable_management
          - petty_cash_management
          - custom_ledgering_and_reporting
        tags:
          type: array
          description: This object contains the user defined key-value pairs provided
            by the client. The maximum number of tags allowed is 15.
          example:
          - key: Department
            value: Sales
          - key: Corporate Entity business
            value: Payroll
          items:
            $ref: '#/components/schemas/WalletTag'
        name:
          maxLength: 255
          minLength: 0
          type: string
          description: A description to identify the balance held in the wallet.
          example: Regional balance
    FundTransferRequestDTO:
      required:
      - destinationAmount
      - destinationCurrencyCode
      - destinationWalletHashId
      - purposeCode
      - sourceAmount
      - sourceCurrencyCode
      type: object
      properties:
        destinationWalletHashId:
          type: string
          description: "The walletHashId of Nium\u2019s customer who is the recepient\
            \ of the funds."
          example: c69f684f-a306-4c4a-8daa-1e91ce7c85f8
        sourceCurrencyCode:
          maxLength: 3
          minLength: 3
          type: string
          description: Accepts the 3-letter [ISO-4217 currency code](/docs/currency-and-country-codes)
            for the amount.
          example: SGD
        sourceAmount:
          type: number
          description: The amount to be transferred.
          format: double
          example: 50
        destinationCurrencyCode:
          maxLength: 3
          minLength: 3
          type: string
          description: Accepts the 3-letter [ISO-4217 currency code](/docs/currency-and-country-codes)
            for the amount.
          example: SGD
        destinationAmount:
          type: number
          description: The amount to be transferred.
          format: double
          example: 50
        customerComments:
          maxLength: 512
          minLength: 0
          type: string
          description: Accepts customer comments for wallet to wallet transfers.
          example: Paid for lunch
        authenticationCode:
          type: string
          description: >-
            Accepts the authentication code generated as part of SCA (Strong Customer
            Authentication).

            Note: Authentication code is expected if regulatory region is UK or EU.
          example: authCode
        exemptionCode:
          maxLength: 2
          minLength: 0
          type: string
          description: >-
            Accepts the reason code for the exemption provided as part of SCA (Strong
            Customer Authentication). Accepted values include:

            01 - Trusted Beneficiary

            02 - Low Value Transaction

            03 - Recurring Transactions

            04 - Payment to Self


            Note: Exemption code is required if regulatory region is UK or EU
          example: '01'
        purposeCode:
          type: string
          description: Accepts the purpose code for the payment. Refer to the [Glossary
            of Purpose Codes](/docs/purpose-of-transfer-codes) For the value to include.
          example: IR01802
        deviceDetails:
          type: object
          description: Accepts the device and IP details for the transaction.
        tags:
          maxItems: 5
          minItems: 0
          type: array
          items:
            $ref: '#/components/schemas/ClientCustomTagDTO'
    FundTransferResponse:
      type: object
      properties:
        status:
          type: string
          description: The status of the transfer.
          example: APPROVED
        systemReferenceNumber:
          type: string
          description: The transaction reference number generated by the card issuance
            platform.
          example: FT6449832977
        message:
          type: string
          description: Provides more details about the returned error. Returns null
            is there are no errors.
          example: 'null'
    TransactionClientTagsRequestDTO:
      required:
      - tags
      type: object
      properties:
        tags:
          type: object
          description: >-
            This object accepts the user defined key-value pairs.

            The maximum number of tags allowed is 15.
    TransactionClientTagResponseDTO:
      type: object
      properties:
        message:
          type: string
        key:
          type: string
    TransactionClientTagsResponseDTO:
      type: object
      properties:
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TransactionClientTagResponseDTO'
    TransactionsReceiptDTO:
      required:
      - document
      - receiptFileName
      - receiptType
      type: object
      properties:
        receiptType:
          type: string
          description: The file type of the uploaded receipt.
          example: image/png
          enum:
          - image/png
          - image/jpg
          - image/jpeg
          - application/pdf
        receiptFileName:
          type: string
          description: The name of the file as uploaded.
          example: receipt_1.png
        document:
          type: string
          description: Contains the receipt as uploaded in Base64 encoded format.
          example: iVBORw0KGgoAAAANSUhEU...<Base64 Encoded Image or Document>
    WalletAddressDTO:
      type: object
      properties:
        addressLine1:
          maxLength: 100
          minLength: 0
          type: string
          description: "This field accepts the line 1 of the customer\u2019s address.\n\
            Maximum character limit: 100."
        addressLine2:
          maxLength: 100
          minLength: 0
          type: string
          description: "This field accepts the line 2 of the customer\u2019s address.\n\
            Maximum character limit: 100."
        city:
          maxLength: 50
          minLength: 0
          type: string
          description: "This field accepts the city of the customer\u2019s address.\n\
            Maximum character limit: 50."
        state:
          type: string
          description: "This field accepts the state of the customer\u2019s address"
        country:
          maxLength: 2
          minLength: 2
          type: string
          description: "This field accepts the 2-letter [ISO Alpha-2 country code](https://nium-documents.s3-eu-west-1.amazonaws.com/spend-documents/Country+Code.pdf)\
            \ denoting the customer\u2019s country."
        postcode:
          pattern: ^(?![- ])([A-Za-z0-9-# ]{3,10})
          type: string
          description: "This field accepts the postal code of the customer\u2019s\
            \ address. The acceptable special characters are:\nHypen(-)\nHash(#)\n\
            Space( )\nMinimum character limit: 3\nMaximum character limit: 10\nExample:\
            \ CM-4165 65"
      description: This object accepts the address detail for the customer.
    WalletIdentificationDocDTO:
      required:
      - identificationType
      type: object
      properties:
        identificationType:
          type: string
          description: This field accepts the type of document being uploaded.
        identificationValue:
          type: string
          description: This field accepts the unique document id being uploaded.
        identificationDocExpiry:
          type: string
          description: This field accepts the expiry date of the document being uploaded.
        identificationDocIssuanceCountry:
          type: string
          description: This field accepts the issuing country of the document being
            uploaded.
        identificationDocHolderName:
          type: string
          description: This field accepts the name of the customer as per the document
            being uploaded.
        identificationDocColor:
          type: string
          description: This field accepts the color of the document being uploaded.
        identificationDocReferenceNumber:
          type: string
          description: This field accepts the reference number of the document being
            uploaded.
        identificationIssuingDate:
          type: string
          description: This field accepts the date of issuance of the document being
            uploaded. The format should be yyyy-mm-dd. Example, 2010-10-10.
        identificationIssuingAuthority:
          type: string
          description: This field accepts the authority issuing the document being
            uploaded.
        identificationDocument:
          type: string
          description: It is an array of actual documents for the data provided in
            previous fields. We support a maximum of 4 files in the array, and the
            total max size should be less than 10 MB. A separate object is needed
            for each document image.
      description: This object contains the document details for which RFI is raised.
    WalletRfiResponseInfo:
      type: object
      properties:
        firstName:
          maxLength: 50
          minLength: 0
          type: string
          description: >-
            This field accepts the first name of the customer.

            Maximum character limit: 50.
        middleName:
          maxLength: 50
          minLength: 0
          type: string
          description: >-
            This field accepts the middle name of the customer.

            Maximum character limit: 50.
        lastName:
          maxLength: 50
          minLength: 0
          type: string
          description: >-
            This field accepts the last name of the customer.

            Maximum character limit: 50.
        bankName:
          type: string
          description: This field accepts the bank name.
        nationality:
          maxLength: 2
          minLength: 2
          type: string
          description: "This field accepts the 2-letter [ISO Alpha-2 country code](https://nium-documents.s3-eu-west-1.amazonaws.com/spend-documents/Country+Code.pdf)\
            \ denoting the customer\u2019s citizenship."
        dateOfBirth:
          pattern: '[0-9]{4}-(0[1-9]{1}|1[0-2]{1})-(0[1-9]{1}|[1-2]{1}[0-9]{1}|(3[0-1]{1}))'
          type: string
          description: This field accepts the date of birth of the customer. The format
            is yyyy-mm-dd.
        address:
          $ref: '#/components/schemas/WalletAddressDTO'
        bankAccountNumber:
          type: string
          description: This field accepts the bank account number.
        companyName:
          type: string
          description: This field accepts the company name of the customer.
        identificationDoc:
          $ref: '#/components/schemas/WalletIdentificationDocDTO'
        additionalInfo:
          type: object
          additionalProperties:
            type: string
            description: This object accepts RFI raised for additional information
              fields.
          description: This object accepts RFI raised for additional information fields.
      description: This object accepts the actual data or document element as requested.
    WalletRfiResponseRequest:
      required:
      - rfiHashId
      - rfiResponseInfo
      type: object
      properties:
        rfiHashId:
          type: string
          description: This field accepts the unique RFI hash ID.
          format: uuid
        rfiResponseInfo:
          $ref: '#/components/schemas/WalletRfiResponseInfo'
      description: This array contains the objects for each RFI being responded to.
        This facilitates responding to multiple RFIs in one-go for the same transaction.
        Refer the example for more details.
    WalletUploadRfiDocumentRequestDTO:
      required:
      - rfiResponseRequest
      type: object
      properties:
        rfiResponseRequest:
          type: array
          description: This array contains the objects for each RFI being responded
            to. This facilitates responding to multiple RFIs in one-go for the same
            transaction. Refer the example for more details.
          items:
            $ref: '#/components/schemas/WalletRfiResponseRequest'
    WalletUploadRfiDetailsResponseDTO:
      type: object
      properties:
        complianceId:
          type: string
        status:
          type: string
        remarks:
          type: string
    AdditionalFeesDTO:
      type: object
      properties:
        feeType:
          type: string
          description: This field accepts the fee type as FIXED (flat) or PERCENTAGE
          example: FIXED
        feeValue:
          type: number
          description: This field accepts the client's fee value to be added on existing
            fee value
          format: double
          example: 2
        fxMarkup:
          maximum: 50
          exclusiveMaximum: false
          type: number
          description: This field accepts the client's additional fx markup rate to
            be added on existing fx markup
          format: double
          example: 0.2
      description: This object accepts the Client's additional fees
    Beneficiary:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          description: This is an unique beneficiary ID which depends upon the destination
            currency and payout method. The beneficiary Id and payout ID can be found
            out using [Beneficiary List](https://docs.nium.com/baas/beneficiary-list)
            API.
          example: 5f7ddd6a56b63400178319c5
    BeneficiaryAddress:
      type: object
      properties:
        type:
          type: string
          description: An possible address types of a beneficiary.
          enum:
          - BILLING
          - MAILING
        line1:
          type: string
          description: A beneficiary's address line1.
        line2:
          type: string
          description: A beneficiary's address line2.
        city:
          type: string
          description: A beneficiary's address city
        state:
          type: string
          description: A beneficiary's address state
        countryCode:
          type: string
          description: A 2-letter ISO country code.
        postalCode:
          type: string
          description: A beneficiary's address postal or zip code.
      description: Addresses of beneficiary.
    BeneficiaryContactNumber:
      type: object
      properties:
        countryCode:
          type: string
          description: A beneficiary's contact country code.
        number:
          type: string
          description: A beneficiary's contact number details.
      description: A beneficiary's contact number details.
    BeneficiaryDetailsV3DTO:
      type: object
      properties:
        name:
          type: string
          description: An official name of the Beneficiary
        relationWithCustomer:
          type: string
          description: A possible values of a beneficiary's type.
        accountType:
          type: string
          description: This field accepts the account type of the beneficiary. The
            account type can be either Individual or Corporate.
          enum:
          - INDIVIDUAL
          - CORPORATE
        entityType:
          type: string
          description: This field accepts the entity type of the beneficiary.
          enum:
          - sole_proprietorship, partnership
          - ' privately_owned_company'
          - ' publicly_owned_company'
          - ' government_owned_entity'
          - ' go'
          - ' financial_institution'
        remitterBeneficiaryRelationship:
          type: string
          description: A relationship between a remitter and beneficiary in the context
            of the transaction.
        addresses:
          type: array
          description: Addresses of beneficiary.
          items:
            $ref: '#/components/schemas/BeneficiaryAddress'
        email:
          $ref: '#/components/schemas/BeneficiaryEmail'
        contactNumber:
          $ref: '#/components/schemas/BeneficiaryContactNumber'
        identification:
          $ref: '#/components/schemas/BeneficiaryIdentification'
        contactName:
          type: string
          description: A beneficiary's contact name.
        dateOfBirth:
          type: string
          description: A beneficiary's date of birth.
        establishmentDate:
          type: string
          description: A beneficiary's establishment date.
        name_local:
          type: string
          description: This field accepts the name of beneficiary in local language
    BeneficiaryEmail:
      type: object
      properties:
        value:
          type: string
          description: A beneficiary's contact email details.
      description: A beneficiary's contact email details.
    BeneficiaryIdentification:
      type: object
      properties:
        type:
          type: string
          description: A beneficiary's identification type.
        value:
          type: string
          description: A beneficiary's identification value.
      description: A beneficiary's identification details.
    BeneficiaryPaymentAccount:
      type: object
      properties:
        accountType:
          type: string
          description: A possible values of a bank account type of a beneficiary.
          enum:
          - CHECKING
          - SAVING
          - MAESTRA
          - CURRENT
        bankName:
          type: string
          description: A bank name of a beneficiary.
        bankCode:
          type: string
          description: A bank account code of a beneficiary.
        accountNumber:
          type: string
          description: A bank swift account number of a beneficiary.
        payoutMethod:
          type: string
          description: A possible values of payment account types of a beneficiary.
        payoutCurrency:
          type: string
          description: A 3-letter ISO-4217 currency code.
        routingCode:
          type: array
          description: A routing code details
          items:
            $ref: '#/components/schemas/RoutingCode'
        owner:
          $ref: '#/components/schemas/BeneficiaryPayoutAccountOwner'
        proxyType:
          type: string
          description: >-
            This field indicates the proxy type sent in the request.
             For SGD-PayNow: The proxy type can be MOBILE, UEN , or NRIC
            For INR-UPI: The proxy type should be VPA
             For MYR-DuitNow: The proxy type can be NRIC, PASSPORT, CORPORATE_REGISTRATION_NUMBER,
            MOBILE, or ARMY_ID Note : This field is mandatory when the payoutMethod
            type is PROXY.
        proxyValue:
          type: string
          description: >-
            This field indicates the proxy value such as VPA, UEN, or mobile number
            etc.

            Note: This field is mandatory when the payoutMethod type is PROXY

            The mobile number should include country code.
    BeneficiaryPayoutAccountAddress:
      type: object
      properties:
        line1:
          type: string
          description: A first line of the address.
        line2:
          type: string
          description: A second line of the address.
        city:
          type: string
          description: An address city.
        state:
          type: string
          description: An address state.
        countryCode:
          type: string
          description: A 2-letter ISO country code.
        postalCode:
          type: string
          description: An address postal or zip code.
    BeneficiaryPayoutAccountOwner:
      type: object
      properties:
        name:
          type: string
        address:
          $ref: '#/components/schemas/BeneficiaryPayoutAccountAddress'
        identification:
          $ref: '#/components/schemas/PaymentAccountOwnerIdentification'
      description: A payment account owner PII information.
    BeneficiaryV3DTO:
      type: object
      properties:
        beneficiary:
          $ref: '#/components/schemas/BeneficiaryDetailsV3DTO'
        paymentAccount:
          $ref: '#/components/schemas/BeneficiaryPaymentAccount'
    ChinaPayoutDetailsDTO:
      required:
      - orders
      type: object
      properties:
        orders:
          type: array
          description: This object accepts the order details.
          items:
            $ref: '#/components/schemas/OrderDetailsDTO'
      description: China order-level details
    CorridorDataDTO:
      type: object
      properties:
        cn:
          $ref: '#/components/schemas/ChinaPayoutDetailsDTO'
      description: Corridor specific data
    WalletDeviceDetailsDTO:
      type: object
      properties:
        deviceInfo:
          type: string
          description: This field accepts the details of the device the customer used
            to initate the request.
          example: macOS
        ipAddress:
          type: string
          description: The IP address of the device the customer is using to initate
            the request.
          example: 45.48.241.198
        countryIP:
          type: string
          description: Accepts the country IP address of the device the customer is
            using to initate the request.
          example: 66.249.74.64
        sessionId:
          type: string
          description: The session ID of the instance the customer is initiating.
          example: 40531ac01a6f11edafc28dba55d51275
      description: This object accepts the device and IP details for the transaction.
    Goods:
      required:
      - quantity
      type: object
      properties:
        quantity:
          minimum: 0
          type: integer
          description: Quantity of the particular item which was sold
          format: int32
        category:
          type: string
          description: Category of the goods which was sold
        name:
          type: string
          description: Name of the goods which was sold
      description: This object accepts the goods details
    Logistics:
      type: object
      properties:
        companyName:
          type: string
          description: Name of Logistics company used to ship goods. Required only
            for goods trade.
        trackingNumber:
          type: string
          description: Tracking number used to ship goods. Required only for goods
            trade.
      description: This object accepts the logistics details
    N1PaymentAccountDTO:
      required:
      - paymentAccountId
      type: object
      properties:
        paymentAccountId:
          type: string
          description: This is an unique beneficiary's payment account identifier.
          format: uuid
          example: 6964e6d3-df97-414f-bb39-ff2243ae990a
    Order:
      required:
      - amount
      - commodity
      - number
      - time
      type: object
      properties:
        number:
          type: string
          description: Order number of the sale done by the seller/marketplace
        amount:
          type: number
          description: Amount of the order of the sale done by the seller/marketplace
          format: double
        time:
          pattern: ^\d{4}/(0[1-9]|1[0-2])/(0[1-9]|[12]\d|3[01])\s([01]\d|2[0-3]):[0-5]\d:[0-5]\d$
          type: string
          description: Date and time the sale done by the seller/marketplace
        commodity:
          type: string
          description: Different based on purpose code.
        description:
          type: string
          description: Order description
      description: This object accepts the order
    OrderDetailsDTO:
      required:
      - goods
      - order
      - seller
      type: object
      properties:
        order:
          $ref: '#/components/schemas/Order'
        goods:
          $ref: '#/components/schemas/Goods'
        logistics:
          $ref: '#/components/schemas/Logistics'
        seller:
          $ref: '#/components/schemas/Seller'
        recipient:
          $ref: '#/components/schemas/Recipient'
        payer:
          $ref: '#/components/schemas/Payer'
        trade:
          $ref: '#/components/schemas/Trade'
      description: Order Details
    Payer:
      type: object
      properties:
        name:
          type: string
          description: Field for payer name already exists. Both Chinese and English
            to be supported. Name of the buyer
        bankAccountNumber:
          type: string
          description: Field for payer bank account number already exists
        bankName:
          type: string
          description: Field for payer bank name already exists
      description: This object accepts the payer details
    PaymentAccountOwnerIdentification:
      type: object
      properties:
        type:
          type: string
        value:
          type: string
    Payout:
      type: object
      properties:
        swiftFeeType:
          type: string
          description: >-
            This field accepts the swift fee type and defines who will bear the SWIFT
            charges for the given transaction. Clients can send any of the below values
            basis which, they will be charged for the SWIFT transaction. In case this
            field is absent SHA will be applied by default.


            OUR - SWIFT charges borne by the customer

            SHA - SWIFT charges shared by the customer and beneficiary


            Note: Clients should make sure that fee template is configured for each
            of the swift fee type. To know if the template is configured, clients
            should call [Fee Details](/apis/reference/feedetails) API
          example: OUR
          enum:
          - OUR
          - SHA
        scheduledPayoutDate:
          type: string
          description: This field accepts scheduled payout date in yyyy-MM-dd format
          example: '2022-11-29'
        tradeOrderID:
          type: string
          description: This field should denote the invoice number relevant to the
            transaction
          example: TR012345
        serviceTime:
          type: string
          description: This field should denote the date of providing of service/export
            in yyyy-MM-dd format
          example: '2022-11-29'
        preScreening:
          type: boolean
          description: This field indicates if compliance checks are to be done at
            the time of payout creation. This field is applicable only for scheduled
            and Post-Funded payouts.
          example: false
        auditId:
          type: integer
          description: >-
            The audit Id must be taken from [Exchange Rate Lock and Hold](https://docs.nium.com/baas/exchange-rate-lock-and-hold)
            API.

            Note: This field name can also be passed as audit_id.
          format: int64
          example: 112
        sourceAmount:
          type: number
          description: >-
            This field accepts the source amount for remittance. Either the source
            or the destination amount is mandatory.


            Allowed decimal limit is 2.

            Note: This field name can also be passed as source_amount.
          format: double
          example: 100
        sourceCurrency:
          type: string
          description: >-
            This field accepts the source currency for remittance.

            Note: This field name can also be passed as source_currency.
          example: INR
        destinationAmount:
          type: number
          description: >-
            This field accepts the destination amount for remittance. Either the source
            or the destination amount is mandatory.


            Allowed decimal limit is 2.

            Note: This field name can also be passed as destination_amount.
          format: double
          example: 0
      description: This object accepts the payout details.
    Preferences:
      type: object
      properties:
        payoutRail:
          type: array
          description: This field is an array that holds payout rail.
          example: us_ach
          items:
            type: string
            description: This field is an array that holds payout rail.
            example: us_ach
            enum:
            - us_ach
            - us_fedwire
            - ca_eft
            - ca_interac
          enum:
          - us_ach
          - us_fedwire
          - ca_eft
          - ca_interac
      description: This Object accepts payout rail details.
    Recipient:
      type: object
      properties:
        phoneNumber:
          type: string
          description: Beneficiary phone number field can be used. No additional field
            is required
      description: This object accepts the recipient details
    RemittanceTransactionsRequestDTO:
      required:
      - beneficiary
      - payout
      - purposeCode
      - sourceOfFunds
      type: object
      properties:
        beneficiary:
          type: object
          description: This object will accept the beneficiary details.
          oneOf:
          - $ref: '#/components/schemas/Beneficiary'
          - $ref: '#/components/schemas/BeneficiaryV3DTO'
          - $ref: '#/components/schemas/N1PaymentAccountDTO'
        payout:
          $ref: '#/components/schemas/Payout'
        customerComments:
          maxLength: 512
          minLength: 0
          type: string
          description: >-
            This field is used to add any customer comments.


            Maximum character limit is 512.


            Note: Special characters are not allowed in this field.
          example: Transfer to family
        purposeCode:
          type: string
          description: "This field accepts the purpose code for the payment. Refer\
            \ to the [Glossary of Purpose Codes](/docs/purpose-of-transfer-codes)\
            \ to identify the correct value to be provided.\n\nIf purpose code value\
            \ is not passed then the default value will be IR01802 (Advertising &\
            \ Public relations-related expenses).\n\nPurpose Code - Description\n\
            IR001         - Transfer to own account\nIR002         - Family Maintenance\n\
            IR003         - Education-related student expenses\nIR004         - Medical\
            \ Treatment\nIR005         - Hotel Accommodation\nIR006         - Travel\n\
            IR007         - Utility Bills\nIR008         - Repayment of Loans\nIR009\
            \         - Tax Payment\nIR010         - Purchase of Residential Property\n\
            IR011         - Payment of Property Rental\nIR012         - Insurance\
            \ Premium\nIR013         - Product indemnity insurance\nIR014        \
            \ - Insurance Claims Payment\nIR015         - Mutual Fund Investment\n\
            IR016         - Investment in Shares\nIR017         - Donations\nIR01801\
            \       - Information Service Charges\nIR01802       - Advertising & Public\
            \ relations-related expenses\nIR01803       - Royalty fees, trademark\
            \ fees, patent fees, and copyright fees\nIR01804       - Fees for brokers,\
            \ front end fee, commitment fee, guarantee fee and custodian fee\nIR01805\
            \       - Fees for advisors, technical assistance, and academic knowledge,\
            \ including remuneration for specialists\nIR01806       - Representative\
            \ office expenses\nIR01807       - Construction costs/expenses\nIR01808\
            \       - Transportation fees for goods\nIR01809       - For payment of\
            \ exported goods\nIR01810       - Delivery fees for goods\nIR01811\t \
            \     - General Goods Trades - Offline trade"
          example: IR01802
        deviceDetails:
          $ref: '#/components/schemas/WalletDeviceDetailsDTO'
        authenticationCode:
          type: string
          description: >-
            This field accepts the authentication code generated as part of SCA (Strong
            Customer Authentication).


            Note: Either exemption code or authentication is expected if the program's
            regulatory region is UK or EU. This field does not accept a value for
            any other region.
        exemptionCode:
          type: string
          description: >-
            This field accepts the reason code for the exemption provided as part
            of SCA (Strong Customer Authentication). This must be 2 character string
            and the valid values are as following:

            01 - Trusted Beneficiary

            03 - Recurring Transactions

            04 - Payment to Self

            Note: Exemption code is expected if authenticationCode is not provided
            and regulatory region is UK or EU.
          example: 01 - Trusted Beneficiary
          enum:
          - e01
          - e02
          - e03
          - e04
          - '01'
          - '02'
          - '03'
          - '04'
        sourceOfFunds:
          type: string
          description: >-
            This field accepts the source of funds. The possible values are:

            Salary

            Personal Savings

            Personal Wealth

            Retirement Funds

            Business Owner/Shareholder

            Loan Facility

            Personal Account

            Corporate Account
          example: Business Owner/Shareholder
          enum:
          - Salary
          - Personal Savings
          - Personal Wealth
          - Retirement Funds
          - Business Owner/Shareholder
          - Loan Facility
          - Personal Account
          - Corporate Account
        additionalFees:
          $ref: '#/components/schemas/AdditionalFeesDTO'
        remitter:
          $ref: '#/components/schemas/RemitterRequestDTO'
        ownPayment:
          type: boolean
          description: >-
            This field applies only to licensed financial institutions. Boolean value
            'false' indicates an on-behalf payout request or 'true' indicates a payout
            executed by the Financial Institution itself.

            If the field is absent from the request, the default flag is set to 'false'.
            A valid remitter object is required to be passed for on-behalf payout.
          example: true
        tags:
          maxItems: 15
          minItems: 0
          type: array
          description: >-
            This is an array which accepts custom tags & values.

            Maximum 15 key-value pairs can be sent in tags.
          items:
            $ref: '#/components/schemas/ClientCustomTagDTO'
        beneficiaryIntermediaryBankCode:
          type: string
          description: "The bank code of a correspondent bank to route SWIFT payments\
            \ through. \nUse this field if you prefer to specify a bank instead of\
            \ using Nium's automatic routing."
        preferences:
          $ref: '#/components/schemas/Preferences'
        externalId:
          pattern: ^(?!-)(?!.*--)(?!.*-$)[A-Za-z0-9-]{1,36}$
          type: string
          description: >-
            Optional user-defined ID for tracking requests or transactions.
              - Must be 1-36 characters, using only letters, numbers, and hyphens.
              - Cannot start or end with a hyphen or contain consecutive hyphens.
        corridorData:
          $ref: '#/components/schemas/CorridorDataDTO'
    RemitterRequestDTO:
      required:
      - accountType
      - countryCode
      - identificationNumber
      - identificationType
      - name
      type: object
      properties:
        name:
          type: string
          description: This field accepts the name of the remitter.
        bankAccountNumber:
          type: string
          description: This field accepts the account number of the Remitter.
        accountType:
          type: string
          description: This field accepts the Remitter's account type as INDIVIDUAL
            or CORPORATE
          enum:
          - INDIVIDUAL
          - CORPORATE
        contactNumber:
          type: string
          description: This field accepts the Remitter's contact number.
        dob:
          type: string
          description: This field accepts Remitter's birth date.
        address:
          type: string
          description: This field accepts address for Remitter's place of residence.
        city:
          type: string
          description: This field accepts the city for Remitter's place of residence.
        postcode:
          type: string
          description: This field accepts the postcode  for Remitter's place of residence.
        state:
          type: string
          description: This field accepts the state  for Remitter's place of residence.
        countryCode:
          type: string
          description: This field accepts the country of residence for the remitter.
        nationality:
          type: string
          description: This field accepts Remitter's nationality.
        identificationType:
          type: string
          description: This field accepts the ID document type of the remitter e.g.
            Passport, National_ID etc..
        identificationNumber:
          type: string
          description: ID number of the selected identificationType.
        placeOfBirth:
          type: string
          description: This field accepts Remitter's place of birth.
        industryType:
          type: string
          description: This field accepts industry type associated with the remitter.
        originatingFIName:
          type: string
          description: The name of the financial institution where the request was
            initiated. Typically applicable for requests that don't originate from
            a financial institution that is a direct customer of Nium.
        idIssueDate:
          pattern: '[0-9]{4}[-,\/](0[1-9]{1}|1[0-2]{1})[-,\/](0[1-9]{1}|[1-2]{1}[0-9]{1}|(3[0-1]{1}))|null'
          type: string
          description: The date the identification document was issued.
        idExpiryDate:
          pattern: '[0-9]{4}[-,\/](0[1-9]{1}|1[0-2]{1})[-,\/](0[1-9]{1}|[1-2]{1}[0-9]{1}|(3[0-1]{1}))|null'
          type: string
          description: The expiration date of the identification document.
        originatingFICity:
          type: string
          description: The city of the financial institution where the request was
            initiated.
        originatingFICountry:
          type: string
          description: The country of the financial institution where the request
            was initiated.
      description: This object accepts the Remitter details while doing on-behalf
        payouts. This object applies only to licensed financial institutions.
    RoutingCode:
      type: object
      properties:
        type:
          type: string
          description: A routing code type
        value:
          type: string
          description: A routing code value
      description: A routing code details
    Seller:
      required:
      - identificationNumber
      - name
      type: object
      properties:
        name:
          type: string
          description: To be passed if seller is different than final beneficiary.
            If it is the same, beneficiary name field will be used
        identificationNumber:
          type: string
          description: To be passed if seller is different than final beneficiary.
            If it is the same, beneficiary name field will be used
        website:
          type: string
          description: Website of the seller or marketplace where the sale of goods
            or services was done
        bankAccountNumber:
          type: string
          description: Currency will be passed in the beneficiary account number field
        id:
          type: string
          description: NA
      description: This object accepts the seller details
    Trade:
      type: object
      properties:
        type:
          type: string
          description: Will be derived from Remit Purpose Code
        remarks:
          type: string
        declarationMode:
          type: string
        mode:
          type: string
        transactionDetails:
          type: string
      description: This object accepts the trade details
    CancelledRemittanceResponseDTO:
      type: object
      properties:
        message:
          type: string
          description: This field will return a success message if the remittance
            gets cancelled successfully.
          example: Transaction Cancelled Successfully
        systemReferenceNumber:
          type: string
          description: This is a unique system reference number assigned to the transaction.
          example: RT6431795378
    WalletRefundRequestDTO:
      required:
      - amount
      - currencyCode
      - refundMode
      type: object
      properties:
        currencyCode:
          maxLength: 3
          minLength: 3
          pattern: ^(?![-])([A-Z]{3})
          type: string
          description: This field contains the 3-letter [ISO-4217 currency code](/docs/currency-and-country-codes)
            for the amount
          example: SGD
        amount:
          type: number
          description: An amount to be transferred.
          format: double
          example: 10
        refundMode:
          type: string
          description: The mode of refund. CASH is the only allowed mode of refund
            for this request.
          example: CASH
          enum:
          - CASH
          - BANK_TRANSFER
        pocketName:
          type: string
          description: This is the name of the pocket defined under base currency.
          example: MEAL
        comments:
          maxLength: 512
          minLength: 0
          type: string
          description: This field is for an instruction or a message to support personnel.
          example: An instruction/message to support personnel
        bankName:
          type: string
          description: This field is needed in case of BANK_TRANSFER to specify the
            bank name for the receiver.
        accountNumber:
          type: string
          description: This field is needed in case of BANK_TRANSFER to specify the
            account number of the receiver.
        bankCode:
          type: string
          description: This field is needed in case of BANK_TRANSFER to specify the
            bank code for the receiver.
        accountName:
          type: string
          description: This field is needed in case of BANK_TRANSFER to specify the
            account holder name.
    ApiResponseWalletRefundResponseDTO:
      type: object
      properties:
        status:
          type: string
          description: This field signifies if the request was successful or has an
            error.
          example: OK
          enum:
          - 200 OK
          - 400 BAD_REQUEST
          - 403 FORBIDDEN
          - 404 NOT_FOUND
          - 500 INTERNAL_SERVER_ERROR
          - 502 BAD_GATEWAY
          - 503 SERVICE_UNAVAILABLE
        message:
          type: string
          description: This field will return the response message.
          example: Success
        code:
          type: string
          description: This field will return the HTTP status code with its interpretation.
          example: 200 OK
        body:
          type: string
          description: This field will return the response message from the server.
          example: Success
    BeneficialOwnerDetailsDTO:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        dateOfBirth:
          type: string
        address:
          $ref: '#/components/schemas/WalletAddressDTO'
        identificationNumber:
          type: string
    CorporateDTO:
      type: object
      properties:
        businessName:
          type: string
        registrationDate:
          type: string
        identificationType:
          type: string
          enum:
          - BUSINESS_REGISTRATION_CERTIFICATE
        identificationNumber:
          type: string
        identificationDocIssuanceCountry:
          type: string
        registeredAddress:
          $ref: '#/components/schemas/WalletAddressDTO'
        businessAddress:
          $ref: '#/components/schemas/WalletAddressDTO'
        beneficialOwnerDetails:
          $ref: '#/components/schemas/BeneficialOwnerDetailsDTO'
    CustomerDetailDTO:
      type: object
      properties:
        entityType:
          type: string
          enum:
          - INDIVIDUAL
          - CORPORATE
        corporate:
          $ref: '#/components/schemas/CorporateDTO'
        individual:
          $ref: '#/components/schemas/IndividualDTO'
      description: This object accepts customer details while assigning payment ID.
        This fields is conditional based on the Clients, who intends to leverage this
        API to request for VAN allocation without onboarding
    IndividualDTO:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        identificationType:
          type: string
          enum:
          - PASSPORT_NO
          - NATIONAL_ID
        identificationNumber:
          type: string
        identificationDocIssuanceCountry:
          type: string
        dateOfBirth:
          type: string
        address:
          $ref: '#/components/schemas/WalletAddressDTO'
        nationality:
          type: string
        gender:
          type: string
    PaymentIdRequestDTO2:
      required:
      - bankName
      - currencyCode
      type: object
      properties:
        currencyCode:
          type: string
          description: The 3-letter [ISO-4217 currency code](/docs/currency-and-country-codes)
            of the payment.
        bankName:
          type: string
          description: The name of the bank which has issued the account linked to
            this account.
        tags:
          type: object
          description: >-
            Use this field to create and include tags for your future reference. Accepts
            client defined key-value pairs.

            The maximum number of tags allowed is 15.
        accountCategory:
          type: string
          description: The category the virtual account was assigned to.
          enum:
          - SELF_FUNDING_ACCOUNT
          - COLLECTION_ACCOUNT
          - 'Null'
        customerDetails:
          $ref: '#/components/schemas/CustomerDetailDTO'
    PaymentIdResponseDTO2:
      type: object
      properties:
        bankName:
          type: string
        currencyCode:
          type: string
        uniquePaymentId:
          type: string
        uniquePayerId:
          type: string
    PaymentIdTagRequestDTO:
      required:
      - currencyCode
      - tags
      - uniquePaymentId
      type: object
      properties:
        uniquePaymentId:
          type: string
          description: The unique virtual account assigned to the customer.
        currencyCode:
          type: string
          description: The 3-letter [ISO-4217 currency code](/docs/currency-and-country-codes).
        tags:
          type: object
          description: >-
            Use this field to create and include tags for your future reference. Accepts
            client defined key-value pairs.

            The maximum number of tags allowed is 15.
    PaymentIdCientTagsResponseDTO:
      type: object
      properties:
        tags:
          type: array
          items:
            $ref: '#/components/schemas/PaymentIdClientTagResponseDTO'
    PaymentIdClientTagResponseDTO:
      type: object
      properties:
        message:
          type: string
        key:
          type: string
    P2PTransferDTO:
      required:
      - amount
      - currencyCode
      - destinationWalletHashId
      type: object
      properties:
        amount:
          type: number
          description: The amount in the destination currency to transfer.
          format: double
          example: 50
        currencyCode:
          maxLength: 3
          minLength: 3
          type: string
          description: Accepts the 3-letter [ISO-4217 currency code](/docs/currency-and-country-codes)
            for the amount.
          example: SGD
        destinationWalletHashId:
          type: string
          description: The wallet hash Id under the same client which will receive
            the funds.
          example: c69f684f-a306-4c4a-8daa-1e91ce7c85f8
        customerComments:
          maxLength: 512
          minLength: 0
          type: string
          description: >-
            Accepts customer comments for the P2P transfer.

            Maximum character limit is 512
          example: Paid for lunch
        authenticationCode:
          type: string
          description: >-
            Accepts the authentication code generated as part of SCA (Strong Customer
            Authentication).

            Note: Authentication code is expected if regulatory region is UK or EU.
          example: authCode
        exemptionCode:
          type: string
          description: >-
            Accepts the reason code for the exemption provided as part of SCA (Strong
            Customer Authentication), which can be one of the following values:

            01 - Trusted Beneficiary

            02 - Low Value Transaction

            03 - Recurring Transactions

            04 - Payment to Self


            Note: Exemption code is expected if regulatory region is UK or EU
          example: '01'
        deviceInfo:
          type: string
        ipAddress:
          type: string
        countryIP:
          type: string
        sessionId:
          type: string
    P2PTransferResponse:
      type: object
      properties:
        status:
          type: string
          description: The status of the transfer.
          example: APPROVED
        retrievalReferenceNumber:
          type: string
          description: Unique auth code generated for the transaction by the card
            issuance platform. This field will be deprecated in future. Clients should
            use `systemReferenceNumber` instead.
          example: FT6449832977
        systemReferenceNumber:
          type: string
          description: The transaction reference number generated by the card issuance
            platform.
          example: FT6449832977
        success:
          type: boolean
          description: Details if the transfer was successful. or not.
          example: true
        message:
          type: string
          description: Provides more details about the returned error. Returns null
            is there are no errors.
          example: 'null'
    CustomFeeRequestDTO:
      required:
      - amount
      - currency
      - feeName
      type: object
      properties:
        currency:
          maxLength: 3
          minLength: 3
          type: string
          description: This field accepts the 3-letter ISO-4217 currency code for
            the currency of the fee to be charged (supported for any currencies enabled
            in the Customer's wallet)
          example: SGD
        amount:
          type: number
          description: This field accepts the amount to be debited from the Customer's
            wallet.
          format: double
          example: 50
        feeName:
          maxLength: 30
          minLength: 5
          type: string
          description: >-
            This field accepts the name of the fee.

            Number of characters supported: 3 to 50.

            Note: This field only accepts alphanumeric characters with -_.(hyphen,
            underscore, dot, and space)
          example: monthlyCharge_May-2022
        comments:
          maxLength: 255
          minLength: 0
          type: string
          description: >-
            This field accepts any comments for the custom fee to be levied.

            The maximum character limit is 255.
          example: Custom fee comments
        tags:
          maxItems: 15
          minItems: 0
          type: array
          description: >-
            This is an array which accepts Client's custom tags & values.

            Maximum 15 key-value pairs can be sent in tags.
          items:
            $ref: '#/components/schemas/ClientCustomTagDTO'
    CustomFeeResponseDTO:
      type: object
      properties:
        systemReferenceNumber:
          type: string
          description: This field contains the unique system reference number.
        status:
          type: string
          description: This field contains the status such as success if the fee is
            levied successfully.
        message:
          type: string
          description: This field contains further details regarding the status of
            the fee.
    TransactionLimitDTO:
      required:
      - additionalPercentage
      - status
      - type
      - value
      type: object
      properties:
        maskedCardNumber:
          type: string
          description: This is the 16-digit masked card number in format 1234-56xx-xxxx-3456.
          example: 9876-50xx-xxxx-4321
        type:
          type: string
          description: >-
            This field accepts the limit type to be set. It can take the following
            values:

            PER_TRANSACTION_AMOUNT_LIMIT

            DAILY_AMOUNT_LIMIT

            MONTHLY_AMOUNT_LIMIT

            LIFETIME_AMOUNT_LIMIT

            LIFETIME_COUNT_LIMIT

            TRANSACTION_DURATION_LIMIT
          example: MONTHLY_AMOUNT_LIMIT
          enum:
          - PER_TRANSACTION_AMOUNT_LIMIT
          - DAILY_AMOUNT_LIMIT
          - MONTHLY_AMOUNT_LIMIT
          - LIFETIME_AMOUNT_LIMIT
          - LIFETIME_COUNT_LIMIT
          - TRANSACTION_DURATION_LIMIT
        value:
          type: string
          description: This field accepts the values for each card-level limits. It
            accepts a date range in the yyyymmdd-yyyymmdd format and UTC +00 time
            zone as a string when type is TRANSACTION_DURATION_LIMIT. Otherwise, it
            accepts the limit value.
          example: '90.0'
        additionalPercentage:
          type: number
          description: This field contains the threshold percentage which is calculated
            on the value as a threshold or margin which is to be allowed for authorization
            when a transaction exceeds the specified limits. The format is Decimal(3,4).
          format: double
          example: 10
        status:
          type: string
          description: 'This field defines whether a particular limit is active or
            not. It can accept one of the two values: Active or Inactive.'
          enum:
          - Active
          - Inactive
        createdAt:
          type: string
          description: This field contains the timestamp of limit generation.
          format: date-time
        updatedAt:
          type: string
          description: This field contains the timestamp of limit updation.
          format: date-time
      description: This array contains an object for each card limit parameter. This
        object contains the below data elements. Please refer the example for exact
        structure.
    TransactionLimitsDTO:
      required:
      - transactionLimits
      type: object
      properties:
        transactionLimits:
          maxItems: 2147483647
          minItems: 1
          type: array
          description: This array contains an object for each card limit parameter.
            This object contains the below data elements. Refer to the example for
            exact structure.
          items:
            $ref: '#/components/schemas/TransactionLimitDTO'
        cardHashId:
          type: string
          description: Unique card identifier generated while new/add-on card issuance.
    ChannelActionRequestDTO:
      required:
      - action
      - channel
      type: object
      properties:
        channel:
          type: string
          description: Channel which needs to be restricted.The valid values are IN_STORE,
            ONLINE, ATM, CROSS_BORDER, MAG_STRIPE.
          example: IN_STORE
          enum:
          - IN_STORE
          - ONLINE
          - ATM
          - CROSS_BORDER
          - MAG_STRIPE
        action:
          type: string
          description: Block or unblock the channel at a card level. Valid values
            are BLOCK and UNBLOCK. One channel can be blocked at a time.
          example: BLOCK
    MCCRestrictionDTO:
      required:
      - description
      - merchantCategoryCodes
      type: object
      properties:
        merchantCategoryCodes:
          maxItems: 2147483647
          minItems: 1
          type: array
          description: This array accepts the list of 4-digit mcc codes.
          example:
          - '3547'
          items:
            type: string
            description: This array accepts the list of 4-digit mcc codes.
            example: '3547'
        description:
          description: This field accepts the description for enabling or disabling
            the mcc restriction.
          example: Restrict Above MCC Codes
          type: string
        status:
          type: string
          description: 'This field accepts the status and values for this field can
            be: Active or Inactive. The default value of this field is Active.'
          example: Active
          enum:
          - Active
          - Inactive
        channelStrategy:
          type: string
          description: >-
            This field accepts the two values:

            WHITE_LIST

            BLACK_LIST

            If this field is not passed then the default value will be WHITE_LIST.
            If the WHITE_LIST is selected along with the Active status, it means mcc
            whitelisting is active for the provided list.
          example: BLACK_LIST
    AccountValidationRequestDTO:
      required:
      - destinationCurrency
      - payoutMethod
      type: object
      properties:
        destinationCurrency:
          type: string
          description: The 3-letter ISO-3 currency code of the bank account.
        destinationCountry:
          type: string
          description: This field accepts the 2-letter [ISO-2 country code](https://docs.nium.com/apis/docs/currency-and-country-codes)
            of the destination country.
        payoutMethod:
          type: string
          description: The different payout modes that'll be used by the beneficiary.
          enum:
          - CARD
          - WALLET
          - CASH
          - SWIFT
          - LOCAL
          - PROXY
          - FEDWIRE
          - CHECK
        proxyType:
          type: string
          description: >
            <p>Specifies the proxy type sent in the payment request:</p>

            <ul>
              <li><strong>SGD-PayNow:</strong> The proxy type can be <code>MOBILE</code>,
            <code>UEN</code>, or <code>NRIC</code></li>
              <li><strong>INR-UPI:</strong> The proxy type is <code>VPA</code></li>
              <li><strong>MYR-DuitNow:</strong> The proxy type can be <code>NRIC</code>,
            <code>PASSPORT</code>, <code>CORPORATE_REGISTRATION_NUMBER</code>, <code>MOBILE</code>,
            or <code>ARMY_ID</code></li> </ul>

            <p><strong>Note:</strong> This field is mandatory when the payout method
            type is <code>PROXY</code>.</p>
        proxyValue:
          type: string
          description: >
            <p>The available proxy values. This can include VPA, UEN, or a mobile
            number.</p>

            <p><strong>Note:</strong> This field is mandatory when the payout method
            type is <code>PROXY</code>.</p>

            <p>Mobile number must include country code.</p>
        bankAccountType:
          type: string
          description: The type of account.
          enum:
          - CHECKING
          - SAVING
          - MAESTRA
          - CURRENT
        bankCode:
          type: string
          description: >-
            The bank code of the beneficiary. E.g: The bank code for England is GB.

            Note: This field is mandatory when the destination country is Pakistan
            (PK).
        accountNumber:
          type: string
          description: The bank account number which needs to be verified.
        beneficiary:
          $ref: '#/components/schemas/BeneficiaryAccountDetailsDTO'
        routingInfo:
          maxItems: 2
          minItems: 0
          type: array
          items:
            $ref: '#/components/schemas/BankRoutingInfo'
    AccountValidationResponseDTO:
      type: object
      properties:
        accountValidationId:
          type: string
          description: The unique ID generated to represent the validation attempt.
        status:
          type: string
          description: >
            Provides the status of the verification request. Available values include:

            <ul>
              <li><code>confirmation_in_progress</code></li>
              <li><code>verified</code></li>
              <li><code>not_verified</code></li>
              <li><code>not_supported</code></li>
            </ul>

            <p>For more information, see <a href="https://docs.nium.com/apis/docs/account-verification">Account
            Verification</a>.</p>
        beneficiary:
          $ref: '#/components/schemas/BeneficiaryDetailsDTO'
    BeneficiaryDetailsDTO:
      type: object
      properties:
        bankAccountName:
          type: string
          description: >
            The name registered with the bank account. (Only supported in some corridors.
            For more information, see <a href="https://docs.nium.com/apis/docs/account-verification">Account
            Verification</a>.)
        nameMatch:
          type: string
          description: Name match status of US account verification
    ClientFeeDetailsResponseDTO:
      type: object
      properties:
        segment:
          type: string
          description: This field contains the fee segment associated with a client.
          example: Silver
        status:
          type: string
          description: >-
            This field contains the status and the possible values are:

            Active

            Inactive
          example: ACTIVE
          enum:
          - Active
          - Inactive
        fees:
          type: array
          description: This is an array which contains the fees details.
          items:
            $ref: '#/components/schemas/FeeResponseDTO'
        default:
          type: boolean
    FeeResponseDTO:
      type: object
      properties:
        feeName:
          type: string
          description: This field contains the name of the fee or markup.
          example: ATM_FEE
          enum:
          - ATM_FEE
          - ECOM_FEE
          - VIR_CARD_FEE
          - PLASTIC_FEE
          - ADDON_CARD_FEE
          - REPLACEMENT_FEE
          - WALLET_REFUND_FEE
          - REMIT_BANK_FEE
          - REMIT_BANK_FEE_SWIFT_BEN
          - REMIT_BANK_FEE_SWIFT_OUR
          - REMIT_BANK_FEE_SWIFT
          - REMIT_CASH_FEE
          - REMIT_WALLET_FEE
          - REMIT_CARD_FEE
          - REMIT_PROXY_FEE
          - REMIT_BANK_FEE_FEDWIRE
          - REMIT_CHECK_FEE
          - REMIT_RETURN_FEE
          - TRANSACTION_MARKUP
          - FX_MARKUP
          - FX_MARKUP_AUTO_SWEEP
          - FX_MARKUP_AUTO_SWEEP_EOD
          - FX_MARKUP_AUTO_SWEEP_RECEIVE
          - FX_MARKUP_LOCKANDHOLD_1
          - INTERNATIONAL_ATM_FEE
          - ATM_DECLINE_FEE
          - NON_ATM_DECLINE_FEE
          - ACCOUNT_OPENING_FEE
          - ACCOUNT_MAINTENANCE_FEE
          - ACCOUNT_INACTIVE_FEE
          - P2P_FEE
          - WALLET_CREDIT_THIRD_PARTY_FEE
          - WALLET_CREDIT_OFFLINE_FEE
          - WALLET_CREDIT_CARD_FEE
          - WALLET_CREDIT_DIRECT_DEBIT_FEE
          - AUTO_SWEEP_FEE_EOD
          - AUTO_SWEEP_FEE_RECEIVE
          - FX_MARKUP_SETTLE_2DAYS
          - FX_MARKUP_SETTLE_NEXTDAY
          - FX_MARKUP_SETTLE_ENDOFDAY
          - FX_MARKUP_SETTLE_IMMEDIATE
          - FX_MARKUP_LOCK_5MINS
          - FX_MARKUP_LOCK_15MINS
          - FX_MARKUP_LOCK_1HOUR
          - FX_MARKUP_LOCK_4HOURS
          - FX_MARKUP_LOCK_8HOURS
          - FX_MARKUP_LOCK_24HOURS
          - FX_MARKUP_CANCELLATION
          - FX_MARKUP_REVERSAL
          - FX_MARKUP_OFFMARKET
          - DOMESTIC_LINKED_CARD_FEE
        authCurrency:
          type: string
          description: This field contains the 3-letter [ISO-4217 authorization currency
            code](/docs/currency-and-country-codes).
          example: SGD
        transactionCurrency:
          type: string
          description: This field contains the 3-letter [ISO-4217 transaction currency
            code](/docs/currency-and-country-codes).
          example: ANY
        feeCurrency:
          type: string
          description: This field contains the 3-letter [ISO-4217 fee currency code](/docs/currency-and-country-codes).
          example: ANY
        feeValue:
          type: number
          description: This field contains the actual value of the fee. It can be
            an amount or percentage.
          format: double
          example: 1.5
        fixed:
          type: boolean
          description: This field determines if the fee is a fixed amount or a percentage.
            It is true for a fixed amount and false for a percentage.
          example: true
        slabFrom:
          type: number
          description: This field contains the starting point of the slab of transaction
            amount on which the fee is applicable.
          format: double
          example: 0
        slabTo:
          type: number
          description: This field contains the ending point of the slab of transaction
            amount on which the fee is applicable.
          format: double
          example: 999999999
        thresholdFeeValue:
          type: number
          description: This field contains the value of the threshold fee. It can
            be fixed or percentage.
          format: double
          example: 9999
        status:
          type: string
          description: >
            This field contains the fee status and the possible values are:

            Active

            Inactive
          example: ACTIVE
      description: This is an array which contains the fees details.
    VirtualAccountRequestDTO:
      type: object
      properties:
        size:
          type: integer
          description: Page size
          format: int32
          example: 20
        page:
          type: integer
          description: Page number
          format: int32
          example: 0
        order:
          type: string
          description: Property order
          example: DESC
          enum:
          - DESC
          - ASC
        property:
          type: string
          description: Property name
          example: createdAt
          enum:
          - createdAt
        startDate:
          type: string
        endDate:
          type: string
        currencyCode:
          type: string
        tagKey:
          type: string
        tagValue:
          type: string
        status:
          type: string
          description: The status of the funding instrument.
          example: Active
          enum:
          - Active
          - Inactive
    VirtualAccountResponseDTO:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        content:
          type: array
          items:
            $ref: '#/components/schemas/WalletPaymentIdsResponseDTO'
    WalletPaymentIdsResponseDTO:
      type: object
      properties:
        currencyCode:
          type: string
        uniquePaymentId:
          type: string
        uniquePayerId:
          type: string
        bankName:
          type: string
        fullBankName:
          type: string
        routingCodeType1:
          type: string
        routingCodeValue1:
          type: string
        routingCodeType2:
          type: string
        routingCodeValue2:
          type: string
        accountName:
          type: string
        accountType:
          type: string
        bankAddress:
          type: string
        accountCategory:
          type: string
          enum:
          - SELF_FUNDING_ACCOUNT
          - COLLECTION_ACCOUNT
        tags:
          type: object
          additionalProperties:
            type: string
        status:
          type: string
          description: The current status of the funding instrument.
          example: Active
          enum:
          - Active
          - Inactive
    WalletRfiAttributeResponse:
      type: object
      properties:
        label:
          type: string
          description: This field contains the field label for the RFI.
        value:
          type: string
          description: This field contains the field value for the RFI. This will
            be used while responding to transaction RFI.
        type:
          type: string
          description: This field contains the field type. The possible values are
            data or document.
      description: This array contains the required data for the RFI.
    TransactionResponseDTO:
      type: object
      properties:
        transactionType:
          type: string
          description: This field contains the transaction can be one of the complete
            list of transactions mentioned in [Transaction Types](https://docs.nium.com/apis/docs/transaction-types).
          enum:
          - Debit
          - Reversal
          - Original_Credit
          - Original_Credit_Reversal
          - Balance_Inquiry
          - Partial_Reversal
          - Reversal_Advice
          - Decline_Advice
          - Incremental_Auth_Reversal
          - Auto_Sweep
          - Auto_Sweep_Payout
          - Auto_Sweep_Payout_Reversal
          - Settlement_Debit
          - Settlement_Credit
          - Settlement_Reversal
          - Settlement_Direct_Reversal
          - Settlement_Direct_Debit
          - Fee_Debit
          - Fee_Reversal
          - Fee_Waiver
          - Client_Prefund
          - Client_Refund
          - Wallet_Refund
          - Wallet_Credit_Mode_Card
          - Wallet_Credit_Mode_Prefund
          - Wallet_Credit_Mode_Prefund_Cross_Currency
          - Wallet_Credit_Mode_Offline
          - Wallet_Credit_Mode_Offline_Cross_Currency
          - Wallet_Credit_Mode_Offline_ThirdParty
          - Wallet_Credit_Mode_Direct_Debit
          - Wallet_Credit_Mode_Direct_Debit_Reversal
          - Customer_Wallet_Credit_Fund_Transfer
          - Customer_Wallet_Debit_Fund_Transfer
          - Wallet_Fund_Transfer
          - Client_Fund_Transfer
          - Wallet_Hold
          - Wallet_Unhold
          - Remittance_Debit
          - Remittance_Debit_External
          - Remittance_Reversal
          - Remittance_Client_Auto_Sweep
          - Remittance_Client_Auto_Sweep_Reversal
          - Remittance_Debit_Prescreening
          - Remittance_Debit_External_Prescreening
          - Remittance_Bene_Microdeposit
          - Remittance_Bene_Microdeposit_Reversal
          - Regulatory_Auto_Sweep
          - Regulatory_Block
          - Regulatory_Block_Release
          - Regulatory_Debit
          - Regulatory_Debit_Reversal
          - Transfer_Local
          - Transfer_Local_Reversal
          - Cashback_Credit
          - Cashback_Credit_Client
          - Chargeback_Credit
          - Customer_Wallet_Debit_Intra_Region
          - Customer_Wallet_Credit_Intra_Region
          - Customer_Wallet_Debit_Cross_Region
          - Customer_Wallet_Credit_Cross_Region
          - Direct_Debit_Payout
          - Direct_Debit_Payout_Reversal
          - Invoicing_Debit
          - NA
        status:
          type: string
          description: >-
            This field contains the status. This field can take the following values:

            Pending: Transaction authorization is awaiting success or failure.

            Approved: Transaction is successfully authorized.

            Rejected: Transaction is rejected due to NIUM risk and compliance policies.

            Declined: Transaction is declined.

            Reversal: Transaction is reversed.

            Blocked: Transaction is blocked
        settlementStatus:
          type: string
          description: >-
            This field contains the settlement status.This field can take the following
            values:

            Unsettled

            Settled
             Released
            Disputed

            DisputeClosed

            Waived
          enum:
          - Unsettled
          - Settled
          - Released
          - Disputed
          - DisputeClosed
          - Waived
        processingCode:
          type: string
          description: This field contains the processing code is a 6 character Visa
            field. Refer to the [link](https://en.wikipedia.org/wiki/ISO_8583#Processing_code)
            for more details on the processing code.
        transactionCurrencyCode:
          type: string
          description: This field contains the 3-letter [ISO-4217 currency code](/docs/currency-and-country-codes)
            for the transaction currency.
        cardTransactionAmount:
          type: number
          description: This field contains the amount of a card transaction.
          format: double
        billingCurrencyCode:
          type: string
          description: This field contains the 3-letter [ISO-4217 currency code](/docs/currency-and-country-codes)
            for the billing currency or base currency
        billingAmount:
          type: number
          description: This field contains the equivalent transaction amount in base
            currency.
          format: double
        billingConversionRate:
          type: string
          description: This field contains the conversion rate of transaction currency
            to billing currency which is present for all card transactions.
        authCurrencyCode:
          type: string
          description: This field contains the 3-letter [ISO-4217 currency code](/docs/currency-and-country-codes)
            of the auth currency, the currency in which amount is deducted from wallet.
        authAmount:
          type: number
          description: This field contains an authorization amount of the transaction.
          format: double
        effectiveAuthAmount:
          type: number
          description: This field contains an effective authorization amount which
            includes fees, markup, etc.
          format: double
        settlementDate:
          type: string
          description: This field contains the settlement date in case of a Settled
            transaction. Otherwise, it is null.
        settlementAmount:
          type: number
          description: This field contains the settlement amount of a transaction.
            This amount is valid only for a settled transaction.
          format: double
        settlementCurrency:
          type: string
        settlementAuthAmount:
          type: number
          description: This field contains the settlement auth amount of a transaction.
            This amount is valid only for a settled transaction.
          format: double
        settlementTransactionAmount:
          type: number
          format: double
        settlementBillingAmount:
          type: number
          format: double
        previousBalance:
          type: number
          description: This field contains the previous balance in the wallet.
          format: double
        currentWithHoldingBalance:
          type: number
          description: This field will be deprecated in the future.
          format: double
        dateOfTransaction:
          type: string
          description: This field contains the date on which the transaction occurred
            in yyyy-MM-dd format.
        localDate:
          type: string
          description: This field contains the local date of the transaction.
        localTime:
          type: string
          description: This field contains the local time of the transaction.
        debit:
          type: boolean
          description: This field contains the flag signifies if the transaction is
            a debit transaction.
        clientHashId:
          type: string
          description: Unique client identifier generated and shared before API handshake.
        customerHashId:
          type: string
          description: This field contains the unique customer identifier generated
            while new customer created.
        childCustomerHashId:
          type: string
          description: Unique ID for an individual customer linked to a parent-level
            corporate customer. Used to associate and track the child customer within
            a corporate customer's program.
        walletHashId:
          type: string
          description: This field contains the unique wallet identifier generated
            while new wallet created.
        cardHashID:
          type: string
          description: This field contains the unique card identifier generated while
            new/add-on card issuance.
        maskedCardNumber:
          type: string
          description: This field contains the 16-digit masked card number in format
            1234-56xx-xxxx-3456.
        mcc:
          type: string
          description: This field contains the four-digit Merchant Category Code.
        merchantID:
          type: string
          description: This field contains the unique merchant identifier.
        merchantName:
          type: string
          description: This field contains the name of the merchant.
        merchantCity:
          type: string
          description: This field contains the city name of the merchant.
        merchantCountry:
          type: string
          description: This field contains the country of the merchant.
        merchantCategory:
          type: string
          description: This field contains the merchant category such as Airlines,
            Hotels, Shopping, etc.
        merchantNameLocation:
          type: string
          description: This field contains the full merchant name and location data
            as received from network.
        acquirerCountryCode:
          type: string
          description: This field contains the country code of the acquirer.
        acquiringInstitutionCode:
          type: string
          description: This field contains the acquiring institution code that identifies
            the financial institution acting as the acquirer of the transaction.
        posEntryMode:
          type: string
          description: "This field contains the pos entry code that identifies the\
            \ actual method used to capture the account number and expiration date,\
            \ and the PIN capture capability of the terminal.This is a fixed\u2011\
            length field with three subfields, as follows:\n1. Positions 1\u20112\
            \ - PAN and Date Entry Mode: This is a two\u2011digit code that identifies\
            \ the actual method used at the point of service to enter the cardholder\
            \ account number and card expiry date.\n00 - Unknown\n01 - Keyed transaction\n\
            02 - Magnetic stripe read\n05 - Chip was read at the terminal\n07 - Contactless\n\
            90 - Magnetic stripe read and transmitted unaltered\n91 - Contactless\
            \ - Magnetic stripe data (MSD) transmitted\n2. Position 3 - PIN Entry\
            \ Capability: This is a one\u2011digit code that identifies the capability\
            \ of the authorization terminal, if one was used, to capture PINs. This\
            \ coding does not necessarily mean that a PIN was entered or is included\
            \ in this message:\n0 - Unknown\n1 - Terminal can accept PINs\n2 - Terminal\
            \ cannot accept PINs\n3 - mPOS terminal can accept software-based PINs\
            \ (Mastercard only)\n3. Position 4 - Unused(filler): This is one digit\
            \ of filler, which must be zero.\n"
        posConditionCode:
          type: string
          description: >-
            This field contains the pos condition code that describes the condition
            under which the transaction takes place at the point of service.

            00 - Normal transaction

            01 - Cardholder not present

            03 - Merchant suspicious

            08 - Mail/telephone order

            51 - Account Verification Message(AVM)

            55 - ICC Capable Branch ATM

            59 - Electronic Commerce

            90 - Recurring Payment
        posEntryCapabilityCode:
          type: string
          description: >
            This field provides information about the terminal used at the point of
            service.Type of terminal field values include:0 - Unspecified

            2 - Unattended terminal(customer-operated)

            4 - Electronic cash register

            7 - Telephone device

            8 - MCAS device

            9 - Mobile acceptance solution(mPOS)

            Capability of terminal field values include:

            0 - Unspecified

            1 - Terminal not used

            2 - Magnetic stripe read capability

            3 - Bar code read capability

            4 - OCR read capability

            5 - Integrated circuit card read capability

            9 - Terminal does not read card data
        billingReplacementAmount:
          type: string
          description: The corrected amount of a transaction in a partial reversal.
            This is defined by ISO-8583 as a fixed length field with four subfields,
            but only the first subfield is used. A 12 position field for the corrected,
            billing amount of a customer's transaction, in the billing currency. The
            field is right justified, with lead zero fill.
        transactionReplacementAmount:
          type: string
          description: The corrected amount of a transaction in a partial reversal.
            This is defined by ISO-8583 as a fixed length field with four subfields,
            but only the first subfield is used. A 12 position field for the corrected,
            actual amount of a customer's transaction, in the transaction currency.
            The field is right justified, with lead zero fill.
        authCode:
          type: string
          description: This field contains the authorization code.
        originalAuthorizationCode:
          type: string
          description: This field contains the authorization code of the original
            transaction in case of reversal.
        systemTraceAuditNumber:
          type: string
          description: This field contains the system trace audit number assigned
            to uniquely identify a transaction.
        retrievalReferenceNumber:
          type: string
          description: This field contains the 12 digit number that is used with other
            data elements as a key to identify and track all messages related to a
            given customer transaction.
        terminalID:
          type: string
          description: This field contains the unique terminal ID.
        rhaTransactionId:
          type: string
          description: This field contains the transaction Id for an RHA client.
        partnerReferenceNumber:
          type: string
          description: This field contains the provided by an RHA client in response
            to an authorization.
        comments:
          type: string
          description: This field contains the auto-generated comments with details
            on the transactions such as reason for transaction decline.
        paymentInstrumentHashId:
          type: string
          description: This field contains the unique payment instrument identifier
            generated for the linked card.
        merchantLatitude:
          type: string
          description: This field contains the latitude of the merchant captured during
            geo-tagging.
        merchantLongitude:
          type: string
          description: This field contains the longitude of the merchant captured
            during geo-tagging.
        merchantTaggedName:
          type: string
          description: This field contains the tagged name of the merchant.
        merchantZoomIndex:
          type: string
          description: This field contains the merchant map zoom index.
        businessTransaction:
          type: boolean
          description: This flag is used to mark or unmark a transaction as a business
            transaction.
        receiptType:
          type: string
          description: "This field contains the receipt type.Expected values are as\
            \ follows: \nimage/png\nimage/jpg\nimage/jpeg\napplication/pdf"
        receiptFileName:
          type: string
          description: This field contains the name of the receipt file.
        externalId:
          type: string
          description: >-
            Optional user-defined ID for tracking requests or transactions.
              - Must be 1-36 characters, using only letters, numbers, and hyphens.
              - Cannot start or end with a hyphen or contain consecutive hyphens.
        labels:
          type: object
          additionalProperties:
            type: string
            description: This object will contain different key-value pairs depending
              upon the type of transaction. Essentially, this object will contain
              different labels based on the type of transaction. The list will change
              over time depending on different use-cases. Please refer to the [Glossary
              of Labels:](https://docs.nium.com/baas/get-transactions#glossary-of-labels)
              complete list.
          description: This object will contain different key-value pairs depending
            upon the type of transaction. Essentially, this object will contain different
            labels based on the type of transaction. The list will change over time
            depending on different use-cases. Refer to the [Glossary of Labels](/apis/docs/transaction-response-labels).
        tags:
          type: object
          additionalProperties:
            type: string
            description: This object contains the user defined key-value pairs provided
              by the client.
          description: This object contains the user defined key-value pairs provided
            by the client.
        rfiDetails:
          type: array
          description: This field is an array that holds RFI details.
          items:
            $ref: '#/components/schemas/TransactionRfiDetailsResponse'
        complianceStatus:
          type: string
          description: >-
            The compliance status of the transactions. Available values include:
              - **PENDING**: The transaction is under compliance review and may require
            additional checks before it can proceed.
              - **RFI_REQUESTED**: Additional information has been requested to complete
            the compliance review of this transaction.
              - **CLEAR**: The transaction has passed all compliance checks and can
            proceed to the next step in processing.
              - **REJECTED**: The transaction did not meet compliance requirements
            and cannot proceed.
          enum:
          - NONE
          - IN_PROGRESS
          - ACTION_REQUIRED
          - RFI_REQUESTED
          - RFI_RESPONDED
          - COMPLETED
          - ERROR
          - REJECT
        createdAt:
          type: string
          description: This field contains the date and time of transaction when created
            in UTC.
          format: date-time
        updatedAt:
          type: string
          description: This field contains the date and time when the transaction
            was last updated in UTC.
          format: date-time
    TransactionRfiDetailsResponse:
      type: object
      properties:
        rfiHashId:
          type: string
          description: This field contains the unique RFI hash ID.
        rfiId:
          type: string
          description: This field contains the unique identifier for group of RFI
            raised for the customer transaction.
        rfiStatus:
          type: string
          description: This field contains Transaction RFI status.
        description:
          description: This field contains the description of the RFI.
          type: string
        mandatory:
          type: boolean
          description: This flag signifies if the RFI is mandatory or not.
        type:
          type: string
          description: This field contains the type of RFI. It could be document or
            data.
        documentType:
          type: string
          description: This field contains the type of the document if applicable,
            for example, POI, POA, etc.
        remarks:
          type: string
          description: This field contains the remarks provided while raising the
            RFI.
        transactionEntityType:
          type: string
          description: >-
            This field contains the type of the transaction entity. The possible values
            are:

            DEBTOR

            CREDITOR
        requiredData:
          type: array
          description: This array contains the required data for the RFI.
          items:
            $ref: '#/components/schemas/WalletRfiAttributeResponse'
      description: This field is an array that holds RFI details.
    PurposeCodeResponseDTO:
      type: object
      properties:
        purposeCode:
          type: string
          description: This field contains the purpose code for the remittance transaction.
            Refer to the [Glossary of Purpose Codes](/docs/purpose-of-transfer-codes)
            for the list of possible values.
          example: IR004
        description:
          description: This field contains the description of the purpose of transfer.
          example: Medical Treatment
          type: string
    ClientTransactionsResponseDTO:
      type: object
      properties:
        totalPages:
          type: integer
          description: This field contains the number of pages in response body.
          format: int32
        totalElements:
          type: integer
          description: This field contains the number of elements in the response
            body.
          format: int64
        content:
          type: array
          description: This field contains an array that holds additional data.
          items:
            $ref: '#/components/schemas/TransactionResponseDTO'
    WalletsSearchDTO:
      type: object
      properties:
        walletHashId:
          type: string
          description: Unique wallet identifier generated on wallet creation.
          example: c69f684f-a306-4c4a-8daa-1e91ce7c85f8
        tagKey:
          type: string
          description: tagKey defined against wallet.
          example: department
        tagValue:
          type: string
          description: tagValue defined against wallet.
          example: sales
    MerchantCategoryResponseDTO2:
      type: object
      properties:
        mccCode:
          type: string
          description: The four-digit Visa Merchant Category Code.
          example: '5814'
        description:
          description: Description of the MCC.
          example: Ice cream shops, Fast Food Restaurants
          type: string
        merchantCategory:
          type: string
          description: Nium's categorization of the  MCC.
          example: Food n Beverage
      description: The mccData is an array that contains multiple objects. Each object
        is a mccCode for which the pocket has restrictions.
    WalletBalanceResponseDTO:
      type: object
      properties:
        curSymbol:
          type: string
          description: The 3-letter [ISO-4217 currency code](/docs/currency-and-country-codes)
            for the pocket currency.
          example: SGD
        isoCode:
          type: string
          description: The [3-digit ISO numeric code](https://www.currency-iso.org/en/home/tables/table-a1.html)
            for the currency.
          example: '702'
        balance:
          type: number
          description: The available amount in the pocket.
          format: double
          example: 10
        withHoldingBalance:
          type: number
          description: The amount blocked by NIUM.
          format: double
          example: 10
        pocketName:
          type: string
          description: The name of the pocket as defined under base currency.
          example: Food
        mccData:
          type: array
          description: An array that contains multiple objects; each object is a mccCode
            for which the pocket has restrictions.
          items:
            $ref: '#/components/schemas/MerchantCategoryResponseDTO2'
        default:
          type: boolean
    WalletTransactionsResponseDTO:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        content:
          type: array
          items:
            $ref: '#/components/schemas/TransactionResponseDTO'
    CheckDTO:
      type: object
      properties:
        reasonCode:
          type: string
          description: This field contains CHECK reason code.
        statusDescription:
          type: string
          description: This field contains CHECK Status Description for GPI.
        lastUpdatedAt:
          type: string
          description: This field contains CHECK lastUpdatedAt
    GPIResponseDTO:
      type: object
      properties:
        reasonCode:
          type: string
          description: This field contains GPI reason code.
        statusDescription:
          type: string
          description: This field contains GPI Status Description for GPI.
        timestamp:
          type: string
          description: This field contains GPI timestamp
        forwardBankName:
          type: string
          description: This field contains forward Bank Name for GPI
        forwardBankCode:
          type: string
          description: This field contains forward Bank Code for GPI
        remarks:
          type: string
          description: This field contains remarks
    RemittanceEventsResponseDTO2:
      type: object
      properties:
        systemReferenceNumber:
          type: string
        partnerReferenceNumber:
          type: string
        paymentReferenceNumber:
          type: string
        externalId:
          type: string
        estimatedDeliveryTime:
          type: string
        status:
          type: string
        statusDetails:
          type: string
        lastUpdatedAt:
          type: string
          format: date-time
        gpi:
          $ref: '#/components/schemas/GPIResponseDTO'
        check:
          $ref: '#/components/schemas/CheckDTO'
        errorCode:
          type: string
          description: This field contains ISO error code.
        errorReasonCode:
          type: string
          description: This field contains ISO reason code.
        errorDescription:
          type: string
          description: This field contains ISO reason description.
        paymode:
          type: string
          description: This field shows payout mode through which payment is processed.
    FxHoldLockResponseContent:
      type: object
      properties:
        audit_id:
          type: integer
          description: This field contains the audit ID which is generated by NIUM
            as a unique number for internal purpose.
          format: int64
          example: 112
        source_currency:
          type: string
          description: This field contains the 3-letter [ISO-4217 source currency
            code](/docs/currency-and-country-codes) for the source amount.
          example: USD
        destination_currency:
          type: string
          description: This field contains the 3-letter [ISO-4217 destination currency
            code](/docs/currency-and-country-codes) for the destination amount.
          example: INR
        fx_rate:
          type: string
          description: This field contains the real time FX provider rate.
          example: '74.719'
        markup_rate:
          type: string
          description: This field contains the markup rate charged by NIUM.
          example: '0.0'
        ecb_fx_rate:
          type: string
          description: This field contains the ECB exchange rate.
          example: '0.0'
        hold_expiry_at:
          type: string
          description: This field contains the timestamp till which the exchange rate
            will be valid. In other words, the timestamp at which the exchange rate
            held by NIUM shall expire. Format of this field is yyyy-MM-ddTHH:mm:ss.SSSZ.
          example: '2021-07-02T10:43:00.514Z'
        fx_hold_id:
          type: string
          description: This field contains the foreign exchange hold ID.
          example: 472e130b-ed14-4829-9e6d-81a9d8dce72e
        status:
          type: string
          description: This field contains the status of the given audit ID
          example: ACTIVE
        additionalFxMarkup:
          type: string
          description: This field contains the Additional Fx Markup of the given audit
            ID
          example: '0.2'
    TransactionWalletLimitsDTO:
      type: object
      properties:
        transactionWalletLimits:
          type: array
          description: This array contains all the limits applicable for each card.
          items:
            $ref: '#/components/schemas/TransactionLimitsDTO'
    OpenBankingPaymentResponseDTO:
      type: object
      properties:
        systemReferenceNumber:
          type: string
          description: This field contains the unique, system generated reference
            number for the transaction.
          example: 308a4d01-8549-4cbb-b83f-05cd768d606f
        debtorAccount:
          $ref: '#/components/schemas/AccountReference'
        creditorAccount:
          $ref: '#/components/schemas/AccountReference'
        instructedAmount:
          $ref: '#/components/schemas/Amount'
        routingCodeValue:
          type: string
          description: This field contains the BIC routing code for the transaction.
        statementNarrative:
          type: string
          description: This field contains the narrative for the transaction.
        creditorName:
          type: string
          description: This field contains the name of the receiver for this flow.
        comments:
          type: string
          description: This field contains the system-generated comments for the transaction.
        status:
          type: string
          description: >-
            This field contains the status of the transaction. The possible values
            are:

            INITIATED, PENDING, REJECTED, SENT_TO_BANK, PAID, RETURN
          enum:
          - INITIATED
          - PENDING
          - REJECTED
          - SENT_TO_BANK
          - PAID
          - RETURN
    Access:
      type: object
      properties:
        allPsd2:
          type: string
          description: Only "allAccounts" value is admitted.
        availableAccounts:
          type: string
          description: Only "allAccounts" or "allAccountsWithBalances" values are
            admitted
        accounts:
          type: array
          description: This is an array which holds account detail fields.
          items:
            $ref: '#/components/schemas/Account'
        balances:
          type: array
          description: This is an array which holds balance detail fields.
          items:
            $ref: '#/components/schemas/Balance'
        transactions:
          type: array
          description: This is an array which holds transaction detail fields.
          items:
            $ref: '#/components/schemas/Transaction'
      description: This is an object which holds access data fields.
    Account:
      type: object
      properties:
        iban:
          type: string
          description: 'International Bank Account Number (IBAN) of an account, for
            example: "FR7612345987650123456789014".'
        bban:
          type: string
          description: 'Basic Bank Account Number (BBAN) Identifier. This data elements
            is used for payment accounts which have no IBAN, for example: "BARC12345612345678".'
        currency:
          type: string
          description: This field contains the [3-letter ISO-4217 currency code](/docs/currency-and-country-codes).
        maskedPan:
          type: string
          description: 'Primary Account Number (PAN) of a card in a masked form. This
            is used for card account in responses, for example " 1234"The maximum
            length: 35.'
        msisdn:
          type: string
          description: >-
            An alias to access a payment account via a registered mobile phone number.

            The maximum length: 35
        pan:
          type: string
          description: >-
            Primary Account Number (PAN) of a card, can be tokenized by the ASPSP
            due to PCI DSS requirements. This is used for card account in responses.

            The maximum length: 35.
      description: This is an array which holds account detail fields.
    Balance:
      type: object
      properties:
        iban:
          type: string
          description: 'International Bank Account Number (IBAN) of an account balance,
            for example: "FR7612345987650123456789014".'
        bban:
          type: string
          description: Basic Bank Account Number (BBAN) Identifier.
        currency:
          type: string
          description: This field contains the 3-letter [ISO-4217 currency code](/docs/currency-and-country-codes).
        maskedPan:
          type: string
          description: >-
            Primary Account Number (PAN) of a card in a masked form. This is used
            for card account in responses, for example " 1234".

            The maximum length: 35
        msisdn:
          type: string
          description: >-
            An alias to access a payment account via a registered mobile phone number.

            The maximum length: 35
        pan:
          type: string
          description: >-
            Primary Account Number (PAN) of a card, can be tokenized by the ASPSP
            due to PCI DSS requirements. This is used for card account in responses.

            The maximum length: 35
      description: This is an array which holds balance detail fields.
    Consent:
      type: object
      properties:
        consentStatus:
          type: string
          description: Authentication status of the consent.
        frequencyPerDay:
          type: integer
          description: This field indicates the requested maximum frequency for an
            access per day.
          format: int32
        validUntil:
          type: string
          description: This valid date for the requested consent. The content is the
            local ASPSP date in ISODate and the format is 2017-10-30.
        lastActionDate:
          type: string
          description: This date is containing the date of the last action on the
            consent object either through the XS2A interface or the PSU/ASPSP interface
            having an impact on the status.
        recurringIndicator:
          type: boolean
          description: If the consent is for recurring access to the account data
            then the recurringIndicator value will be true or if the consent is for
            one access to the account data then the recurringIndicator value will
            be false.
        access:
          $ref: '#/components/schemas/Access'
        scaStatus:
          $ref: '#/components/schemas/ScaStatus'
      description: This field retrieves the consents details with specified status
        for a specific PSU.
    ConsentDetailsResponse:
      type: object
      properties:
        id:
          type: string
          description: Id of the consent to retrieve.
        consent:
          $ref: '#/components/schemas/Consent'
        payment:
          $ref: '#/components/schemas/Payment'
    Payment:
      type: object
      properties:
        debtorAccount:
          type: string
        debtorCurrency:
          type: string
        instructedAmount:
          type: string
        instructedCurrency:
          type: string
        creditorAccount:
          type: string
        creditorCurrency:
          type: string
        creditorName:
          type: string
    Transaction:
      type: object
      properties:
        iban:
          type: string
          description: 'International Bank Account Number (IBAN) of an account, for
            example: "FR7612345987650123456789014.'
        bban:
          type: string
          description: Basic Bank Account Number (BBAN) Identifier.
        currency:
          type: string
          description: This field contains the 3-letter [ISO-4217 currency code](/docs/currency-and-country-codes).
        maskedPan:
          type: string
          description: >-
            Primary Account Number (PAN) of a card in a masked form. This is used
            for card account in responses, for example "1234".

            The maximum length: 35
        msisdn:
          type: string
          description: >-
            An alias to access a payment account via a registered mobile phone number.

            The maximum length: 35
        pan:
          type: string
          description: >-
            Primary Account Number (PAN) of a card, can be tokenized by the ASPSP
            due to PCI DSS requirements. This is used for card account in responses.

            The maximum length: 35
      description: This is an array which holds transaction detail fields.
    ApiResponseTransactionChannelsResponseDTO:
      type: object
      properties:
        status:
          type: string
          description: This field signifies if the request was successful or has an
            error.
          example: OK
          enum:
          - 200 OK
          - 400 BAD_REQUEST
          - 403 FORBIDDEN
          - 404 NOT_FOUND
          - 500 INTERNAL_SERVER_ERROR
          - 502 BAD_GATEWAY
          - 503 SERVICE_UNAVAILABLE
        message:
          type: string
          description: This field will return the response message.
          example: Success
        code:
          type: string
          description: This field will return the HTTP status code with its interpretation.
          example: 200 OK
        body:
          type: string
          description: This field will return the response message from the server.
          example: Success
    AccountResponseDTO:
      type: object
      properties:
        accountType:
          type: string
          description: This field contains the name of the currency pool, for example,
            "currency pool".
          example: CLIENT_POOL
          enum:
          - NIUM_POOL
          - CLIENT_POOL
          - WALLET_POOL
          - INCOME_POOL
          - EXPENSE_POOL
          - RECEIVABLE_POOL
          - UNSETTLED_POOL
          - PAYABLE_POOL
          - SUSPENSE_POOL
          - HOLD_POOL
          - REMIT_POOL
          - NETWORK_POOL
        currency:
          type: string
          description: This field contains the 3-letter [ISO-4217 currency code](/docs/currency-and-country-codes)
            in which the balance is specified.
          example: '0.0'
        balance:
          type: number
          description: This field contains the available balance in the pool mentioned
            in accountType field.
          format: double
          example: 0
        isDefault:
          type: string
          description: This flag will be true only for base currency and false for
            other currencies.
          example: 'true'
        createdAt:
          type: string
          description: This field contains the date and time of create for an account
            type.
          example: '2020-07-14 05:16:09'
        updatedAt:
          type: string
          description: This field contains the date and time of last update for an
            account type.
          example: '2020-07-14 05:16:09'
    ExchangeRateV2ResponseDto:
      title: ExchangeRateV2ResponseDto
      type: object
      properties:
        destinationAmount:
          type: number
          description: The credited amount.
          format: double
          example: 13.42
        destinationCurrencyCode:
          type: string
          description: This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html)
            for the destination amount.
          example: SGD
        ecbFxRate:
          type: number
          description: >-
            The ecb exchange rate fetched for the conversion.

            This field is only applicable for EU and UK.
          format: double
          example: 1.349
        exchangeRate:
          type: number
          description: The exchange rate fetched for the conversion.
          format: double
          example: 1.349
        expiryDate:
          type: string
          description: Timestamp till which the quoted rate is valid. The timezone
            is UTC +00.
          example: '2021-03-09T06:46:03.000Z'
        markupAmount:
          type: number
          description: In case source or destination amount is provided the markup
            amount will be calculated using markupRate.
          format: double
          example: 0.07
        markupRate:
          type: number
          description: This is the markup rate charged by NIUM.
          format: double
          example: 0.006745
        netExchangeRate:
          type: number
          description: This is exchangeRate subtracted by the markupRate.
          format: double
          example: 1.342255
        quoteId:
          type: string
          description: Unique quote Id for the exchange rate.
          example: f3632302-1d41-4a40-b7a0-4c456dddbd9e
        scalingFactor:
          type: integer
          description: The netExchangeRate should be divided by the scaling factor
            to fetch the actual exchange rate.
          format: int32
          example: 1
        sourceAmount:
          type: number
          description: An amount to be converted.
          format: double
          example: 10
        sourceCurrencyCode:
          type: string
          description: This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html)
            for the source amount.
          example: USD
    ReferenceRateResponseDto:
      title: ReferenceRateResponseDto
      type: object
      properties:
        asOfDate:
          type: string
          description: This field contains the date on which fx rate has to be calculated.
            The timezone is UTC +00.
          example: '2022-03-15T06:46:03.000Z'
        cardScheme:
          type: string
          description: This field contains the card scheme provider name.
          example: VISA
        cardSchemeFxRate:
          type: number
          description: This is the fx rate from cards scheme.
          format: double
          example: 1
        cardSchemeFxRateLastUpdatedAt:
          type: string
          description: Last updated timestamp of card scheme fx rate. The timezone
            is UTC +00.
          example: '2022-03-15T06:46:03.000Z'
        cardSchemeFxRateWithFxMarkup:
          type: number
          description: This is the cards scheme fx rate with fx markup.
          format: double
          example: 1
        cardSchemeMarkupOverEcb:
          type: number
          description: The markup rate over ecb rate. Available for currencies listed
            in [Euro foreign exchange reference rates](https://www.ecb.europa.eu/stats/policy_and_exchange_rates/euro_reference_exchange_rates/html/index.en.html)
          format: double
          example: 0.349
        ecbRate:
          type: number
          description: The ecb exchange rate fetched for the conversion. Available
            for currencies listed in [Euro foreign exchange reference rates](https://www.ecb.europa.eu/stats/policy_and_exchange_rates/euro_reference_exchange_rates/html/index.en.html)
          format: double
          example: 1.349
        ecbRateLastUpdatedAt:
          type: string
          description: Last updated timestamp of ecb rate. The timezone is UTC +00.
            Available for currencies listed in [Euro foreign exchange reference rates](https://www.ecb.europa.eu/stats/policy_and_exchange_rates/euro_reference_exchange_rates/html/index.en.html)
          example: '2022-03-15T06:46:03.000Z'
        fromAmount:
          type: number
          description: An amount to be converted.
          format: double
          example: 1
        fromCurrency:
          type: string
          description: This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html)
            for the source amount.
          example: SGD
        fxMarkup:
          type: number
          description: This is the fx markup rate.
          format: double
          example: 1
          default: 0
        toAmountWithEcbRate:
          type: number
          description: The ecb exchange rate with to amount.
          format: double
          example: 2.349
        toAmountWithTransactionFeeAndFxMarkup:
          type: number
          description: The amount with transaction fee and fx markup rate.
          format: double
          example: 1
        toCurrency:
          type: string
          description: This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html)
            for the destination amount.
          example: USD
        transactionFee:
          type: number
          description: This is the transaction fee.
          format: double
          example: 0.1
    WalletTransferDto:
      title: WalletTransferDto
      required:
      - destinationCurrency
      - sourceCurrency
      type: object
      properties:
        amount:
          type: number
          description: This field is the amount in source currency which is to be
            transferred. If destinationAmount is provided, it will take preference
            over this field.
          format: double
          example: 10
        customerComments:
          maxLength: 512
          type: string
          description: >-
            This field accepts customer comments for the balance transfer within wallet.

            Maximum character limit is 512.
          example: Changed SGD to INR during Travel
        destinationAmount:
          type: number
          description: This field is the amount in destination currency which is to
            be transferred. If provided, amount field is not considered. If this field
            is skipped, amount is considered in source currency.
          format: double
          example: 20
        destinationCurrency:
          maxLength: 3
          minLength: 3
          type: string
          description: This field accepts the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html)
            for the destination amount.
          example: INR
        quoteId:
          type: string
          example: UUID
        sourceCurrency:
          maxLength: 3
          minLength: 3
          type: string
          description: This field accepts the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html)
            for the source amount.
          example: SGD
    WalletTransferResponseDto:
      title: WalletTransferResponseDto
      type: object
      properties:
        destinationAmount:
          type: number
          description: Destination amount is the actual amount credited after deducting
            Fx and markup.
          format: double
          example: 549.07
        destinationCurrencyCode:
          type: string
          description: This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html)
            for the destination amount.
          example: INR
        exchangeRate:
          type: number
          description: Exchange rate between source and destination currencies.
          format: double
          example: 54.934
        markupAmount:
          type: number
          description: Markup amount calculated on the transaction.
          format: double
          example: 0.27
        markupRate:
          type: number
          description: Cross-currency markup percentage levied by NIUM.
          format: double
          example: 0.027467
        netExchangeRate:
          type: number
          description: Exchange rate between source and destination currencies derived
            after accounting for markup. The netExchangeRate should be divided by
            the scaling factor to fetch the actual exchange rate.
          format: double
          example: 54.906533
        scalingFactor:
          type: integer
          description: The netExchangeRate should be divided by the scaling factor
            to fetch the actual exchange rate.
          format: int32
          example: 1
        sourceAmount:
          type: number
          description: Source amount is the amount transferred by the customer.
          format: double
          example: 10
        sourceCurrencyCode:
          type: string
          description: This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html)
            for the source amount.
          example: SGD
        systemReferenceNumber:
          type: string
          description: Unique auth code generated for the transaction by the card
            issuance platform.
          example: CP2919853847
    QuoteCreationRequest:
      title: QuoteCreationRequest
      required:
      - destinationCurrencyCode
      - quoteType
      - sourceCurrencyCode
      allOf:
      - type: object
        properties:
          sourceCurrencyCode:
            $ref: '#/components/schemas/SCC'
          destinationCurrencyCode:
            $ref: '#/components/schemas/DCC'
          quoteType:
            $ref: '#/components/schemas/QuoteType'
          conversionSchedule:
            $ref: '#/components/schemas/ConversionSchedule'
          lockPeriod:
            $ref: '#/components/schemas/LockPeriod'
          executionType:
            $ref: '#/components/schemas/ExecutionType'
          customerHashId:
            $ref: '#/components/schemas/CustomerHashId'
      - $ref: '#/components/schemas/EitherSourceOrDestinationAmountOrNoAmount'
    QuoteCreationResponse:
      title: QuoteCreationResponse
      type: object
      properties:
        id:
          $ref: '#/components/schemas/QuoteId'
        netExchangeRate:
          $ref: '#/components/schemas/NetExchangeRate'
        expiryTime:
          $ref: '#/components/schemas/QuoteExpiryTime'
        sourceCurrencyCode:
          $ref: '#/components/schemas/SCC'
        destinationCurrencyCode:
          $ref: '#/components/schemas/DCC'
        quoteType:
          $ref: '#/components/schemas/QuoteType'
        conversionSchedule:
          $ref: '#/components/schemas/ConversionSchedule'
        lockPeriod:
          $ref: '#/components/schemas/LockPeriod'
        executionType:
          $ref: '#/components/schemas/ExecutionType'
        exchangeRate:
          $ref: '#/components/schemas/ExchangeRate'
        markupRate:
          $ref: '#/components/schemas/MarkupRate'
        clientMarkupRate:
          $ref: '#/components/schemas/ClientMarkupRate'
        customerHashId:
          $ref: '#/components/schemas/CustomerHashId'
        ecbExchangeRate:
          $ref: '#/components/schemas/EcbExchangeRate'
        rateCaptureTime:
          $ref: '#/components/schemas/RateCaptureTime'
        sourceAmount:
          $ref: '#/components/schemas/SourceAmount_Quote_ExcludeNull'
        destinationAmount:
          $ref: '#/components/schemas/DestinationAmount_Quote_ExcludeNull'
        destinationMarkupAmount:
          $ref: '#/components/schemas/DestinationMarkupAmount_ExcludeNull'
        isOffMarket:
          $ref: '#/components/schemas/IsOffMarketExcludeNull'
        createdTime:
          $ref: '#/components/schemas/CreatedTime'
    ConversionCreationRequest:
      title: ConversionCreationRequest
      allOf:
      - type: object
        properties:
          customerComment:
            $ref: '#/components/schemas/Comment_Customer'
      - oneOf:
        - allOf:
          - title: With Quote Id
            type: object
            properties:
              quoteId:
                $ref: '#/components/schemas/QuoteId'
          - $ref: '#/components/schemas/EitherSourceOrDestinationAmount'
        - allOf:
          - title: With Currency Pair
            type: object
            properties:
              sourceCurrencyCode:
                $ref: '#/components/schemas/SCC'
              destinationCurrencyCode:
                $ref: '#/components/schemas/DCC'
          - $ref: '#/components/schemas/EitherSourceOrDestinationAmount'
    ConversionCreationResponse:
      title: ConversionCreationResponse
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ConversionId'
        status:
          $ref: '#/components/schemas/ConversionStatus'
        conversionTime:
          $ref: '#/components/schemas/ConversionTime'
        expiryTime:
          $ref: '#/components/schemas/ConversionExpiryTime'
        sourceCurrencyCode:
          $ref: '#/components/schemas/SCC'
        destinationCurrencyCode:
          $ref: '#/components/schemas/DCC'
        executionType:
          $ref: '#/components/schemas/ExecutionType'
        sourceAmount:
          $ref: '#/components/schemas/SourceAmount_Conversion'
        destinationAmount:
          $ref: '#/components/schemas/DestinationAmount_Conversion'
        quoteId:
          $ref: '#/components/schemas/QuoteId'
        netExchangeRate:
          $ref: '#/components/schemas/NetExchangeRate'
        exchangeRate:
          $ref: '#/components/schemas/ExchangeRate'
        markupRate:
          $ref: '#/components/schemas/MarkupRate'
        clientMarkupRate:
          $ref: '#/components/schemas/ClientMarkupRate'
        destinationMarkupAmount:
          $ref: '#/components/schemas/DestinationMarkupAmount'
        systemReferenceNumber:
          $ref: '#/components/schemas/SRN_Conversion'
        customerComment:
          $ref: '#/components/schemas/Comment_Customer'
        isOffMarket:
          $ref: '#/components/schemas/IsOffMarketExcludeNull'
        cancellationFee:
          $ref: '#/components/schemas/CancellationFee_ExcludeNull'
        cancellationFeeCurrencyCode:
          $ref: '#/components/schemas/CancellationFeeCurrencyCode_ExcludeNull'
        cancellationReason:
          $ref: '#/components/schemas/CancellationReason'
        cancellationComment:
          $ref: '#/components/schemas/Comment_CancellationExcludeNull'
        cancellationFeeSystemReferenceNumber:
          $ref: '#/components/schemas/SRN_CancellationExcludeNull'
        createdTime:
          $ref: '#/components/schemas/CreatedTime'
        updatedTime:
          $ref: '#/components/schemas/UpdatedTime'
    ConversionExecutionResponse:
      title: ConversionExecutionResponse
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ConversionId'
        status:
          $ref: '#/components/schemas/ConversionStatus'
    ConversionCancelRequest:
      title: ConversionCancelRequest
      type: object
      properties:
        cancellationComment:
          $ref: '#/components/schemas/Comment_CancellationIncludeNull'
    ConversionCancelResponse:
      title: ConversionCancelResponse
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ConversionId'
        status:
          $ref: '#/components/schemas/ConversionStatus'
        systemReferenceNumber:
          $ref: '#/components/schemas/SRN_Conversion'
        cancellationFee:
          $ref: '#/components/schemas/CancellationFee_IncludeNull'
        cancellationFeeCurrencyCode:
          $ref: '#/components/schemas/CancellationFeeCurrencyCode_IncludeNull'
        cancellationComment:
          $ref: '#/components/schemas/Comment_CancellationExcludeNull'
        cancellationFeeSystemReferenceNumber:
          $ref: '#/components/schemas/SRN_CancellationIncludeNull'
        cancellationReason:
          $ref: '#/components/schemas/CancellationReason'
    Comment_CancellationExcludeNull:
      maxLength: 512
      type: string
      description: Free text comment for clients to record and track cancellation
        of the conversion.
      example: Cancelling due to change of plans.
      x-field-extra-annotation: '@JsonInclude(JsonInclude.Include.NON_NULL)'
    Comment_CancellationIncludeNull:
      maxLength: 512
      type: string
      description: Free text comment for clients to record and track cancellation
        of the conversion.
      example: Cancelling due to change of plans.
    Comment_Customer:
      maxLength: 512
      type: string
      description: Free text comment for clients to record and track the conversion.
      example: Converting SGD to INR during Travel.
    QuoteId:
      type: string
      description: Unique identifier of the quote.
      example: quote_1234567890abcdefABCDEF
    ConversionId:
      type: string
      description: Unique identifier of the conversion.
      example: conversion_1234567890abcdefABCDEF
    CustomerHashId:
      maxLength: 36
      minLength: 36
      type: string
      description: Unique identifier of the customer.
      example: abc12345-5d6e-0a8b-c8d7-3a7706a0c312
      x-field-extra-annotation: '@JsonInclude(JsonInclude.Include.NON_NULL)'
    CoreApiHashId:
      maxLength: 36
      minLength: 36
      type: string
      example: abc12345-5d6e-0a8b-c8d7-3a7706a0c312
    SCC:
      type: string
      minLength: 3
      maxLength: 3
      description: 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html)
        for the source amount.
      example: USD
    DCC:
      type: string
      minLength: 3
      maxLength: 3
      description: 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html)
        for the destination amount.
      example: SGD
    SourceAmount_Conversion:
      minimum: 0
      exclusiveMinimum: true
      type: number
      description: The source amount to be converted to the destination currency.
      format: double
      example: 13.42
    SourceAmount_Quote:
      minimum: 0
      exclusiveMinimum: true
      type: number
      description: The source amount to be converted to the destination currency.
        This value is for reference only and will not be used as the actual conversion
        amount.
      format: double
      example: 13.42
    SourceAmount_Quote_ExcludeNull:
      minimum: 0
      exclusiveMinimum: true
      type: number
      description: The source amount to be converted to the destination currency.
        This value is for reference only and will not be used as the actual conversion
        amount.
      format: double
      example: 13.42
      x-field-extra-annotation: '@JsonInclude(JsonInclude.Include.NON_NULL)'
    DestinationAmount_Conversion:
      minimum: 0
      exclusiveMinimum: true
      type: number
      description: The amount needed in the destination currency.
      format: double
      example: 13.42
    DestinationAmount_Quote:
      minimum: 0
      exclusiveMinimum: true
      type: number
      description: The amount needed in the destination currency. This value is for
        reference only and will not be used as the actual conversion amount.
      format: double
      example: 13.42
    DestinationAmount_Quote_ExcludeNull:
      minimum: 0
      exclusiveMinimum: true
      type: number
      description: The amount needed in the destination currency. This value is for
        reference only and will not be used as the actual conversion amount.
      format: double
      example: 13.42
      x-field-extra-annotation: '@JsonInclude(JsonInclude.Include.NON_NULL)'
    DestinationMarkupAmount:
      type: number
      description: The amount charged in the destination currency as the markup for
        the conversion.
      format: double
      example: 0.07
    DestinationMarkupAmount_ExcludeNull:
      type: number
      description: The amount charged in the destination currency as the markup for
        the conversion.
      format: double
      example: 0.07
      x-field-extra-annotation: '@JsonInclude(JsonInclude.Include.NON_NULL)'
    NetExchangeRate:
      type: number
      description: Exchange rate with markup to be used for the conversion.
      format: double
      example: 1.342255231
    ExchangeRate:
      type: number
      description: Foreign exchange market rate for the currency pair, used as the
        benchmark for quote calculation.
      format: double
      example: 1.349324513
    MarkupRate:
      type: number
      description: Markup rate applied to the exchange rate for the conversion by
        Nium.
      format: double
      example: 0.006745677
    ClientMarkupRate:
      type: number
      description: Markup rate configured at the client level during the initial setup.
        If a customer level markup is not configured, then the MarkupRate defaults
        to this ClientMarkupRate.
      format: double
      example: 0.006745677
      x-field-extra-annotation: '@JsonInclude(JsonInclude.Include.NON_NULL)'
    EcbExchangeRate:
      type: number
      description: Europe Central Bank's exchange rate for this currency pair, provided
        only for EU and UK.
      format: double
      example: 1.349324513
      x-field-extra-annotation: '@JsonInclude(JsonInclude.Include.NON_NULL)'
    CreatedTime:
      type: string
      description: Time of creation in UTC.
      format: date-time
      example: '2021-03-09T06:46:03.000Z'
    UpdatedTime:
      type: string
      description: Time of update in UTC.
      format: date-time
      example: '2021-03-09T06:46:03.000Z'
    QuoteExpiryTime:
      type: string
      description: Expiry time of the quote in UTC.
      format: date-time
      example: '2021-03-09T06:46:03.000Z'
    ConversionExpiryTime:
      type: string
      description: Expiry time of the conversion in UTC.
      format: date-time
      example: '2021-03-09T06:46:03.000Z'
      x-field-extra-annotation: '@JsonInclude(JsonInclude.Include.NON_NULL)'
    IsOffMarketExcludeNull:
      type: boolean
      description: >
        Returns <code>true</code> if an FX_MARKUP_OFFMARKET fee has been applied.
        This field is only returned if off-market requests have been enabled by Nium.
        For more information, see <a href="https://docs.nium.com/apis/docs/fx-overview#off-market-rates">FX
        - Overview</a>.
      x-field-extra-annotation: '@JsonInclude(JsonInclude.Include.NON_NULL)'
    ConversionTime:
      type: string
      description: Scheduled settlement time in UTC. This is significant for future-dated
        conversions (e.g., nextDay, 2days). Ensure sufficient funds in the customer's
        wallet before this time to avoid cancellation and related charges.
      format: date-time
      example: '2021-03-09T06:46:03.000Z'
      x-field-extra-annotation: '@JsonInclude(JsonInclude.Include.NON_NULL)'
    SRN_Conversion:
      type: string
      description: Unique identifier for wallet financial activities used in all Nium
        reports and dashboards. Refer to [doc](https://docs.nium.com/apis/reference/clienttransactions)
        for details.
      example: WFT1234567890
    SRN_CancellationExcludeNull:
      type: string
      description: Unique identifier for wallet financial activities used in all Nium
        reports and dashboards. Refer to [doc](https://docs.nium.com/apis/reference/clienttransactions)
        for details.
      example: 1234567890F
      x-field-extra-annotation: '@JsonInclude(JsonInclude.Include.NON_NULL)'
    SRN_CancellationIncludeNull:
      type: string
      description: Unique identifier for wallet financial activities used in all Nium
        reports and dashboards. Refer to [doc](https://docs.nium.com/apis/reference/clienttransactions)
        for details.
      example: 1234567890F
    CancellationFee_ExcludeNull:
      type: number
      description: The fee charged when executing the cancellation.
      format: double
      x-field-extra-annotation: '@JsonInclude(JsonInclude.Include.NON_NULL)'
    CancellationFee_IncludeNull:
      type: number
      description: The fee charged when executing the cancellation.
      format: double
    CancellationFeeCurrencyCode_ExcludeNull:
      type: string
      description: 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html)
        for the cancellation fee.
      x-field-extra-annotation: '@JsonInclude(JsonInclude.Include.NON_NULL)'
    CancellationFeeCurrencyCode_IncludeNull:
      type: string
      description: 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html)
        for the cancellation fee.
    EitherSourceOrDestinationAmountOrNoAmount:
      oneOf:
      - title: With No Amount
        type: object
      - title: With Source Amount
        type: object
        properties:
          sourceAmount:
            $ref: '#/components/schemas/SourceAmount_Quote'
      - title: With Destination Amount
        type: object
        properties:
          destinationAmount:
            $ref: '#/components/schemas/DestinationAmount_Quote'
    EitherSourceOrDestinationAmount:
      oneOf:
      - title: With Source Amount
        type: object
        properties:
          sourceAmount:
            $ref: '#/components/schemas/SourceAmount_Conversion'
      - title: With Destination Amount
        type: object
        properties:
          destinationAmount:
            $ref: '#/components/schemas/DestinationAmount_Conversion'
    ConversionSchedule:
      title: ConversionSchedule
      type: string
      description: The time period after which the conversion should be settled.
      example: immediate
      default: immediate
      enum:
      - immediate
      - end_of_day
      - next_day
      - 2_days
    QuoteType:
      title: QuoteType
      type: string
      description: >
        The type of the quote.
          * `balance_transfer`: Quote for transferring the balance from one currency
        to another within the same customer wallet.
      enum:
      - balance_transfer
      - payout
    LockPeriod:
      title: LockPeriod
      type: string
      description: The duration for which the quote remains valid after creation.
      example: 15_mins
      default: 5_mins
      enum:
      - 5_mins
      - 15_mins
      - 1_hour
      - 4_hours
      - 8_hours
      - 24_hours
    ExecutionType:
      title: ExecutionType
      type: string
      description: Specifies the conversion type. 'Manual' conversions needs user
        intervention before 'expiryTime' to execute, while 'at_conversion_time' conversions
        self-execute at 'conversionTime' without user intervention.
      example: manual
      default: at_conversion_time
      enum:
      - at_conversion_time
      - manual
    CancellationReason:
      title: CancellationReason
      type: string
      description: "Reason for a conversion cancellation. \n  * `user_cancel`: User\
        \ initiated cancellation.\n  * `insufficient_fund`: Cancellation due to insufficient\
        \ balance in the wallet at the time of conversion execution.\n"
      enum:
      - user_cancel
      - insufficient_fund
      - expired
      x-field-extra-annotation: '@JsonInclude(JsonInclude.Include.NON_NULL)'
    ConversionStatus:
      title: ConversionStatus
      type: string
      description: The status of the conversion.
      enum:
      - created
      - processing
      - completed
      - cancelled
      - failed
      - pending_cancellation
    RateCaptureTime:
      title: RateCaptureTime
      type: string
      description: Time in UTC at which exchange rate was obtained from the rate provider
      format: date-time
      example: '2021-03-09T06:46:03.000Z'
    CreateQuoteError:
      description: >
        error details description
      allOf:
      - $ref: '#/components/schemas/FXError'
      - type: object
        properties:
          code:
            type: string
            description: >
              The detailed error code associated with HTTP status 400.


              * `fx_constraint_violated_input`: The input violates the model constraints.

              * `fx_invalid_format_input`: The input format is invalid.

              * `fx_invalid_currency_code`: The input currency code is invalid.
            enum:
            - fx_constraint_violated_input
            - fx_invalid_format_input
            - fx_invalid_currency_code
          field:
            x-field-extra-annotation: '@JsonInclude(JsonInclude.Include.NON_NULL)'
    FetchQuoteError:
      description: >
        error details description
      allOf:
      - $ref: '#/components/schemas/FXError'
      - type: object
        properties:
          code:
            type: string
            description: >
              The detailed error code associated with HTTP status 400.

              * `fx_constraint_violated_input`: The input violates the model constraints.
            enum:
            - fx_constraint_violated_input
          field:
            x-field-extra-annotation: '@JsonInclude(JsonInclude.Include.NON_NULL)'
    CreateConversionError:
      description: >
        error details description
      allOf:
      - $ref: '#/components/schemas/FXError'
      - type: object
        properties:
          code:
            type: string
            description: >
              The detailed error code associated with HTTP status 400.

              * `fx_constraint_violated_input`: The input violates the model constraints.

              * `fx_invalid_format_input`: The input format is invalid.

              * `fx_invalid_currency_code`: The input currency code is invalid.

              * `fx_quote_expired`: The provided quote is expired.

              * `fx_insufficient_funds`: The balance in the account is insufficient
              to complete/schedule the transfer.
            enum:
            - fx_constraint_violated_input
            - fx_invalid_format_input
            - fx_invalid_currency_code
            - fx_quote_expired
            - fx_insufficient_funds
          field:
            x-field-extra-annotation: '@JsonInclude(JsonInclude.Include.NON_NULL)'
    FetchConversionError:
      description: >
        error details description
      allOf:
      - $ref: '#/components/schemas/FXError'
      - type: object
        properties:
          code:
            type: string
            description: >
              The detailed error code associated with HTTP status 400.

              * `fx_constraint_violated_input`: The input violates the model constraints.
            enum:
            - fx_constraint_violated_input
          field:
            x-field-extra-annotation: '@JsonInclude(JsonInclude.Include.NON_NULL)'
    ExecuteConversionError:
      description: >
        error details description
      allOf:
      - $ref: '#/components/schemas/FXError'
      - type: object
        properties:
          code:
            type: string
            description: >
              The detailed error code associated with HTTP status 400.

              * `fx_invalid_operation_conversion`: The operation on the conversion
              is invalid.

              * `fx_constraint_violated_input`: The input violates the model constraints.
            enum:
            - fx_invalid_operation_conversion
            - fx_constraint_violated_input
          field:
            x-field-extra-annotation: '@JsonInclude(JsonInclude.Include.NON_NULL)'
    CancelConversionError:
      description: >
        error details description
      allOf:
      - $ref: '#/components/schemas/FXError'
      - type: object
        properties:
          code:
            type: string
            description: >
              The detailed error code associated with HTTP status 404.

              * `fx_invalid_operation_conversion`: The operation on the conversion
              is invalid.

              * `fx_constraint_violated_input`: The input violates the model constraints.
            enum:
            - fx_invalid_operation_conversion
            - fx_constraint_violated_input
          field:
            x-field-extra-annotation: '@JsonInclude(JsonInclude.Include.NON_NULL)'
    FetchQuoteErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/FetchQuoteError'
    CreateQuoteErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/CreateQuoteError'
    CreateConversionErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/CreateConversionError'
    FetchConversionErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/FetchConversionError'
    ExecuteConversionErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ExecuteConversionError'
    CancelConversionErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/CancelConversionError'
    Descriptive404Error:
      description: >
        error details description
      allOf:
      - $ref: '#/components/schemas/FXStandard404Error'
      - type: object
        properties:
          description:
            type: string
            description: >
              The detailed error code associated with HTTP status 404.
    FXStandard401Error:
      type: object
      properties:
        code:
          type: string
          default: unauthorized
          enum:
          - unauthorized
        description:
          type: string
          default: Access Denied
          enum:
          - Access Denied
    FXStandard403Error:
      type: object
      properties:
        code:
          type: string
          default: access_forbidden
          enum:
          - access_forbidden
        description:
          type: string
          default: Access to resource not allowed
          enum:
          - Access to resource not allowed
    FXStandard500Error:
      type: object
      properties:
        code:
          type: string
          default: internal_error
          enum:
          - internal_error
          - external_dependent_system_failed
        description:
          type: string
          default: An internal error occurred
          enum:
          - An internal error occurred
    FXError:
      required:
      - code
      - description
      type: object
      properties:
        code:
          type: string
        description:
          type: string
        field:
          type: string
    FXStandard404Error:
      type: object
      properties:
        code:
          type: string
          default: resource_not_found
          enum:
          - resource_not_found
        description:
          type: string
          default: Resource not found
          enum:
          - Resource not found
    LocalIsoRequest:
      properties:
        acceptorId42:
          description: This field contains the 15 character acceptor id
          type: string
        acceptorNameLocation43:
          description: This field contains the acceptor name and location
          type: string
        acceptorTerminalId41:
          description: This field contains the 8 character acceptor terminal id
          type: string
        aiCountryCode19:
          description: This field contains the 3 character ai country code
          example: '702'
          type: string
        aiIdentityCode32:
          description: This field contains the ai identity code
          type: string
        authorizationCode38:
          description: This field contains the 6 character authorization code
          type: string
        billingAmount6:
          description: This field contains the 12 character billing amount
          example: '000000000100'
          type: string
        billingAmountFee30:
          description: This field contains the billing amount fee30
          type: string
        billingAmountFee8:
          description: This field contains the billing amount fee8
          type: string
        billingConversionRate10:
          description: This field contains the billing conversion rate10
          type: string
        billingCurrencyCode51:
          description: This field contains the 3 character billing currency code
          example: '840'
          type: string
        captureDateYYMM17:
          description: This field contains the capture date
          example: '2411'
          type: string
        cardSequenceNumber23:
          description: This field contains the card sequence number
          type: string
        conversionDateYYMM16:
          description: This field contains the conversion date
          example: '2411'
          type: string
        expiryDateYYMM14:
          description: This field contains the expiry date
          example: '2411'
          type: string
        fiCountryCode21:
          description: This field contains the 3 character fi country code
          example: '702'
          type: string
        fiIdentityCode33:
          description: This field contains the fi identity code
          type: string
        localDate13:
          description: This field contains the local date13
          type: string
        localTime12:
          description: This field contains the local time12
          type: string
        merchantType18:
          description: This field contains the 4 character merchant type
          example: '4563'
          type: string
        messageType0:
          description: This field contains the 4 character message type
          example: '0100'
          type: string
        mid62:
          description: This field contains the mid62
          type: string
        miscData58:
          description: This field contains the misc data
          type: string
        networkInternationalId24:
          description: This field contains the network international id
          type: string
        originalDataElement90:
          description: This field contains the original data element
          type: string
        pan2:
          description: This field contains the 16 character pan2
          example: '4611350118036518'
          type: string
        posConditionCode25:
          description: This field contains the 2 character pos condition code
          example: '07'
          type: string
        posEntryCapabilityCode60:
          description: This field contains the pos entry capability code
          example: '05'
          type: string
        posEntryMode22:
          description: This field contains the 4 character pos entry mode
          example: '1020'
          type: string
        posPinCaptureCode26:
          description: This field contains the pos pin capture code
          type: string
        processingCode3:
          description: This field contains the 6 character processing code
          example: '000000'
          type: string
        replacementAmount95:
          description: This field contains the replacement amount
          type: string
        responseCode39:
          description: This field contains the 2 character response code
          type: string
        rrn:
          description: This field contains the rrn
          type: string
        settlementAmount5:
          description: This field contains the settlement amount
          type: string
        settlementAmountFee29:
          description: This field contains the settlement amount fee
          type: string
        settlementConversionRate9:
          description: This field contains the settlement conversion rate9
          type: string
        settlementCurrencyCode50:
          description: This field contains the settlement currency code
          example: '702'
          type: string
        settlementDateYYMM15:
          description: This field contains the settlement date
          example: '2411'
          type: string
        settlementProcessingAmountFee31:
          description: This field contains the settlement processing amount fee
          type: string
        stan:
          description: This field contains the stan
          type: string
        traceIdentifier115:
          description: This field contains the trace identifier
          type: string
        track2Data35:
          description: This field contains the track 2 Data
          type: string
        transactionAmount4:
          description: This field contains the 12 character transaction amount
          example: '000000000100'
          type: string
        transactionAmountFee28:
          description: This field contains the transaction amount fee
          type: string
        transactionCurrencyCode49:
          description: This field contains the 3 character transaction currency code
          example: '702'
          type: string
      title: Local iso request
      type: object
    LocalIsoResponse:
      properties:
        additionalAmount:
          description: This field contains balance inquiry amount
          type: string
        authorizationCode:
          description: This field contains the authorization code
          type: string
        dateOfTransaction:
          description: This field contains the date of transaction
          type: string
        responseCode:
          description: This field contains the response code value
          type: string
        rrn:
          description: This field contains the rrn
          type: string
        stan:
          description: This field contains the stan
          type: string
        status:
          description: This field contains the status
          type: string
      title: Local iso response
      type: object
    ExchangeRateGetResponse:
      title: ExchangeRateGetResponse
      properties:
        average:
          type: number
          format: double
          example: 1.634793477
        min:
          type: number
          format: double
          example: 1.625575716
        max:
          type: number
          format: double
          example: 1.689794369
        time:
          type: string
          format: date-time
          example: '2022-03-15T06:00:00.000Z'
    ExchangeRatesGetResponse:
      title: ExchangeRatesGetResponse
      properties:
        sourceCurrencyCode:
          $ref: '#/components/schemas/SCC'
        destinationCurrencyCode:
          $ref: '#/components/schemas/DCC'
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        window:
          $ref: '#/components/schemas/Window'
        exchangeRates:
          type: array
          items:
            $ref: '#/components/schemas/ExchangeRateGetResponse'
    Window:
      title: Window
      description: Specifies the field by which the results should be grouped.
      enum:
      - 1_day
      - 1_hour
      default: 1_day
    historicalRateErrorCodes400:
      type: string
      description: >
        The detailed error code associated with HTTP status 400.


        * `fx_constraint_violated_input`: The input violates the model constraints.

        * `fx_invalid_format_input`: The input format is invalid.

        * `fx_invalid_currency_code`: The input currency code is invalid.

        * `fx_missing_input`: The required fields are missing.

        * `fx_date_range_invalid`: The date range should be within 90 days.
      enum:
      - fx_constraint_violated_input
      - fx_invalid_format_input
      - fx_invalid_currency_code
      - fx_missing_input
      - fx_date_range_invalid
    ErrorCodes401:
      type: string
      description: >
        The detailed error code associated with HTTP status 401.

        * `fx_client_unauthenticated`: The client request lacks valid authentication
        credentials.
      enum:
      - fx_client_unauthenticated
    ErrorCodes403:
      type: string
      description: >
        The detailed error code associated with HTTP status 403.

        * `fx_client_no_access`: The client is authenticated but not authorized.
      enum:
      - fx_client_no_access
    ErrorCodes500:
      type: string
      description: >
        The detailed error code associated with HTTP status 500.

        * `fx_dependency_error`: Error happens when the service calls its dependencies.

        * `fx_uncategorized_error`: Service errors not categorized.
      enum:
      - fx_dependency_error
      - fx_uncategorized_error
    historicalRateErrorDetail400:
      type: object
      description: error details description
      properties:
        code:
          $ref: '#/components/schemas/historicalRateErrorCodes400'
        description:
          type: string
          description: Description of the error.
    ErrorDetail401:
      type: object
      description: error details description
      properties:
        code:
          $ref: '#/components/schemas/ErrorCodes401'
        description:
          type: string
          description: Description of the error.
    ErrorDetail403:
      type: object
      description: error details description
      properties:
        code:
          $ref: '#/components/schemas/ErrorCodes403'
        description:
          type: string
          description: Description of the error.
    ErrorDetail500:
      type: object
      description: error details description
      properties:
        code:
          $ref: '#/components/schemas/ErrorCodes500'
        description:
          type: string
          description: Description of the error.
    historicalRateErrorResponse400:
      type: object
      properties:
        errorDetails:
          type: array
          items:
            $ref: '#/components/schemas/historicalRateErrorDetail400'
    ErrorResponse401:
      type: object
      properties:
        errorDetails:
          type: array
          items:
            $ref: '#/components/schemas/ErrorDetail401'
    ErrorResponse403:
      type: object
      properties:
        errorDetails:
          type: array
          items:
            $ref: '#/components/schemas/ErrorDetail403'
    ErrorResponse500:
      type: object
      properties:
        errorDetails:
          type: array
          items:
            $ref: '#/components/schemas/ErrorDetail500'
    externalAccountServiceStandard401Error:
      type: object
      properties:
        code:
          type: string
          default: unauthorized
          enum:
          - unauthorized
        description:
          type: string
          default: Access Denied
          enum:
          - Access Denied
    externalAccountServiceStandard403Error:
      type: object
      properties:
        code:
          type: string
          default: access_forbidden
          enum:
          - access_forbidden
        description:
          type: string
          default: Access to resource not allowed
          enum:
          - Access to resource not allowed
    externalAccountServiceStandard404Error:
      type: object
      properties:
        code:
          type: string
          default: resource_not_found
          enum:
          - resource_not_found
        description:
          type: string
          default: Resource not found
          enum:
          - Resource not found
    externalAccountServiceStandard500Error:
      type: object
      properties:
        code:
          type: string
          default: internal_error
          enum:
          - internal_error
          - external_dependent_system_failed
        description:
          type: string
          default: An internal error occurred
          enum:
          - An internal error occurred
    TagValue:
      type: string
    IsCustomerAccount:
      type: boolean
      description: Whether or not the bank account belongs to the customer
    externalAccountServiceRoutingInfo:
      required:
      - type
      - value
      type: object
      properties:
        type:
          type: string
          description: The type of the routing code.
          enum:
          - swift
          - transit_number
          - sort_code
          - branch_code
          - ach_code
          - bank_code
        value:
          type: string
          description: The value of the routing code.
          example: '200000'
      description: The routing code associated with the bank account.
    BankAccountId:
      type: string
      description: Unique identifier of a linked bank account.
      format: uuid
    AccountNumber:
      type: string
      description: The bank account number
    externalAccountServiceCountry:
      maxLength: 2
      minLength: 2
      type: string
      description: ISO 3166-2 country code.
    externalAccountServiceCurrency:
      maxLength: 3
      minLength: 3
      type: string
      description: ISO 4217 currency code.
    AuthenticationType:
      type: string
      description: >
        The authentication type to use.

        * `microdeposit_amounts`: The specified account receives two micro-deposit
        transactions. The amounts of the transactions are used for authentication.

        * `microdeposit_otp`: The specified account receives a single micro-deposit
        transaction with a one-time-password (OTP) in the statement narrative. The
        OTP is used for authentication.
      enum:
      - microdeposit_amounts
      - microdeposit_otp
    BankAccountLinkRequest:
      title: BankAccountLinkRequest
      required:
      - accountNumber
      - country
      - currency
      - isCustomerAccount
      - routingCodes
      properties:
        country:
          $ref: '#/components/schemas/externalAccountServiceCountry'
        currency:
          $ref: '#/components/schemas/externalAccountServiceCurrency'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        routingCodes:
          type: array
          description: The bank account's routing codes.
          items:
            $ref: '#/components/schemas/externalAccountServiceRoutingInfo'
        authenticationType:
          $ref: '#/components/schemas/AuthenticationType'
        isCustomerAccount:
          $ref: '#/components/schemas/IsCustomerAccount'
        tags:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/TagValue'
          description: A set of key-value pairs for use by the client. A maximum of
            15 tags are allowed.
      description: Bank account link request.
    LinkBankAccountErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/LinkBankAccountError'
    LinkBankAccountError:
      allOf:
      - $ref: '#/components/schemas/Error'
      - type: object
        properties:
          code:
            type: string
            description: >
              The detailed error code associated with HTTP status 400.

              * `validation_error`: The input violates the model constraints.

              * `invalid_input`: The given request contains a field which is invalid.

              * `account_not_supported`: The given bank account is not supported.
            enum:
            - validation_error
            - invalid_input
            - account_not_supported
    BankAccountConfirmationRequest:
      title: BankAccountConfirmationRequest
      properties:
        amounts:
          type: array
          description: The micro-deposit amounts received, in any order.
          items:
            type: number
            format: float
        otp:
          type: string
          description: The OTP received in the statement narrative.
    FetchLinkedBankAccountsErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/FetchLinkedBankAccountsError'
    FetchLinkedBankAccountsError:
      allOf:
      - $ref: '#/components/schemas/Error'
      - type: object
        properties:
          code:
            type: string
            description: >
              The detailed error code associated with HTTP status 400.

              * `validation_error`: The input violates the model constraints.

              * `invalid_input`: The given request contains a field which is invalid.
            enum:
            - validation_error
            - invalid_input
    ConfirmBankAccountErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ConfirmBankAccountError'
    ConfirmBankAccountError:
      allOf:
      - $ref: '#/components/schemas/Error'
      - type: object
        properties:
          code:
            type: string
            description: >
              The detailed error code associated with HTTP status 400.

              * `validation_error`: The input violates the model constraints.

              * `invalid_authentication_type`: The request did not contain the correct
              authentication field for the given bank account's authentication type.

              * `incorrect_authentication_value`: The request's authentication value
              was incorrect.

              * `authentication_failed`: The maximum number of authentication attempts
              has been reached. Authentication has failed.

              * `invalid_bank_account_action`: The bank account action is invalid.
            enum:
            - validation_error
            - invalid_authentication_type
            - incorrect_authentication_value
            - authentication_failed
            - invalid_bank_account_action
    BankAccountUpdateRequest:
      title: BankAccountUpdateRequest
      properties:
        tags:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/TagValue'
          description: A set of key-value pairs for use by the client. A maximum of
            15 tags are allowed.
    UpdateBankAccountErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/UpdateBankAccountError'
    UpdateBankAccountError:
      allOf:
      - $ref: '#/components/schemas/Error'
      - type: object
        properties:
          code:
            type: string
            description: >
              The detailed error code associated with HTTP status 400.

              * `validation_error`: The input violates the model constraints.

              * `invalid_input`: The given request contains a field which is invalid.
            enum:
            - validation_error
            - invalid_input
    BankAccountActionState:
      type: string
      description: >
        The state of the action being performed on the bank account.

        * `not_started`: The action has not been initiated.

        * `in_progress`: The action is in progress.

        * `failed`: The action has failed.

        * `completed`: The action is completed successfully.
      enum:
      - not_started
      - in_progress
      - failed
      - completed
    BankAccountResponse:
      title: BankAccountResponse
      type: object
      properties:
        bankAccountId:
          $ref: '#/components/schemas/BankAccountId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        routingCodes:
          type: array
          description: The bank account's routing codes.
          items:
            $ref: '#/components/schemas/externalAccountServiceRoutingInfo'
        country:
          $ref: '#/components/schemas/externalAccountServiceCountry'
        currency:
          $ref: '#/components/schemas/externalAccountServiceCurrency'
        verification:
          $ref: '#/components/schemas/BankAccountActionState'
        authentication:
          $ref: '#/components/schemas/BankAccountActionState'
        authenticationType:
          $ref: '#/components/schemas/AuthenticationType'
        isCustomerAccount:
          $ref: '#/components/schemas/IsCustomerAccount'
        tags:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/TagValue'
          description: A set of key-value pairs for use by the client. A maximum of
            15 tags are allowed.
        createdAt:
          type: string
          description: The date and time when this bank account was first linked.
          format: date-time
        updatedAt:
          type: string
          description: The date and time when this bank account was last updated at.
          format: date-time
      description: Bank account response.
    PaginatedBankAccountResponse:
      title: PaginatedBankAccountResponse
      type: object
      properties:
        bankAccounts:
          type: array
          description: Page of bank accounts.
          items:
            $ref: '#/components/schemas/BankAccountResponse'
        pagination:
          $ref: '#/components/schemas/CursorPagination'
      description: Paginated bank account response.
    CursorPagination:
      required:
      - currentCursor
      - nextCursor
      type: object
      properties:
        totalRecords:
          type: integer
          description: The total number of records available to be returned.
          example: 95
          x-field-extra-annotation: '@JsonInclude(JsonInclude.Include.NON_NULL)'
        totalPages:
          type: integer
          description: The total number of pages available for querying.
          example: 5
          x-field-extra-annotation: '@JsonInclude(JsonInclude.Include.NON_NULL)'
        currentCursor:
          type: string
          description: The cursor for the current page of responses.
        nextCursor:
          type: string
          description: The cursor for the next page of responses.
        nextPageUrl:
          type: string
          description: The URL of the request for the next page of responses.
          x-field-extra-annotation: '@JsonInclude(JsonInclude.Include.NON_NULL)'
        prevPageUrl:
          type: string
          description: The URL of the request for the previous page of responses.
          x-field-extra-annotation: '@JsonInclude(JsonInclude.Include.NON_NULL)'
    MicroDepositDetails:
      type: object
      properties:
        amounts:
          type: array
          description: The micro-deposit amounts sent.
          items:
            type: number
            format: float
    SimulateStatusResponseDTO:
      properties:
        message:
          description: This field will return a message if a request is successfully
            executed
          type: string
      example:
        message: Status has been updated to RFI_REQUESTED successfully
    SimulateTransactionStatusRequestDTO:
      type: object
      required:
      - nextStatus
      properties:
        nextStatus:
          description: This field will accept next applicable status  for the transaction
            as logically applicable as per Remittance Lifecyle
          type: string
          enum:
          - EXPIRED
          - RFI_REQUESTED
          - COMPLIANCE_COMPLETED
          - REJECTED
          - PAID
          - RETURN
          - ERROR
        requestInfoFor:
          description: Will accept enum value based on which Request for information
            will be raised. For example, supplying creditor_firstName would initiate
            RFI request information on the beneficiary's first name
          type: string
          enum:
          - creditor_salaryStatement
          - creditor_driverLicence
          - creditor_lastName
          - debtor_address
          - debtor_thirdPartyFunding
          - debtor_bankName
    SimulateAccountStatusRequestDTO:
      type: object
      required:
      - nextStatus
      properties:
        nextStatus:
          description: This field will accept next applicable compliance status for
            the account as logically applicable as per Account Compliance Lifecyle
          type: string
          enum:
          - RFI_REQUESTED
          - COMPLETED
          - REJECT
        requestInfoFor:
          description: Will accept object based on which Request for information will
            be raised.
          type: object
          oneOf:
          - $ref: '#/components/schemas/IndividualCustomerRequest'
          - $ref: '#/components/schemas/CorporateCustomerRequest'
          discriminator:
            propertyName: customerType
            mapping:
              individual: '#/components/schemas/IndividualCustomerRequest'
              corporate: '#/components/schemas/CorporateCustomerRequest'
    IndividualCustomerRequest:
      title: Individual customer
      type: object
      description: Inputs supported for individual customer
      required:
      - customerType
      - request
      properties:
        customerType:
          type: string
        request:
          type: string
          enum:
          - passport
          - bankStatement
          - firstName
          - lastName
          - dateOfBirth
          - driversLicence
    CorporateCustomerRequest:
      title: Corporate customer
      type: object
      description: Inputs supported for corporate customer
      required:
      - customerType
      - request
      properties:
        customerType:
          type: string
        request:
          type: string
          enum:
          - applicant_Address
          - applicant_Identity
          - stakeholder_Address
          - stakeholder_Identity
          - businessRegistrationDocument
          - corporateAddressProof
    SimulateUnprocessableEntityErrorDTO:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              code:
                type: string
              description:
                type: string
    onboarding-form-serviceApiErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/onboarding-form-serviceTypedErrorErrorCodes'
    onboarding-form-serviceTypedErrorErrorCodes:
      type: object
      properties:
        code:
          type: string
          enum:
          - invalid_client_hash_id
          - customer_already_exist
          - application_already_exists
          - invalid_request
          - invalid_application_id
          - unauthorized
          - not_found
          - forbidden
          - internal_server_error
          - validation_invalid_value
          - validation_missing_value
          - invalid_session_id
          - session_already_exist
          - file_download_failed
          - url_expired
          - invalid_linkId
          - invalid_business_details
          - invalid_stakeholder_details
          - invalid_applicant_details
          - invalid_risk_details
          - invalid_otp
        description:
          type: string
        field:
          type: string
    Corporate:
      required:
      - applicantEmail
      - businessName
      - businessRegistrationNumber
      type: object
      properties:
        businessName:
          maxLength: 80
          minLength: 0
          type: string
          example: Nium India
        businessRegistrationNumber:
          maxLength: 30
          minLength: 0
          pattern: ^[a-zA-Z0-9 ]*$
          type: string
          example: '123456789'
        applicantEmail:
          maxLength: 60
          minLength: 0
          pattern: ^$|^(([a-zA-Z0-9._%+-]+)?@([a-zA-Z0-9.-]+)?\.([a-zA-Z]{2,})?)$
          type: string
          description: Email Id of the applicant of the corporate customer. Applicant
            will receive authentication for the form on this email id.
          example: applicant@gmail.com
        registeredCountry:
          maxLength: 2
          minLength: 0
          type: string
          description: Country of registration of the corporate customer
          example: SG
    GenerateLinkRequest:
      required:
      - applicationType
      - region
      type: object
      properties:
        applicationType:
          pattern: ^(?i)(CORPORATE)?$
          type: string
          example: corporate
          enum:
          - corporate
        region:
          type: string
          description: Regulatory region under which you want to onboard the corporate
            customer
          example: SG
          enum:
          - SG
        corporate:
          $ref: '#/components/schemas/Corporate'
    GenerateLinkResponse:
      type: object
      properties:
        applicationId:
          type: string
          description: Application Id generated for the customer
          example: APP1713860447006QUG
        url:
          type: string
          description: Onboarding form link
          example: http://nium.com/onboard/corporate/APP1713860447006QUG?linkId=7653cf6e-957a-4491-b41b-c44f7e96f414
        expiry:
          type: string
          description: Expiry time of the link(in millis)
          example: '1713359070614'
    onboarding-form-serviceStandard404Error:
      type: object
      properties:
        code:
          type: string
          enum:
          - resource_not_found
        description:
          type: string
    ApiErrorDTO:
      type: object
      properties:
        code:
          type: string
          description: error code for the error received by the customer on the submit
            of onboarding form application.
          enum:
          - invalid_request
          - invalid_business_details
        description:
          type: string
          description: error description for the error received by the customer on
            the submit of onboarding form application.
      example:
        code: invalid_request
        description: customer is already available with businessName 234
    CompletedSections:
      type: object
      properties:
        businessDetails:
          type: string
          enum:
          - completed
          - pending
        applicant:
          type: string
          enum:
          - completed
          - pending
        stakeholders:
          type: string
          enum:
          - completed
          - pending
        additionalDetails:
          type: string
          enum:
          - completed
          - pending
        review:
          type: string
          enum:
          - completed
          - pending
      description: Indicates which sections are pending, completed by the customer
    OnboardingApplicationProgressResponse:
      type: object
      properties:
        status:
          type: string
          description: Status of the application filled using Onboarding Forms
          enum:
          - initiated
          - in_progress
          - in_review
          - approved
          - rejected
          - submission_error
        completedSections:
          $ref: '#/components/schemas/CompletedSections'
        redirectUrl:
          type: string
          description: Applicant KYC URL, if the applicant is required to complete
            KYC in a third party vendor
          example: https://integrationspreprod.partners.instarem.com/preprod/compliance/callback/load?referenceNumber=85e48412-ec51-4b66-9ea6-5f2bd047cb73&token=your_token_here
        expiry:
          type: string
          description: expiry in epoch for the applicant KYC URL
          example: '1713359070614'
        submissionErrors:
          type: array
          example:
            code: invalid_request
            description: customer is already available with businessName 234
          items:
            $ref: '#/components/schemas/ApiErrorDTO'
        customerHashId:
          type: string
          description: customerHashId generated when customer is created in Nium
          example: 1d33c952-c857-47a1-8b4b-33d2054ece75
        walletHashId:
          type: string
          description: walletHashId,  generated when customer is created in Nium
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
    Error:
      type: object
      properties:
        code:
          type: string
        description:
          type: string
        field:
          type: string
  responses:
    BadRequest:
      description: Error response when the request format is invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/historicalRateErrorResponse400'
    historicalRateUnauthorized:
      description: Error response when the request is unauthorized.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse401'
    historicalRateForbidden:
      description: Error response when the requested resource is forbidden.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse403'
    historicalRateInternalError:
      description: Error response when service has internal error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse500'
    InvalidInput:
      description: Error response when the provided request is invalid.
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  type: object
                  properties:
                    code:
                      type: string
                    description:
                      type: string
                    field:
                      type: string
                  required:
                  - code
                  - description
    n1-simulationUnauthorized:
      description: Error response when the request is unauthorized.
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                default: unauthorized
                enum:
                - unauthorized
              description:
                type: string
                default: Access Denied
                enum:
                - Access Denied
    n1-simulationForbidden:
      description: Error response when the requested resource is forbidden.
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                default: access_forbidden
                enum:
                - access_forbidden
              description:
                type: string
                default: Access to resource not allowed
                enum:
                - Access to resource not allowed
    n1-simulationInternalError:
      description: Error response when an internal error occurs.
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                default: internal_error
                enum:
                - internal_error
                - external_dependent_system_failed
              description:
                type: string
                default: An internal error occurred
                enum:
                - An internal error occurred
  parameters:
    historicalRateAuthorization:
      name: Authorization
      in: header
      required: false
      schema:
        type: string
      x-internal: true
    historicalRateCsrfToken:
      name: csrf_token
      in: header
      required: false
      schema:
        type: string
      x-internal: true
    SCC_QueryParam:
      name: sourceCurrencyCode
      in: query
      description: This field contains the 3-letter [currency-and-country-codes](https://docs.nium.com/apis/docs/currency-and-country-codes).
      required: true
      schema:
        $ref: '#/components/schemas/SCC'
    DCC_QueryParam:
      name: destinationCurrencyCode
      in: query
      description: This field contains the 3-letter [currency-and-country-codes](https://docs.nium.com/apis/docs/currency-and-country-codes).
      required: true
      schema:
        $ref: '#/components/schemas/DCC'
x-tagGroups:
- name: Clients
  tags:
  - Client Prefund Account
  - Client Settings
  - Client Transactions
- name: Customers
  tags:
  - Customer Account - Individual
  - Customer Account - Corporate
  - Customer Management
  - Customer Terms and Conditions
  - Open Banking (Onboarding)
  - Accounts
  - Onboarding Forms - Corporate
- name: Wallets
  tags:
  - Customer Wallet Balance
  - Wallet to Wallet Transfers
  - Customer Wallet Transactions
- name: Payins
  tags:
  - Customer Funding
  - Customer Virtual Accounts
- name: Foreign Exchange
  tags:
  - Rates
  - Quotes
  - Conversions
  - Quotes (Previous Version)
  - Conversions (Previous Version)
- name: Payouts
  tags:
  - Beneficiary
  - Reference Data
  - Payout
  - Nium Verify
- name: Cards
  tags:
  - Simulators
  - Lifecycle
  - Security
  - 3DS
  - Controls
  - Cards Reference Data
- name: Fees
  tags:
  - Customer Fees
- name: Testing
  tags:
  - Payouts
  - Payin
  - Customer
